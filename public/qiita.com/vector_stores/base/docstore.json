[["0",{"pageContent":"# Introduction\nThis is the material for technical session on 2023-03-20.\nThe purpose is to understand style editing process with unvt/charites.\n\n# Environment\nWe are working at our DEV environment. We use our hosting server in DEV env.\n* RHEL\n* nodejs: v16.19.0\n* unvt/charites: 0.4.0\n\n# Target\nWe are editing our styles with unvt/charites. This time, the target of the practice is the style.json (root.json) for Esri service. We will dowonload the style file and import it as YAML files.\n\nFor our APP with MapLibre, you may also refer the following files.\nhttps://github.com/ubukawa/styles/tree/main/style-prod\n\n\n# Procedure\n## Step 1. Making the work directory\nLogin to the server (if you want to work on the server), and prepare a directory for this work.\n```bash\nmkdir 2023-03-20\ncd 2023-03-20\n```","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":24}}}}],["1",{"pageContent":"Step 2. Import the current style and adjust its source\nMake sure that you can access to the hosting server in DEV.\nWe will see the style file (json) and pipe it into charites (convert) to obtain the style in yaml files.\n\n```bash\ncurl https://dev-geoportal.dfs.un.org/unvt/esriIF/UniteStreetMapVector/VectorTileServer/resources/styles/root.json | charites convert - esri/style.yml\n```\n\nYou may replace the input file if you want. In this case, imported files are stored in the \"esri\" directory. \n\nThe \"esri\" directory that contains yaml files. We copy it as \"esri-edit\" to further edit.\n\n```bash\ncp -r esri esri-edit\ncd esri-edit","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":26,"to":40}}}}],["2",{"pageContent":"Edit the source \"v\" in the imported style.yml.\nEsri uses \"url\" for its tile server, but our styling tool does not understand index.json based on ArcGIS REST APIT. Please use direct URL of tiles. So, add \"tiles\" there. Then, you are ready for the live preview.\n(It is also important to pay attention on the order of z-x-y. If the tile is from ESRI server, it is often z-y-x.)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8e8d5809-5558-2b76-43c6-553a44bc48eb.png)","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":43,"to":47}}}}],["3",{"pageContent":"Step 3. Run live preview \nYou can start live preview with the following command. The live preview is through **http** protocol, not https. Note that the port can be specified as you like.\n```bash\ncharites serve --port 8836 style.yml\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b274dfd2-53c3-b0c7-8d7e-cff893ea3841.png)\n\nAccess (http) to the server via the port specified. We can see the map.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/129c7dbe-3515-33ab-3321-27362be1f0c2.png)\n\nIf you edit any YAML file that is included in the preview, you will see the change in the live preview map.\n\n\n**You can do the same thing on your local machine (with windows Powershell, please use curl.exe instead of curl).**","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":50,"to":63}}}}],["4",{"pageContent":"Tips 1: Use WinSCP or other tool if you work on the DEV server.\nEditing text or chaning the folder structure in DEV is difficult. Use WinSCP or other tool for easy editing.\n\nBecause YAML file editing would be easiler in windows, it would be a good idea that you work on your local environment.\n\n### Tips 2: Make use of a good folder structure\nIt would be helpful if you stored eash layer YAML file in respective directory for grouping. (When you move a yaml file for ceratin layer, make sure that you edit the path to that file in style.yml.)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b53a6cda-2e45-3bf4-7b19-f449c87c3d7a.png)\n\n\n### Tips 3: Including the reference to YAML file\nFor a common element that appears many times, we can use \"!!inc/file xxx.yml\".\nThis will help us, in the future, to efficiently manage common elements.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b4609ca8-824b-4e64-f0a0-59d1790e4c3d.png)","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":66,"to":79}}}}],["5",{"pageContent":"Step 4. Export YAML files into JSON.\n\nPlease run \"charites build\" command.","metadata":{"source":"https://qiita.com/T-ubu/items/d701faa749f65e253067","title":"Styling with unvt/nanban - for practice","tags":"unvt-charites","author":"T-ubu","slide":"false","loc":{"lines":{"from":82,"to":84}}}}],["6",{"pageContent":"# Introduction\nThis article is written for my colleague M.L. and G.L.S. This article explains how I made vector tiles from Esri Feature services.\n\nOriginally, this method was developed in December 2022 and that effort was summrized in this article (in Japanese): https://qiita.com/T-ubu/items/17cb65754a54aa5ffb21\n\nIf you have the data in GeoJSON, just use it because it is much easy. This is a work flow for a case that you only have an access to the data as FeatureService.\n\nThis is a part of my work as activities of DWG7 under the UN Open GIS.\n\n\n# Environment\n\nMy working einvironment;\n* nodejs version 18\n* Windows 10\n\nI like working in the linux server, however, for demonstration purpose, I will use docker so that I can show it in the windows PC.\n\n* Docker (unvt/nanban)\n    * nodejs version 18\n    * felt/tippecanoe","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":21}}}}],["7",{"pageContent":"I like working in the linux server, however, for demonstration purpose, I will use docker so that I can show it in the windows PC.\n\n* Docker (unvt/nanban)\n    * nodejs version 18\n    * felt/tippecanoe\n\n\nTargeted Feature service:\n* Overview URL: https://geoportal.un.org/arcgis/home/item.html?id=f9acac44779f400985a7a04f4d0c68ac\n* FeatureServer URL: https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer?f=pjson\n* Targeted layers:\n  * Layer 0: BNDL https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0?f=pjson\n  * Layer 3: BNDA https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/3?f=pjson\n* Features in a layer (example):\n  * BNDL: https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0/1?f=pjson\n  * BNDA: https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/3/1?f=pjson","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":21,"to":36}}}}],["8",{"pageContent":"If you read ArcGIS REST API, we can understand where we can get information of a layer (or a feature in a layer). Unfortunately, it seems that EsriFeature service does not provide all features in a layer as GeoJSON unless a GeoJSON file is provided as an item in that server.\n\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":38,"to":41}}}}],["9",{"pageContent":"Step 1. check the number of features manually\nBecause the server does not provide whole feature of a layer as a single file, we first will check the number of each layer.\n\nFor the layer 0 (BNDL), check the following URL for example.\n* https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0/0?f=pjson\n* https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0/1?f=pjson\n* ...\n* https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0/242?f=pjson\n* https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/0/743?f=pjson","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":42,"to":50}}}}],["10",{"pageContent":"You will find the data exists from 0/1 to 0/742, meaning that there are 742 features in the BNDL layer.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/296171a8-aa4e-6533-8195-27dd02b05b44.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f633ed55-5f5c-0969-77b4-ffcfd6f46992.png)\n\nWith the same manner, we can find that there are 246 features in the BNDA layer. This is important information for the next step.\n\n|layer# | layer name | Number of features |\n|---|---|---|\n|0|BNDL|742|\n|3|BNDA|246|","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":52,"to":61}}}}],["11",{"pageContent":"Step 2: Export GeoJSON sequence from FeatureServer using nodejs script.\nClone the repository (https://github.com/unvt/featureserviceVT) from GitHub. Then, run \"npm install\" to install necessary npm packages.\n\n```\ngit clone https://github.com/unvt/featureserviceVT\ncd featureserviceVT\nnpm install\nnode index.js\n```\nMake sure that you can use nodejs and npm. Please note that \"index.js\" can run even without tippecanoe. So, you may be able to run it on WindowsPowerShell if you installed nodejs (and npm).\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d3a24da3-765c-dc49-ecf6-2ccce9cb549b.png)","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":64,"to":74}}}}],["12",{"pageContent":"Once you run index.js, you will obtain \"temp-json.json\" (or any other name you specified in config/default.hjson) that in cludes all features from all layers listed in the config file. \nSometimes, communication to Esri FeatureServer fails returning an error, so make sure that you do not have any error message (see below as an example of success).\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/28b7ba54-76c9-da49-f224-f1d38be74a4f.png)\n\nExported GeoJSON sequence would be like the below one. In this case, I confrimed that there were 988 features in a file. That is the result of 742 + 246, so both BNDL and BNDA layers were properly exported. \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/df45041b-4c68-3d51-1462-48f83369d1d1.png)","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":77,"to":82}}}}],["13",{"pageContent":"I do not explain about the index.js in detail, but this is the script I made so that we can adjust the JSON structure for the vector tile conversion. Please read my Japanese article using translation APP for detail (see the references for the link).","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":84,"to":84}}}}],["14",{"pageContent":"Step 3: Runnint tippecanoe to convert GeoJSON sequence into vector tile\nThen, we run tippecanoe to create vector tiles from GeoJSON seq. Here, for demonstration purpose, I used Docker (unvt/nanban) because it is really easy to use tippecanoe even in the Windows environment. \n\n```\ndocker run -it --rm -v ${PWD}:/data unvt/nanban\ncd /data\ntippecanoe -o tile.pmtiles --projection=EPSG:3857 --force --no-tile-compression --no-feature-limit --no-tile-size-limit --drop-rate=1 temp-json.json\n```\n\nIf the version of tippecanoe is v2.17 or later, you can export vector tiles in PMTiles format as above. If you use older version, let's just exprort vector tiles as pbf files using the following command.\n\n\n```\ntippecanoe -e tile-zxy --projection=EPSG:3857 --force --no-tile-compression --no-feature-limit\n--no-tile-size-limit --drop-rate=1 temp-json.json","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":86,"to":100}}}}],["15",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d50460f6-a1e9-192e-3acc-66b3add444e7.png)\n\n:::note info\nYou may notice that I did some tricky thing here. The projection of the source is the world Eckert IV, but I specified projection as EPSG:3857 (Web Mercator), because we wanted to keep the original shape from the world Eckert IV projection even if the vector tiles lose their accurate geographic coordination. \nThis kind of arrangement is not so recommended because you cannot overlay any other layers over this base map. \n:::\n\nThus, we successfully obtained the vector tiles from Esri FeatureServices.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/9f19801c-a036-117b-e06c-3e9bbb5ab175.png)\n\n\n# Summary\nI explained how I made vector tile from Esri Feature Service.","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":103,"to":115}}}}],["16",{"pageContent":"# Summary\nI explained how I made vector tile from Esri Feature Service.\n\nThe key is that we compiled the json structure for each feature and compiled them so that we can have the JSON structure that is compatible with the GeoJSON sequence. This is because the vector tile conversion tool tippecanoe uses GeoJSON sequence as its input while Esri Feature Service does not provide feature information as GeoJSON structure.\n\nI hope it helps your work.\n\n# References\n* Our working repository: https://github.com/unvt/featureserviceVT\n* My previous document: https://qiita.com/T-ubu/items/17cb65754a54aa5ffb21\n* ArcGIS REST API -Feature Service: https://developers.arcgis.com/rest/services-reference/enterprise/feature-service.htm\n* UN Open GIS: http://unopengis.org/unopengis/main/main.php","metadata":{"source":"https://qiita.com/T-ubu/items/45f48f1990bcb5b011bf","title":"Creating vector tiles from Esri Feature Service using nodejs and tippecanoe","tags":"vectortile Node.js","author":"T-ubu","slide":"false","loc":{"lines":{"from":115,"to":126}}}}],["17",{"pageContent":"# Introduction\n\nIn this document, I would like to introduce how we can read the geospatial data from PostgreSQL/PostGIS data base and convert it to vector tile format.\n\n**The most part of this work was done as my activities of the DWG 7 working group in the UN Open GIS Initiatve. This text was originally written for my dear colleagues, M.T., O.M.S., and P.F.**\n\n\n# Environment\n* nodejs ver 16 or 18\n* npm\n* felt/tippecanoe or mapbox/tippecanoe \n\nMy working repository for this work is here: https://github.com/unvt/produce-cmv\n\n\n# Basic strategy\nWe often use the approach consisted of three steps. \nThey are 1) reading the data from PostgreSQL/PostGIS to export them as GeoJSON, 2) edit the exported GeoJSON sequence to adjust them for vector tile conversion, and 3) actual vector tile conversion with tippecanoe.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":18}}}}],["18",{"pageContent":"You can skip reading them all, but the followings are our basic strategy for each step:\n* **1) Data reading**: Data reading from PostgreSQL/PostGIS server\n    * we use nodejs, **specifically a npm module named \"pg\"**, to read the data from PostgreSQL/PostGIS server. \n    * We read the PostGIS data view by view (or table by table). \n        * If needed, we may use bounding boxes to control the max size of the output files (in particular, for large global data set, we divide the whole globe into 931 regions). From our experience,  creating \"a few GB * several hundred files\" is faster than \"several hundred GB * single file.\"  \n    * Both propeties and geometory (ST_AsGeoJSON) are just listed as columns in the data from PostGIS. With ST_AsGeoJSON, geometory (geom) is exported in GeoJSON geometry. \n    * To save the processing time, exported sequence will not be save as an intermediate file. They are piped into the next step.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":20,"to":26}}}}],["19",{"pageContent":"* **2) Re-structure**: Data modification with nodejs\n    * As said above, both propeties and geometory (ST_AsGeoJSON) from a view/table are just listed as columns in the data from PostGIS. We will re-strucutred them. \n        * The geometory (ST_asGeoJSON) should be under the geometry object, and other information would be under the properties object. \n        * In addition, we need to add tippecanoe related information such as layer name and max/min zoom. \n        * During this process, we can also flexiliby edit these properties using simple javasciript. For example, even from a single view/table, based on its certain properties, we can classify the records into more than 2 vector tile layers.  \n    * To save the processing time, exported sequence will not be save as an intermediate file. They are piped into the next step.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":28,"to":33}}}}],["20",{"pageContent":"* **3) Conversion**: We will create vector tile using a tool named tippecanoe. \n    * tippecanoe was originally developed by mapbox (mapbox/tippecanoe), but recently it is mainly maintained and updated by felt (felt/tippecanoe)\n    * tippecanoe works on linux environment (and maybe on Mac OS). In order to run tipeecanoe in the Windows environment, we may use Docker or windows subsystem for Linux. You can use it on Raspberry Pi OS if you have it (recommended for a small data).","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":35,"to":37}}}}],["21",{"pageContent":"* **The source data should be in GeoJSON sequence (or GeoJSON) format befor piped into tippecanoe.** In addition, each feature record (given it is \"f\") should have information for tippecanoe such as layer name (f.tippecanoe.layer), max and min zoom (f.tippecanoe.maxzoom, f.tippecanoe.minzoom). We can add those arribution when we run the tippecanoe command, but **we can flexibly design the vector tile structure by modifying GeoJSON sequences before they are forwarded into tippecanoe**. This is why we use nodejs to read the data from PostgreSQL/PostGIS.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":38,"to":38}}}}],["22",{"pageContent":"Note: We may use ST_AsMVT to generate vector tile in MVT (mapbox vector tiles) format. But we want to edit the structure of vector tile. So, we export the data as GeoJSON sequence and edit them.\n\n\n# Practice","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":40,"to":43}}}}],["23",{"pageContent":"Preparation\nIf you run nodejs on WindowsPowershell without the access to the tippecanoe, you can follow until the practice 5.\nIn a case you want to use a Docker in the windows environment to try with tippecanoe, use unvt/nanban package with the following command.\n\n```\ndocker run -it --rm -v ${PWD}:/data unvt/nanban\ncd /data\n```","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":44,"to":51}}}}],["24",{"pageContent":"Practice 1: Reading data from PostgreSQL/PostGIS data using nodejs\n\n```\ngit clone https://github.com/unvt/produce-cmv\ncd produce-cmv\nnpm install\ncp config/default-sample.hjson default.hjson","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":53,"to":59}}}}],["25",{"pageContent":"Then, edit your config/default.hjson. For the first test, we use only \"releations\" and \"connections.\" Please fill them based on your database.\nIn the relations, please list **database::schema::view(table)** that you want to access. If you do not know the schema, it could be \"public.\"\nIn the connection, please make object for each database and describe host, port, dbUser, and dbPassword. \n(Please pay enough attention because you store your password, etc in the hjson file. Please do not upload it in the Internet.)","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":62,"to":65}}}}],["26",{"pageContent":"```hjson:default.hjson(sample)\n{\n    relations: [\n        un_base::vectortile::custom_planet_land_08_a  \n        un_base::vectortile::custom_planet_ocean_08_a\n        un_base::vectortile::un_glc30_global_lc_ss_a\n    ]\n    connection:{\n        un_base:{\n            host: localhost\n            port: 5432\n            dbUser: user\n            dbPassword: password\n        }\n        osm_planet:{\n            host: localhost\n            port: 5432\n            dbUser: user\n            dbPassword: password\n        }        \n    }\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":68,"to":89}}}}],["27",{"pageContent":"Then, run the test001.js.\n\n```\nnode test001.js\n```\nYou will see the name of data source and the number of records acuired by sql in test001.js.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/eed5a2ca-e8de-e6ba-25cd-8bd9e82adaeb.png)\n\n\n**Explanation of test001.js:**\nThis is a simple code to test the access to the data base. We use sql query to ask the number of record in each view.\n* Constants are from config/default.hjson using a npm module named \"config.\" \n* It also uses pg module to access PostgreSQL/PostGIS database.\n  * For each database, there is pool[database] to store the necessary information for accessing database.\n  * pool[database].connect is a function to connect PostgreSQL/PostGIS database. Within it, we use client.query to received a result of a query.\n\nTry changing the sql and check the result. And also try to see \"res\" instead of res.rows so that you can understand the structure of res (result from clinent.query()).","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":93,"to":109}}}}],["28",{"pageContent":"Try changing the sql and check the result. And also try to see \"res\" instead of res.rows so that you can understand the structure of res (result from clinent.query()).  \n\n```js:test001.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\n\n// config constants\nconst relations = config.get('relations')\n\nlet pools = {}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":109,"to":118}}}}],["29",{"pageContent":"// config constants\nconst relations = config.get('relations')\n\nlet pools = {}\n\nfor (relation of relations){\n    const [database, schema, view] = relation.split('::')\n    if(!pools[database]){\n        pools[database] = new Pool({\n            host: config.get(`connection.${database}.host`),\n            user: config.get(`connection.${database}.dbUser`),\n            port: config.get(`connection.${database}.port`),\n            password: config.get(`connection.${database}.dbPassword`),\n            database: database\n        })\n    }\n    pools[database].connect(async (err, client, release) => {\n        if (err) throw err\n        let sql = `SELECT count(*) FROM ${schema}.${view} `\n        //let sql = `SELECT * FROM ${schema}.${view} limit 1`\n        let res = await client.query(sql)\n        console.log(`${database}-${schema}-${view}`)\n        console.log(res.rows) //rows contains sql response\n        await client.end()\n        release()\n    })    \n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":118,"to":144}}}}],["30",{"pageContent":"Practice 2: Reading data from PostgreSQL/PostGIS data using nodejs, using sql twice\nNext, let's run the another script.\n\n```bash\nnode test002.js\n```\nYou will see one record with its columns from each view you specified.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/533cc43f-dfc7-b423-4b36-1c1a71aadf4d.png)\n\n\n**Explanation of test002.js:**\nThis is a simple code to ask a list of columns, and SELECT them. To ease the test, the SELECT sql uses \"LIMIT 1\".\n* After connecting to the database, we first send a query to get the list of cloumn name, that is \"SELECT column_name FROM information_schema.columns WHERE ... \". Then, obtained columns are mapped as a list, while geom is replaced with ST_AsGeoJSON.\n* Then, with the obtained list, the second sql is prepared to select the columns from the records.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":148,"to":161}}}}],["31",{"pageContent":"Try chaning sql, deleting \"LIMIT 1\" in the line 31 for exmaple, to see the result. You will find that you have to wait for a while if you have a lot of record in a view.\n\n```js:test002.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\n\n// config constants\nconst relations = config.get('relations')\n\nlet pools = {}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":163,"to":172}}}}],["32",{"pageContent":"for (relation of relations){\n    const [database, schema, view] = relation.split('::')\n    if(!pools[database]){\n        pools[database] = new Pool({\n            host: config.get(`connection.${database}.host`),\n            user: config.get(`connection.${database}.dbUser`),\n            port: config.get(`connection.${database}.port`),\n            password: config.get(`connection.${database}.dbPassword`),\n            database: database\n        })\n    }\n    pools[database].connect(async (err, client) => {\n        if (err) throw err\n        //Getting the list of columns, then adjust it\n        let sql = `SELECT column_name FROM information_schema.columns WHERE table_schema = '${schema}' AND table_name = '${view}' ORDER BY ordinal_position`\n        let cols = await client.query(sql)\n        cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":174,"to":191}}}}],["33",{"pageContent":"cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed\n        cols.push(`ST_AsGeoJSON(${schema}.${view}.geom)`)\n        //console.log(`columns used: ${cols}`)\n        // Then, we will get feature record.\n        await client.query('BEGIN')\n        sql = `SELECT ${cols.toString()} FROM ${schema}.${view} LIMIT 1`\n        cols = await client.query(sql)\n        console.log(`${database}-${schema}-${view}`)\n        console.log(cols.rows)\n        await client.query('COMMIT')\n        await client.end()\n    })    \n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":191,"to":204}}}}],["34",{"pageContent":"```","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":204,"to":204}}}}],["35",{"pageContent":"Practice 3: Reading data from PostgreSQL/PostGIS data using nodejs, using cursor\nIn the previous practice, you noticed that you have to wait for a while. So, it is important to use cursor when we ask a query for large view/table.\n\nPlease add \"fetchSize: 30000\" in config/default.hjson, and run the following command.\n\n```bash\nnode test003.js","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":360,"to":366}}}}],["36",{"pageContent":"Then, you see countinuous output running in the terminal.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0ee1baa3-cb16-7539-64cb-1491990a9013.png)\n\n**Explanation of test003.js:**\n* With this scirpt, we added a cursor (cur) for sql query and read the data using cursor.\n* Thre is a \"fetch\" function that is for reading certain amount of data from the cursor using \"FETCH ${fetchSize} FROM cur\".\n    * There is a countor in fetch function. When it gets empty, the fetch counter stays 0 and fetch ends.\n    * And for the obtained row, we make f, with necessary information (f.type, f.properties, f.geometry)\n    * At the end of each fetch, we just export record or \"f\" to the display using console.log(f), but you may also add a stream to write them to the file or pipe to other function.\n    * If we careate modify.js module and add a line \"f = modify(f)\", we can further edit the exported record. Thus, we can add necessary information for tippecanoe conversion.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":369,"to":378}}}}],["37",{"pageContent":"```js:test003.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\n\n// config constants\nconst relations = config.get('relations')\nconst fetchSize = config.get('fetchSize')\n\nlet pools = {}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":382,"to":390}}}}],["38",{"pageContent":"let pools = {}\n\nconst fetch = (client, database, view) =>{\n    return new Promise((resolve, reject) => {\n        let count = 0\n        let features = []\n        client.query(new Query(`FETCH ${fetchSize} FROM cur`))\n        .on('row', row => {\n            let f = {\n                type: 'Feature',\n                properties: row,\n                geometry: JSON.parse(row.st_asgeojson)\n            }\n            delete f.properties.st_asgeojson\n            f.properties._database = database\n            f.properties._view = view\n            count++\n            //f = modify(f)\n            if (f) features.push(f)\n        })\n        .on('error', err => {\n            console.error(err.stack)\n            reject()\n        })\n        .on('end', async () => {\n            for (f of features) {\n                try {\n                    console.log(f)\n                } catch (e) {\n                    throw e\n                }                \n            } \n            resolve(count)\n        })\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":390,"to":425}}}}],["39",{"pageContent":"for (relation of relations){\n    var startTime = new Date()\n    const [database, schema, view] = relation.split('::')\n    if(!pools[database]){\n        pools[database] = new Pool({\n            host: config.get(`connection.${database}.host`),\n            user: config.get(`connection.${database}.dbUser`),\n            port: config.get(`connection.${database}.port`),\n            password: config.get(`connection.${database}.dbPassword`),\n            database: database\n        })\n    }\n    pools[database].connect(async (err, client,release) => {\n        if (err) throw err\n        //Getting the list of columns, then adjust it\n        let sql = `SELECT column_name FROM information_schema.columns WHERE table_schema = '${schema}' AND table_name = '${view}' ORDER BY ordinal_position`\n        let cols = await client.query(sql)\n        cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":427,"to":445}}}}],["40",{"pageContent":"cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed\n        cols.push(`ST_AsGeoJSON(${schema}.${view}.geom)`)\n        //console.log(`columns used: ${cols}`)\n        // Then, we will get feature record.\n        await client.query('BEGIN')\n        sql = `\n        DECLARE cur CURSOR FOR \n        SELECT ${cols.toString()} FROM ${schema}.${view}`\n        cols = await client.query(sql)\n        //console.log(cols.rows)\n        try {\n            while (await fetch(client, database, view) !== 0) {}\n        } catch (e) { throw e }\n        await client.query(`COMMIT`)\n        //await client.end()  \n        const endTime = new Date()\n        var diff = endTime.getTime() - startTime.getTime();\n        var workTime = diff / 1000\n        console.log(`workingTime for ${schema}.${view} in ${database} is ${workTime} (sec). End`)\n        release()\n    })    \n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":445,"to":467}}}}],["41",{"pageContent":"Practice 4: Reading data from PostgreSQL/PostGIS data using nodejs, using cursor, modify the result\nAfter editing modify.js, try running test004.js. It is almost same with the test003.js, but the module modify.js is added.\n\nmodify.js might be the following. Edit it based on your inputs and your desired vector tile structure.\n\n```javascript:modify.js(sample)\nconst preProcess = (f) => {\n  f.tippecanoe = {\n    layer: 'other',\n    minzoom: 5,\n    maxzoom: 5\n  }\n\nconst postProcess = (f) => {\nif(f!==null){\n  delete f.properties['_database']\n  delete f.properties['_table']\n}\n  return f\n}\n\nconst lut = {\n  view_name: f => {\n    f.tippecanoe = {\n      layer: 'layer1',\n      minzoom: 0,\n      maxzoom: 5\n    }\n    delete f.properties['objectid']\n    delete f.properties['fid_1']\n    //or any edit you like\n    return f\n  }\n//add filter for every layer\n}\nmodule.exports = (f) => {\n  return postProcess(lut[f.properties._table](preProcess(f)))\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":472,"to":509}}}}],["42",{"pageContent":"Output sequence may have a good structure for vector tile creation.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f760d9ce-fd25-4cd8-64b6-829da9add130.png)","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":512,"to":513}}}}],["43",{"pageContent":"Practice 5: Reading data from PostgreSQL/PostGIS data using nodejs, using cursor, modify the result, and export as text file\n\nAfter adding a line \"outputDir: outputDir\" in config/default.hjson, make \"ouputDir\", and run test005.js. You will get GeoJSON sequence in separate text files.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b8fe1e36-c56f-1431-66f1-b2ed4cf16b91.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/68e2f9fa-8c34-92d7-6c49-c0ecdb3d5dcb.png)\n\nIn test005.js, I used the \"fs\" modules to make a stream.write to a text file. A stream is created by the fs.createWriteStream function for each view. \"noPressureWrite\" is a function to write stream.\n\n\n```javascript:test005.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\nconst modify = require('./modify.js')\nconst fs = require('fs')","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":515,"to":529}}}}],["44",{"pageContent":"```javascript:test005.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\nconst modify = require('./modify.js')\nconst fs = require('fs')\n\n// config constants\nconst relations = config.get('relations')\nconst fetchSize = config.get('fetchSize')\nconst outTextDir = config.get('outputDir')\n\nlet pools = {}\n\nconst noPressureWrite = (stream, f) => {\n    return new Promise((res) => {\n        if (stream.write(`\\x1e${JSON.stringify(f)}\\n`)){\n            res()\n        } else {\n            stream.once('drain', () => {\n                res()\n            })\n        }\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":529,"to":552}}}}],["45",{"pageContent":"const fetch = (client, database, view, stream) =>{\n    return new Promise((resolve, reject) => {\n        let count = 0\n        let features = []\n        client.query(new Query(`FETCH ${fetchSize} FROM cur`))\n        .on('row', row => {\n            let f = {\n                type: 'Feature',\n                properties: row,\n                geometry: JSON.parse(row.st_asgeojson)\n            }\n            delete f.properties.st_asgeojson\n            f.properties._database = database\n            f.properties._view = view\n            f.properties._table = view\n            count++\n            f = modify(f)\n            if (f) features.push(f)\n        })\n        .on('error', err => {\n            console.error(err.stack)\n            reject()\n        })\n        .on('end', async () => {\n            for (f of features) {\n                try {\n                    //console.log(f)\n                    await noPressureWrite(stream, f)\n                } catch (e) {\n                    throw e\n                }","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":554,"to":584}}}}],["46",{"pageContent":"try {\n                    //console.log(f)\n                    await noPressureWrite(stream, f)\n                } catch (e) {\n                    throw e\n                }                \n            } \n            resolve(count)\n        })\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":584,"to":594}}}}],["47",{"pageContent":"for (relation of relations){\n    var startTime = new Date()\n    const [database, schema, view] = relation.split('::')\n    const stream = fs.createWriteStream(`${outTextDir}/${database}-${schema}-${view}.txt`)\n    if(!pools[database]){\n        pools[database] = new Pool({\n            host: config.get(`connection.${database}.host`),\n            user: config.get(`connection.${database}.dbUser`),\n            port: config.get(`connection.${database}.port`),\n            password: config.get(`connection.${database}.dbPassword`),\n            database: database\n        })\n    }\n    pools[database].connect(async (err, client,release) => {\n        if (err) throw err\n        //Getting the list of columns, then adjust it\n        let sql = `SELECT column_name FROM information_schema.columns WHERE table_schema = '${schema}' AND table_name = '${view}' ORDER BY ordinal_position`\n        let cols = await client.query(sql)","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":598,"to":615}}}}],["48",{"pageContent":"let sql = `SELECT column_name FROM information_schema.columns WHERE table_schema = '${schema}' AND table_name = '${view}' ORDER BY ordinal_position`\n        let cols = await client.query(sql)\n        cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed\n        cols.push(`ST_AsGeoJSON(${schema}.${view}.geom)`)\n        //console.log(`columns used: ${cols}`)\n        // Then, we will get feature record.\n        await client.query('BEGIN')\n        sql = `\n        DECLARE cur CURSOR FOR \n        SELECT ${cols.toString()} FROM ${schema}.${view}`\n        cols = await client.query(sql)\n        //console.log(cols.rows)\n        try {\n            while (await fetch(client, database, view, stream) !== 0) {}\n        } catch (e) { throw e }\n        await client.query(`COMMIT`)\n        //await client.end()  \n        stream.end()\n        const endTime = new Date()","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":615,"to":634}}}}],["49",{"pageContent":"} catch (e) { throw e }\n        await client.query(`COMMIT`)\n        //await client.end()  \n        stream.end()\n        const endTime = new Date()\n        var diff = endTime.getTime() - startTime.getTime();\n        var workTime = diff / 1000\n        console.log(`workingTime for ${schema}.${view} in ${database} is ${workTime} (sec). End`)\n        release()\n    })    \n}\n```","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":634,"to":645}}}}],["50",{"pageContent":"Practice 6: Reading data from PostgreSQL/PostGIS data using nodejs, using cursor, modify the result, and export as vector tile (PMTiles)\n\nFrom test006.js, we replace stream from text output (fs.createWriteStream) to a standard output piped into tippecanoe input (tippecanoe.stdin). It is just a simple replacement, so we will have vector tile for each view as we did with textout put in the previous practice.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/45ff3762-965f-da09-a71f-e83bfd2bd7e0.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0e722c4a-2a47-087a-c7b7-a11eaad75ee0.png)\n\nThe actual code is as below. If your tippiecanoe version is older than 2.17, change \".pmtiles\" to \".mbtiles\" as the former version does not support PMTiles. \n\n```js:test006.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\nconst modify = require('./modify.js')\nconst { spawn } = require('child_process')","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":647,"to":660}}}}],["51",{"pageContent":"```js:test006.js\nconst config = require('config')\nconst { Pool, Query } = require('pg')\nconst modify = require('./modify.js')\nconst { spawn } = require('child_process')\n\n// config constants\nconst relations = config.get('relations')\nconst fetchSize = config.get('fetchSize')\nconst outTextDir = config.get('outputDir')\nconst tippecanoePath = config.get('tippecanoePath')\n\nlet pools = {}\n\nconst noPressureWrite = (stream, f) => {\n    return new Promise((res) => {\n        if (stream.write(`\\x1e${JSON.stringify(f)}\\n`)){\n            res()\n        } else {\n            stream.once('drain', () => {\n                res()\n            })\n        }\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":660,"to":684}}}}],["52",{"pageContent":"const fetch = (client, database, view, stream) =>{\n    return new Promise((resolve, reject) => {\n        let count = 0\n        let features = []\n        client.query(new Query(`FETCH ${fetchSize} FROM cur`))\n        .on('row', row => {\n            let f = {\n                type: 'Feature',\n                properties: row,\n                geometry: JSON.parse(row.st_asgeojson)\n            }\n            delete f.properties.st_asgeojson\n            f.properties._database = database\n            f.properties._view = view\n            f.properties._table = view\n            count++\n            f = modify(f)\n            if (f) features.push(f)\n        })\n        .on('error', err => {\n            console.error(err.stack)\n            reject()\n        })\n        .on('end', async () => {\n            for (f of features) {\n                try {\n                    //console.log(f)\n                    await noPressureWrite(stream, f)\n                } catch (e) {\n                    throw e\n                }","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":684,"to":714}}}}],["53",{"pageContent":"try {\n                    //console.log(f)\n                    await noPressureWrite(stream, f)\n                } catch (e) {\n                    throw e\n                }                \n            } \n            resolve(count)\n        })\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":714,"to":724}}}}],["54",{"pageContent":"for (relation of relations){\n    var startTime = new Date()\n    const [database, schema, view] = relation.split('::')\n    const tippecanoe = spawn(tippecanoePath, [\n        `--output=${outTextDir}/${database}-${schema}-${view}.pmtiles`,\n        `--no-tile-compression`,\n        `--minimum-zoom=0`,\n        `--maximum-zoom=5`\n      ], { stdio: ['pipe', 'inherit', 'inherit'] })\n    const stream = tippecanoe.stdin\n    //const stream = fs.createWriteStream(`${outTextDir}/${database}-${schema}-${view}.txt`)\n    if(!pools[database]){\n        pools[database] = new Pool({\n            host: config.get(`connection.${database}.host`),\n            user: config.get(`connection.${database}.dbUser`),\n            port: config.get(`connection.${database}.port`),\n            password: config.get(`connection.${database}.dbPassword`),\n            database: database\n        })\n    }\n    pools[database].connect(async (err, client,release) => {\n        if (err) throw err\n        //Getting the list of columns, then adjust it","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":845,"to":867}}}}],["55",{"pageContent":"database: database\n        })\n    }\n    pools[database].connect(async (err, client,release) => {\n        if (err) throw err\n        //Getting the list of columns, then adjust it\n        let sql = `SELECT column_name FROM information_schema.columns WHERE table_schema = '${schema}' AND table_name = '${view}' ORDER BY ordinal_position`\n        let cols = await client.query(sql)\n        cols = cols.rows.map(r => r.column_name).filter(r => r !== 'geom') //choose \"rows\", then its colum_names are listed, and geom is removed.\n        //we will add filter if needed\n        cols.push(`ST_AsGeoJSON(${schema}.${view}.geom)`)\n        //console.log(`columns used: ${cols}`)\n        // Then, we will get feature record.\n        await client.query('BEGIN')\n        sql = `\n        DECLARE cur CURSOR FOR \n        SELECT ${cols.toString()} FROM ${schema}.${view}`\n        cols = await client.query(sql)\n        //console.log(cols.rows)\n        try {","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":867,"to":886}}}}],["56",{"pageContent":"sql = `\n        DECLARE cur CURSOR FOR \n        SELECT ${cols.toString()} FROM ${schema}.${view}`\n        cols = await client.query(sql)\n        //console.log(cols.rows)\n        try {\n            while (await fetch(client, database, view, stream) !== 0) {}\n        } catch (e) { throw e }\n        await client.query(`COMMIT`)\n        //await client.end()  \n        stream.end()\n        const endTime = new Date()\n        var diff = endTime.getTime() - startTime.getTime();\n        var workTime = diff / 1000\n        console.log(`workingTime for ${schema}.${view} in ${database} is ${workTime} (sec). End`)\n        release()\n    })    \n}","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":1043,"to":1060}}}}],["57",{"pageContent":"Final practice\nI have already prepare an \"index.js\" in this repository. Run it to obtain the vector tile for ClearMap Vector.\n\nhttps://github.com/unvt/produce-cmv/blob/main/index.js\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/01b42d07-de05-6085-3f6b-4cc29e0ea4a3.png)\n(note: Because I listed only two views for testing purpose, it has less layers in the final product.)\n\n\n# Summary\nThus, I explained how we can create vector tile from PostgreSQL/PostGIS using nodejs and tippecanoe.","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":1188,"to":1198}}}}],["58",{"pageContent":"# Summary\nThus, I explained how we can create vector tile from PostgreSQL/PostGIS using nodejs and tippecanoe.\n\nHowever, this practice is only for a single bounding box range. In order to deal with the global data up to larger zoom level, we may need to wisely use bounding box to limit the maximum size of vector tiles. In such a case, we can use mapbox/bbbox module or ST_TileEnvelope in PostGIS to create bbox. In addition, a npm module \"better-queue\" may help us to control the concurrent processing for each bounding boxes. I do not explain it here, but you can explore https://github.com/unvt/produce-gsc-6/blob/main/produce-gsc-osm/index_everyday.js for example.\n\nI hope this helps.\n\n# Acknowledgement\nThis work is based on the development by @hfu. I thank for his efforts.\n\n# References\nhttps://github.com/unvt/produce-cmv\n\nhttps://qiita.com/T-ubu/items/146a86558281abac8b2e\n\nhttps://github.com/hfu/autonomy\n\nhttps://qiita.com/Kanahiro/items/ceeb20c158b4c70b62b6\n\nhttps://postgis.net/docs/ST_AsMVT.html","metadata":{"source":"https://qiita.com/T-ubu/items/3855054e394e3e7518fe","title":"Creation of vector tile from PostgreSQL/PostGIS database using nodejs and tippecanoe","tags":"vectortile unvt tippecanoe PostGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":1198,"to":1217}}}}],["59",{"pageContent":"# Introduction\nPMtiles is a single-file archive format for tile data. I think it would be also useful for vector tiles. Therefore, with this articule, I will introduce my test of the data conversion from existing pbf vector tiles in the Internet to PMtiles.\n\n> PMTiles is a single-file archive format for tiled data. A PMTiles archive can be hosted on a commodity storage platform such as S3, and enables low-cost, zero-maintenance map applications that are \"serverless\" - free of a custom tile backend or third party provider. (from [protomaps/pmtiles](https://github.com/protomaps/PMTiles))\n\n(I am working with the vector tile over 150GM in total, and I am not yet sure if PMtiles is good to deal with these large data base. I am currently deal with such vector tiles by separating them into several hundred mbtiles files and host it by using mabox/mbtiles module and nodejs/express server routing. )","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":6}}}}],["60",{"pageContent":"# My environment\nIn order to use tippecanoe, we use a linux server. However, with this open demonstration, I used docker container so that I can show it easily.\n\n* Windows 10\n* Docker: unvt/nanban (pulled in January 2023)\n  * Ubuntu based container \n  * felt/tippecanoe version 2.17.0\n\n# Procedure\nI tried to access the vector tile from my colleagues' Esri server. This time, my wokring repository is here: https://github.com/ubukawa/109\n\nIf you would like to follow the process, make sure that you confirm your vector tile URL. **If you already have your pbf tiles, you can just start from the step 2.**\n\nIn the windows Powershell, I started a Docker container unvt/nanban.\n\n```\ndocker run -it --rm -v ${PWD}:/data unvt/nanban\ncd /data","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":9,"to":26}}}}],["61",{"pageContent":"Step 1: Downloading vector tiles (pbf tiles)\n\n### 1-1. Making directory for pbf tiles\nUnder the 0_dl folder, I have created directories for pbf tiles. My target was from zoom level 0 to 6 with global coverage, so I used the following command. Then, there is a folder structure for pbf tiles.\n\n```bash:mkdir.sh\nrm -rf 0_dl; mkdir 0_dl;for z in {0..6}; do mkdir 0_dl/${z};for x in `seq $((2 ** z))`; do mkdir 0_dl/${z}/$((x-1));done;done\n```","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":30,"to":37}}}}],["62",{"pageContent":"1-2. Downloading tiles\nThen, using curl, I have downloaded the files. It took for a while. In my environment, it tool about one hour.\n\n```bash:download.sh\nfor z in {0..6}; do echo $z;for x in `seq $((2 ** z))`; do echo $z/$((x-1));for y in `seq $((2 ** z))`; do echo $z/$((x-1))/$((y-1)).pbf; curl https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/Clearmap_Webplain/VectorTileServer/tile/$z/$((y-1))/$((x-1)).pbf --output 0_dl/$z/$((x-1))/$((y-1)).pbf;done;done;done\n```\n**Please pay enough attention that the order of tile URL for ArcGIS REST API is z/y/x while other tile schema often uses z/x/y order.** (I forgot about it and did the process again.)\nIf you would like to download pbf tiles from non-Esri vector tile server, you may need to change z/y/x order to z/x/y order. Sh script would be as follows.","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":39,"to":46}}}}],["63",{"pageContent":"```bash:download-nonEsri.sh\nfor z in {0..6}; do echo $z;for x in `seq $((2 ** z))`; do echo $z/$((x-1));for y in `seq $((2 ** z))`; do echo $z/$((x-1))/$((y-1)).pbf; curl https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/Clearmap_Webplain/VectorTileServer/tile/$z/$((x-1))/$((y-1)).pbf --output 0_dl/$z/$((x-1))/$((y-1)).pbf;done;done;done\n```\n \n\nIf you are good at bash, the above two sh scripts can be merged, and you can do it with one script.","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":48,"to":53}}}}],["64",{"pageContent":"1-3. Deleting empty tile\nIf there is no tile, it seems that Esri server returns the following response. I confirned that its size is 590 byte.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f17e8145-e253-7935-3a2b-d8279224d340.png)\n\nLet's check the files in the directory.\n\n```bash\nfind ./0_dl -type f -size 590c | xargs ls -al\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/539e4c09-e44f-8f16-8095-d200634db788.png)\n\n\nThen, I confirmed that the data size of all the found files was 590 byte. I thought all are the same file, and deleted them all. And, let's also delete empty direcroty as they will disturb the next process.\nI realized that there is no tile in zoom level 6, so I did not need to download these 4,096 (64 * 64) files at all!!\n\n```bash:delete-null.sh\nfind ./0_dl -type f -size 590c | xargs rm\nfind 0_dl -type d -empty -delete\n```","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":56,"to":74}}}}],["65",{"pageContent":"Step 2: Making PM tiles from the downloaded pbf tiles\n\nThe vector tile conversion tool, felt/tippecanoe, now supprts the PMtiles format since its vversion 2.17.\n\nI have confired the version of my tippecanoe and run **tile-join**, a tool included in tippecanoe, to obtain PMtiles fild from a series of pbf tiles in the **0_dl** directory.\n\n```bash\ntippecanoe --version\ntile-join -pk -o test123.pmtiles 0_dl\n```\nAt first, I did not add \"-pk (--no-tile-size-limit)\" option and lost some tiles. So, it would be good to add -pk option.\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/1e3a12b5-d9f7-0655-4bb1-9811e859d22b.png)\n\n\nIf you have empty directory, you will fail data  conversion as below.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/cbc4aad2-1c65-27c2-4396-70e64483fddc.png)\n\n\nIf you would like to convert pmtiles from mbtiles, the following command would work.","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":77,"to":97}}}}],["66",{"pageContent":"If you would like to convert pmtiles from mbtiles, the following command would work.\n\n```\ntile-join -o output.pmtiles input.mbtiles\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/7fcb53ad-7264-0a6d-af0e-5c9af6487f89.png)","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":97,"to":102}}}}],["67",{"pageContent":"Step 3: Review of PMtiles\nI heard that we can easily review PMtiles with online PMTiles Viewer at https://protomaps.github.io/PMTiles/\n\nI draged and dropped a file and saw the following. It looked okay.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d1048246-bd94-07cc-994f-de57a8e88149.png)\n\n\n\n\n# Conclusion\nExisitng pbf tiles can be easily downloaded into PMtiles with felt/tippecanoe. However, if we have a lot of pbf tiles, we may need some time to download them. I agree that PMtiles would help vector tile hosing, in particular for middle sized data set. I meant that I am not sure about the tiles over several hundred GB at this moment. I would like to keep watching the development of PMtiles.\n\n\n# Acknowledgement\n I respect the great work by colleagues. I also respect my colleagues who developed data.\n\n\n\n\n\n \n\n\n\n\n# References\nhttps://github.com/protomaps/PMTiles\n\nhttps://github.com/felt/tippecanoe\n\nhttps://geoservices.un.org/Html5Viewer/index.html?viewer=clearmap","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":107,"to":138}}}}],["68",{"pageContent":"# References\nhttps://github.com/protomaps/PMTiles\n\nhttps://github.com/felt/tippecanoe\n\nhttps://geoservices.un.org/Html5Viewer/index.html?viewer=clearmap\n\nhttps://developers.arcgis.com/rest/services-reference/enterprise/vector-tile-service.htm","metadata":{"source":"https://qiita.com/T-ubu/items/f1a1e2846dfba659805a","title":"Converting PMtiles from pbf tiles using felt/tippecanoe (tile-join)","tags":"vectortile unvt PMtiles","author":"T-ubu","slide":"false","loc":{"lines":{"from":138,"to":145}}}}],["69",{"pageContent":"# Introduction\nunvt/charites is an easy, intuitive, and efficient command-line tool for writing vector map styles compatible with the [Mapbox](https://docs.mapbox.com/mapbox-gl-js/style-spec/) and [MapLibre](https://maplibre.org/maplibre-gl-js-docs/style-spec/) Style Specification in YAML.\nYAML files are easy to read, and charites' live preview will help our style editing.\n\nWith this article, I will introduce how to install charites in windows PC and how to use it. There are some practice/exercise so that you have better understanding of unvt/charites. Some of them would be easy, but please follow them if you are interested in using unvt/charites for your styling work!\n\n**The most part of this work was done as my activities of the DWG 7 working group in the UN Open GIS Initiatve.** \n**This text was originally written for my dear colleagues, M.T., O.M.S., and P.F.**\n\n\n# My testing Environment\n\n- Windows 10\n- git\n- nodejs version 18.12.1\n- npm version 8.19.2\n- Windows PowerShell","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":17}}}}],["70",{"pageContent":"# My testing Environment\n\n- Windows 10\n- git\n- nodejs version 18.12.1\n- npm version 8.19.2\n- Windows PowerShell\n\n\n# Exercise 1. Installing unvt/charites","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":17,"to":26}}}}],["71",{"pageContent":"1-1. confirm versions of nodejs and npm\nCheck if nodejs is installed in you PC. If not, visit [nodejs ](https://nodejs.org/en/) to install them. Version 14 or later version is recommended. Installation will fail with the older version of nodejs than 12.20.0.\n\nOpen Windows PowerShell and check their version.\n\n```powershell\nnode --version\nnpm --version\n```","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":28,"to":36}}}}],["72",{"pageContent":"1-2. Installation of npm package\nThen, run the following command to install unvt/charites as npm package. If you successfully install it, you will see the version of charites with the following command.\n\n```powershell\nnpm install -g @unvt/charites\ncharites --version\ncharites --help\n```\n![windows-guide-01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/a88b49ad-9644-3936-dd5b-7449df44f08d.png)\nThen, you are ready to use unvt/charites. **Congratulations!!**\n\n:::note info\nIf you see some error that says \"charites.ps1 cannot be loaded because running scripts is disabled on this system,\" try using charites with Command Prompt.\nIf the execution policy of your PowerShell is \"Restricted\", the charites' scripts will not run on the PowerShell. They will run with \"RemoteSigned\" policy, etc.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/c0514857-bf95-015f-edda-43a10843f8c1.png)\n:::\n\n\n# Exercise 2. Style editing","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":37,"to":55}}}}],["73",{"pageContent":"2-1. Initiating a new style\nIf you have a style json, it is easy for you to import that json into yaml files. However, if you start from scratch, you can use my template to initialize a style. I will show how you can do that. First, please copy the template from my repository with the following command.\n\n```\ngit clone https://github.com/ubukawa/charites-init\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/39955cb6-7f2e-40cd-b909-fb2d2c5add05.png)\n\nThen, you will get style.yml under the \"charites-init\" directory.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8a3862c5-9189-7e4a-012e-3ebf4d105cb2.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":56,"to":65}}}}],["74",{"pageContent":"2-2. Editing style.yml to define sources, sprites, and glyphs\nAt first, the style.yml is as follows. We will edit it from now on.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8d43b187-0514-0ed7-17e8-92ae7c7444d9.png)\n\nLet's open style.yml with notepad or any text editor. MicroSoft Visual Studio Code is also a good editor because it helps us writing codes. Remove the comment tag (#), and add the value as follow:","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":67,"to":71}}}}],["75",{"pageContent":"* sprite\n  * sprite is a image file with a json file that provide map symbols or fill pattern, etc.\n  * for this exercise, we will use \"https://ubukawa.github.io/clearmap-style2/sprite_un/sprite_S\"\n* glyphs\n  * glyphs is a location of text-font. Text fonts are provided in pbf format. \n  * for this exercise, we will use \"https://ubukawa.github.io/clearmap-style2/font/{fontstack}/{range}.pbf\"\n* sources\n  * we can add sources here. This time, I will add three vector tile sources here. Please check them in the following yml.\n \n```YAML:style.yml\nversion: 8\nsprite: https://ubukawa.github.io/clearmap-style2/sprite_un/sprite_S\nglyphs: https://ubukawa.github.io/clearmap-style2/font/{fontstack}/{range}.pbf\nsources:\n  ne: #change the name if needed\n    type: vector\n    attribution: NaturalEarth   #add if needed\n    minzoom: 0 #add if needed\n    maxzoom: 5 #add if needed\n    tiles:\n    - https://ubukawa.github.io/graticules-vt/zxy/{z}/{x}/{y}.pbf\n  carto: #change the name if needed\n    type: vector","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":73,"to":95}}}}],["76",{"pageContent":"minzoom: 0 #add if needed\n    maxzoom: 5 #add if needed\n    tiles:\n    - https://ubukawa.github.io/graticules-vt/zxy/{z}/{x}/{y}.pbf\n  carto: #change the name if needed\n    type: vector\n    attribution: Cartotile - Test data   #add if needed\n    minzoom: 0 #add if needed\n    maxzoom: 2 #add if needed\n    tiles:\n    - https://ubukawa.github.io/cartotile/tile/{z}/{x}/{y}.pbf\n  cme: #change the name if needed\n    type: vector\n    attribution: UN_CLEARMAP_VT(powered by esri)\n    minzoom: 0 #add if needed\n    maxzoom: 5 #add if needed\n    tiles:\n    - https://pro-ags2.dfs.un.org/arcgis/rest/services/Hosted/Clearmap_Webplain/VectorTileServer/tile/{z}/{y}/{x}.pbf\nlayers:\n   - !!inc/file layers/background.yml\n   # add any layer if needed\n```","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":95,"to":116}}}}],["77",{"pageContent":"2-3. Start charites live preview\nIf you have done the preparation so far, we can start chartes' live preview in the local host. Please note that you have not defined any layer other than background. The background is included in the initial package.\n\n```powershell\ncd charites-init\ncharites serve style.yml  #(Ctrl + c to stop)\n```\nYou will see the live preview at http://localhost:8080 . \n ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/7f65f60d-799e-d4a6-2a3f-c761a1990e65.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":118,"to":126}}}}],["78",{"pageContent":"2-4. Change the background color (you will be familiar with the color expression)\n**Try to edit layers/background.yml and change backgound-color with notepad or any other text editor**. You can specify the color with index color (e.g. '#D6EBF5'), rgb color (e.g. rgb(0,0,100)), rgba color (e.g. rgba(10,0,100,0.7)), etc. You can also use color expression like \"red\", \"green\", \"blue\". (see https://maplibre.org/maplibre-gl-js-docs/style-spec/types/#color ). Please also be noted that QGIS plugin or Esrc's ArcGIS API for Javascript may have some preference of color expression.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/70bf5bdd-0102-5bf8-9bb7-089f5ea59d51.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":128,"to":131}}}}],["79",{"pageContent":"2-5. Add a layer: Grid line\nPlease keep charites live preview running.  \nFirst, let's add a line layer, 30 degree grid line from NaturalEarth (\"ne\" source). I stored sample yml files in charites-init/layers/layer_samples for general purpose. **Copy \"ls-line-sample.yml\" as \"ls-grid30.yml\" and edit it**. Because you keep charites live preview running, you may need to open another PowerShell window (terminal in MS Visual Studio Code).\n\n```powershell\ncd charites-init/layers\ncp layer_samples/ls-line-sample.yml ls-grid30.yml\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/deb6bcd8-505b-f66a-6cc9-23a347e6007f.png)\n\nThen, edit \"ls-grid30.yml\" as below.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8ef0efdd-998c-2cda-23de-656ad0932a27.png)\nThere are some comment tag for the template, but it is simple as below.","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":133,"to":145}}}}],["80",{"pageContent":"```yaml:ls-grid30.yml\nid: ls-grid30\nminzoom: 0\nmaxzoom: 5\npaint:\n  line-color: '#999999'\n  line-width: 0.7\nsource: ne\nsource-layer: grid30 \ntype: line","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":147,"to":156}}}}],["81",{"pageContent":"**However, you will not see any change in the live-preview. We need to add a layer in \"style.yml.\"** Please add one line in the list of layers in the style.yml as below. It is important to note that lower line layer comes upper in the webmap.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5fa558d0-8382-11ad-4938-4e4e652671a8.png)\nCharites may find update of the files and reflect them to the live preview.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/372ac6a2-afac-a6b2-753f-1a6b52c40f0d.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":159,"to":162}}}}],["82",{"pageContent":"You will see the following screen. Oops, it seems that I created the grid from zoom level 1 to 5, **so you will not see any line at zoom level 0 until it gets 1 although you edit the style setting from ZL 0**. (But, we can learn that it is important to properly understand the structure of the source vector tile. In addition, we can learn here that we may not need to define max/min Z in style if we control it in the source, while it is also important to understand how we use \"overzooming\" of the tile. I will not go into the details here.)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4c986016-67f2-14de-c9d4-d14d3ca7f7df.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":164,"to":165}}}}],["83",{"pageContent":"2-6. Add a layer:  Addling Polygon (Fill)\nNext, let's add polygon for landmass. We will use some polygon from Esri's Feature Service here: https://geoservices.un.org/arcgis/rest/services/Hosted/UN_Geodata_Stylized/FeatureServer/3?f=pjson .\nI have accessed this early December 2022 and convert the layer into vector tile (Method is written [here](https://qiita.com/T-ubu/items/17cb65754a54aa5ffb21) in Japanese).\n\nCopy \"pg-fill-sample.yml\" as \"pg-landmass.yml\" and edit it as below:\n```powershell\ncp layer_samples/pg-fill-sample.yml pg-landmass.yml\n```\n\n```yaml:pg-landmass.yml\nid: pg-landmass\nminzoom: 0\nmaxzoom: 5\npaint:\n  fill-color: rgb(237,237,237)\nsource: carto\nsource-layer: bnda \ntype: fill","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":167,"to":184}}}}],["84",{"pageContent":"```yaml:pg-landmass.yml\nid: pg-landmass\nminzoom: 0\nmaxzoom: 5\npaint:\n  fill-color: rgb(237,237,237)\nsource: carto\nsource-layer: bnda \ntype: fill\n```\n\nAnd, do not forget to add the layer in the style.yml. It should be upper the background, but under the grid line.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/7a3041c5-a1a6-08a7-afd3-797143794fd4.png)\n\nThen, you will see the map like this. My charites's version is a little older, but if your charites version is 0.3.0, you will see legend control in the lower left as well. The added polygon is for drawing purpose, and its geometry is not so accurate.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/1e1da4da-f350-ecec-ed4e-9e042f1b8a76.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":184,"to":199}}}}],["85",{"pageContent":"2-7. Add a layer:  Addling another line, using \"filter\"\nNext, we will add another line, and will use \"filter\" for the layer. Copy the line template as \"ls-coastline.yml\" and edit it as below. And, please also edit style.yml to add this layer between the grid30 layer and the landmass.\n\n```yaml:ls-coastline.yml\nfilter:\n- '=='\n- - get\n  - bdytyp\n- 0\nid: ls-coastline\nminzoom: 0\nmaxzoom: 5\npaint:\n  line-color: '#0000FF'\n  line-width: 1\nsource: carto\nsource-layer: bndl\ntype: line","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":201,"to":218}}}}],["86",{"pageContent":"We used filter to filter the features with bdytyp=0. Try to change 0 to 1. There are many ways of using filter. If you are interested in the expressions, please read [my another article (in Japanese) here](https://qiita.com/T-ubu/items/961176fb92fb66a927e0) with some tranlator.\nAnd, you may also need to choose a good filter based on your map library.\n\n* Our expression this time (recommended in MapLibre/MapBox): [\"==\",[\"get\",\"bdytyp\"],0]\n* Expression used for ArcGIS Online (an example): [\"==\",\"bdytyp\",0]\n\nNow, you see the map like this.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/05ba6ec8-5e05-1a35-ed5a-de7ecb381e05.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":221,"to":228}}}}],["87",{"pageContent":"2-8. Add a layer:  Adding a symbol (with filter and match)\nLastly, let's try adding a symbol. We will use \"filter\" again, and will use \"match\" expression to use the icon based on the attribution.\n\nPlease copy the symbol template (pt-symbol-sample.yml) as \"pt-city.yml\" and edit it as below, and add this layer in the style.yml between the grid and the coastline.","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":230,"to":233}}}}],["88",{"pageContent":"```yaml:pt-city.yml\nfilter:\n- match\n- - get\n  - _symbol\n- - 0 \n  - 1 #Alternative\n  - 2 #Territorial\n- true\n- false\nid: pt-city\nminzoom: 4\nmaxzoom: 5\nlayout:\n  icon-allow-overlap: true\n  icon-image:\n  - match\n  - - get\n    - _symbol\n  - 1\n  - PPL_Alternative\n  - 2\n  - PPL_Territorial\n  - PPL_National # for _symbol==0\n  icon-size: 1\n  text-allow-overlap: true\n  text-optional: true\n  text-field: '{_symbol}' #or [get, text_field] would be good.\n  text-font: \n  - Open Sans Regular #text font should be from glyphs\n  text-size: 10\n  text-anchor: bottom\n  text-offset:\n   - 1\n   - 1\n  #text-letter-spacing: 0.1\n  #text-max-width: 50\npaint:\n  text-color: '#000000'\n  text-halo-color: '#FFFFFF'\n  text-halo-width: 0.8\nsource: cme\nsource-layer: Populated Places_SYMBOLS #polygon or line can be also used for labelling \ntype: symbol\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4f46308d-62ab-7dae-29b6-a1c9105acf34.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":235,"to":280}}}}],["89",{"pageContent":"I woudl like to explain a little about the above yaml (pt-city.yml):\n* A filter is used to select the features with \"_symbol\" in [0, 1, 2]. You could also use a logical operatoer \"in\", but I simply used \"match\" expression here.\n* For icon-image, \"match\" expression is used for allocating the icon-image based on \"_symbol\" attribution of the source. This \"match\" expression work for MapLibre GL JS and Mapbox GJ JS, but it may not work for ArcGIS API for JavaScript and QGIS plugin (I am not 100% sure especially for the latest versions.).\n* For text-field, I just chose \"_symbol\" because it seems that the source vector tile layer does not have the city name. You can use two layers to display icon and label respectively, but you can also do it with a single layer if you have the name in it.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d511d73e-8784-3825-81e8-9e5de65cd06a.png)","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":282,"to":287}}}}],["90",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d511d73e-8784-3825-81e8-9e5de65cd06a.png)\n\nAbout the symbol layer, this time, we used \"point\" features as the source, but you can use other class such as line if you want.\n\nThus, we have seen how we can add line, polygon, point layer to the style.","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":287,"to":291}}}}],["91",{"pageContent":"2-9. Additional Exercise (Added on 19 December 2022)\nNow, we are updating unvt/charites so that it uses MapLibre GL JS ver. 2.4.0. With that you can see 3D terrain by adding raster-dem source and terrain to the style.yml. Please try if the charites is updated to the newer version in near future.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0be2874a-340d-b9ba-ced3-02fbc2a1bd32.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/c1bc7ea2-2d5b-2d39-e338-fa68d6cc72b0.png)\n\n\n# Exercise 3. Exporting JSON style from yaml files\nPlease stop your live preview, and go back to the command line. You can export your style from YAML to JSON.\n\n```\ncharites build charites-init/style.yml out-style.json","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":294,"to":304}}}}],["92",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/7b1e00e0-e5ee-a72c-d142-7170ce1623a3.png)\n\nThen, you now have the edited style in JSON. Congratulations!!\n\n(charites build may not work if there is some error in your style expression...)\n\n\n\n\n\n# Summary\nThis article explanined how we can edit a style (for Mapbox/MapLibre) with the UNVT tool named charites.\n\n# Refernces\n* Tools\n  * unvt/charites: https://github.com/unvt/charites \n* Repository\n  * the files used in this practice: https://github.com/ubukawa/style-ex01 \n* Others\n  * UN Open GIS Initiative: http://unopengis.org/unopengis/main/main.php\n  * UN Open GIS Initaitive - DWG7 (smart maps): https://github.com/UNopenGIS/7\n  * Mapbox style specification: https://docs.mapbox.com/mapbox-gl-js/style-spec/\n  * MapLibre style specification: https://maplibre.org/maplibre-gl-js-docs/style-spec/\n  * nodejs: https://nodejs.org/en/","metadata":{"source":"https://qiita.com/T-ubu/items/6588ebff2af537f6a9b5","title":"Vector tile styling with unvt/charites ","tags":"unvt vectortile unvt-charites MapLibre mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":307,"to":330}}}}],["93",{"pageContent":"Our work is done under the UN Vector Tile Toolkit activities and the UN Open GIS Initiative.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4afcf92d-2b0d-7259-b0ea-989f00f35a46.png) ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e47a1efe-ebd1-9b95-2eae-b137a5902d84.png)\n\n# Introduction\nWhen we develop a web map application using MapLibre GL JS or Mapbox GL JS, we often use elevation information for drawing hill shade and/or enabling 3D terrain expression. In such a case, elevation data is often treated as raster tile, specifically as RGB elevation tile that stores elevation value in RGB values. **Therefore, I think that the RGB elevation tile is a kind of defact format for the elevation tile for web mapping.**","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":5}}}}],["94",{"pageContent":"On the other hand, however, it would be **hard to find free and open RGB elevation tiles**. If we want to use [Mapbox Terrain-DEM](https://docs.mapbox.com/data/tilesets/reference/mapbox-terrain-dem-v1/) or [maptiler Terrain RGB from maptiler DATA](https://www.maptiler.com/terrain/), we have to pay for these data consumption. They host tile services and these are really useful for many users, but **you can also choose hosting tiles by yourself by converting and hosting your elevation tile by yourself** withouth any fee for data cousumption. In the world, there are several digital elevation model (DEM) available as **open data** such as SRTM by NASA/USGS and they can be used as the source of your RGB elevation tile.","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":7,"to":7}}}}],["95",{"pageContent":"As a part of our **[UN Vector Tile Toolkit](https://github.com/unvt)** activities under the [UN Open GIS Initiative](http://unopengis.org/unopengis/main/main.php), **I wanted to create RGB elevation tile by ourselves from open data (NASADEM) for our own purpose**. This is the record of my work, and I hope this article may help those who would like to develop his/her own RGB elevation tile for free of charge.\n(In August 2022, I created RGB tiles from SRTM, but it has a lot of void value due to the original data. This time, I will use NASADEM so that we have less void area.)\n\n:::note info \nWhat is RGB elevation tile?\n\nRGB elevation tile is raster tile that stores elevation infocation stored in RGB values. It is used for many mapping library such as Mapbox GL JS and MapLibre GL JS. We can create a 3D terrain map and/or hill shade map from it.\n\n**height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)**","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":10,"to":18}}}}],["96",{"pageContent":"**height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)**\n\nhttps://documentation.maptiler.com/hc/en-us/articles/4405444055313-RGB-Terrain-by-MapTiler\nhttps://docs.mapbox.com/data/tilesets/reference/mapbox-terrain-rgb-v1/\n\n:::\n\n\n\n\n\n\n\n# Source data (NASADEM)\nThe Land Processes Distributed Active Archive Center (LP DAAC) is distributing NASADEM for the global coverage (note: no data in high lattitude area). Like other NASA/USGS's product, they are free of charge. Data can be downloaded from this URL: https://e4ftl01.cr.usgs.gov/MEASURES/NASADEM_HGT.001/2000.02.11/ (user account is needed.)\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f8c6492f-2cb0-0fac-01e4-9e0bf5203380.png)\n*Figure 1. Comparison of data in Western Alps (n45-46, e007-008). Left: SRTM, Right: NASADEM*","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":18,"to":36}}}}],["97",{"pageContent":"NASADEM is based on SRTM and comlemented by ASTER G-DEM and ALOS 30 meter DEM. It has 1 arc second spatial resolutions (about 30 meters), and has less void area compared with SRTM (Fig 1). A file is for 1 degree by 1 degree area with 3601 by 3601 pixels. There are more than 14 thousand files in total. For detail, we can refer to the following website.\n\n\nhttps://lpdaac.usgs.gov/products/nasadem_hgtv001/\n\nhttps://lpdaac.usgs.gov/documents/592/NASADEM_User_Guide_V1.pdf\n\nhttps://www.earthdata.nasa.gov/data-and-information-policy\n\n# My Environment\n* Windows 10 Enterprise\n* Docker v20.10.8\n* PowerShell \n* Google Chrome Version 107.0.5304.87 (64-bit)","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":38,"to":51}}}}],["98",{"pageContent":"https://www.earthdata.nasa.gov/data-and-information-policy\n\n# My Environment\n* Windows 10 Enterprise\n* Docker v20.10.8\n* PowerShell \n* Google Chrome Version 107.0.5304.87 (64-bit)\n\n# Basic tactics\nWhen we create the RGB elevation tile, converting for the range of source file (1 degree by 1 degree) each time would be tough because we needed to do 14,520 conversions and meeded to merge outputs for raster tiling. It would be also tough to convert the whole globe at once given the size of input file (we would need to merge all the source first...).","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":51,"to":60}}}}],["99",{"pageContent":"So, my stragegy or tactics, which is often used in UN Vector Tile Toolkit, is to use the spatial modules of the ZL6 (zoom level 6) tiles. We have 4096 tiles for ZL6, but about 2/3 of them are water area without DEM. In addition, the northern and southern limits of SRTM (and NASADEM) are lower than the web mercator projection limits.  **Therefore, we may need to do the work for less than thousand modules/spatial extents (i.e., it is 931 for NASADEM)**. The figure 6 is an example of ZL6 tiling over SRTM data range (green boxes, 1 by 1 degree, are SRTM bounding boxes). Please note this ZL6 tile extent is in the web meracator project, so some of them do not look like squre in the DD projection.\n![2022-07-25-area.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d707e605-16bd-1ddb-345e-b83a6eb40c08.png)\n*Figure 6. ZL6 tile extents are overlaied to SRTM data ranges (grenn cells, 1 degree by 1 degree, are SRTM data extent.)*","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":62,"to":64}}}}],["100",{"pageContent":"Our basic processing workflow would be like this:\n* For any (6(=z), x, y),\n    * Check the bounding box of that tile extent in decimal degree. \n    * Check if there is any NASADEM files in that extent. --> if not file, we do not need to work for that area.\n    * If there is/are NASADEM file(s), merger them as a single input.tif for the extent.\n    * Conver merged tiff file into RGB elevation tile in mbtiles format (a kind of SQlite format containing all tiles for that extent.)\n\n\n\n\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":66,"to":77}}}}],["101",{"pageContent":"Step 1. Start Docker\nIn order to establish working environment, I ran a docker container. There is a docker image named unvt/rgbify-node for RGB elevation tile processing with nodejs.\n```\ndocker run -it --rm -v ${PWD}:/data unvt/rgbify-node\ncd /data\n```","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":79,"to":84}}}}],["102",{"pageContent":"Step 2. Data download\nAs the LP DAAC of NASA provides data download via command line (curl), I downloded 14,520 files with the coomand line in about 20 hours. The following webpage helped me to get the data with curl command. I created my user ID for NASA EarthDATA at https://urs.earthdata.nasa.gov/users/new to get the data.\n\nhttps://lpdaac.usgs.gov/resources/e-learning/how-access-lp-daac-data-command-line/\n\n### 2-1 Create .netrc file\nBecause I used my user ID and password for NASA EarthDATA when we downloaded DEM via curl command, I created .netrc file first.\n```bash\ntouch ~/.netrc | chmod og-rw ~/.netrc | echo machine urs.earthdata.nasa.gov >> ~/.netrc\necho login MYUSERNAME >> ~/.netrc\necho password MYPASSWORD >> ~/.netrc\n```\nYou can refer to my another article (in Japanese) here for details: https://qiita.com/T-ubu/items/8f955f21a5603a3483b3","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":86,"to":98}}}}],["103",{"pageContent":"2-2 Data download using sh file\nI prepared a shell file to download all 14520 files.\n https://raw.githubusercontent.com/ubukawa/nasadem-rgbify/main/src/dl.sh\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/fa2edb5f-38ee-d1ed-1024-c26d87f78eb8.png)\n*Figure 2. A screenshot of the sh file for download*\n\nThen, I ran the command to download the data.\n```bash\nmkdir src\ncd src\n./dl.sh\n```\n\nI downloaded all 14,520 files. Their data size in total is about **101GB**.","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":102,"to":115}}}}],["104",{"pageContent":"Step 3. Unpack data\nBecause gdal_merge did not work with zipped hgt files, I unpacked them. All the zipped files were in the src directory, so I unpacked them with the following command. To save the storage, I deleted num file and swb file.\n\n```bash\nmkdir 01_unpack\nfor f in src/*.zip; do unzip ${f} -d 01_unpack; rm 01_unpack/*.num; rm 01_unpack/*.swb; done\n```\nBecause there were 14,520 zipped files, I needed to wait for a while before unzip work started, and **it took about two days to unpack all the files in my environment**. I stored the data in the portable HDD, so it would be faster if I work with SSD storage.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5d74febe-c7f5-5d15-1c9d-5a0d01352126.png)\n*Figure 3. A screenshot during the download*\n\n**The total size of the unpacked file was more than 350GB**. Each DEM is stored in 16 bit siged integer format with the extention of \"hgt\" meaning height.","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":118,"to":129}}}}],["105",{"pageContent":"**The total size of the unpacked file was more than 350GB**. Each DEM is stored in 16 bit siged integer format with the extention of \"hgt\" meaning height. \n\n:::note\nGDAL and QGIS has a HGT driver, originally for SRTM HGT format, and they can deal with this format. Data itself has no information of the projection, spatial resolution and extent, etc., but georeference is done based on the filename that includes the min coordinate of x/y in decimal degree (e.g. \"n27e027.hgt\").\n**SRTMHGT – SRTM HGT Format:** https://gdal.org/drivers/raster/srtmhgt.html\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":129,"to":134}}}}],["106",{"pageContent":"Step 4. Merge (at each ZL6 spatial module)\nI merged all source DEM to prepare an input file for each spatial extent/module. \n\n:::note\n\nTo avoid a memory overflow, I separated \"merge\" process from \"rgbifying\" process. (I tried doing them all at once, but I failed.)\n:::\n\n:::note\n\nThe following note is **for those who want to create RGB elevation for whole globe**. You can refer to my another note if you want to work with a small number of source files: https://qiita.com/T-ubu/items/09720f25d5278d85222c\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":136,"to":147}}}}],["107",{"pageContent":"4-1. Checking the gdal_merge.py with hgt files\nFirst, I tested some command and confirmed that gdal_merge.py work with hgt files. It confirmed that georeference information was also reflected to the output. (The test2.tig in the following figure has only 2 source files, but has about 75MB. Locations are well recognized.)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ac1adc50-5b13-ba69-1b80-cb662f030249.png)\n*Figure 4. Testing the gdal_merge.py from hgt sources to create merged tiff* \n\nEach source was properly located when I merged.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f0ae7a88-5004-4662-7fb7-6d20744c93b3.png)\n*Figure 5. Checking the output of the gdal_merge.py with QGIS (check the coordinates and blank in the center)*","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":149,"to":156}}}}],["108",{"pageContent":"4-2. Preparing the script and running it \nI have prepared some scripts. All files are stored here: https://github.com/ubukawa/nasadem-rgbify. In order to conduct the merge works for all spatial modules, I prepared:\n\nnodejs package file (click here to open)\n\n```json:package.json\n{\n  \"name\": \"data\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Rgbifying NASA\",\n  \"main\": \"index4merge.js\",\n  \"scripts\": {\n    \"merge\": \"node index4merge.js\",\n    \"rgbify\": \"node index4rgb.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ubukawa/nasadem-rgbify.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ubukawa/nasadem-rgbify/issues\"\n  },\n  \"homepage\": \"https://github.com/ubukawa/nasadem-rgbify#readme\",\n  \"dependencies\": {\n    \"@mapbox/tilebelt\": \"^1.0.2\",\n    \"better-queue\": \"^3.8.10\",\n    \"child_process\": \"^1.0.2\",\n    \"config\": \"^3.3.7\",\n    \"fs\": \"^0.0.1-security\",\n    \"hjson\": \"^3.2.2\"\n  }\n}","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":158,"to":192}}}}],["109",{"pageContent":"config file in hjson (click here to open)\n\n```hjson:config/default.hjson\n{\n    srcDir: 01_unpack\n    gdalmergePath: gdal_merge.py\n    rasterioPath: rasterio \n    maxZ: 12 \n    minZ: 6\n    concurrent: 3\n    maxRetries: 3\n    retryDelay: 5000\n    mergeDir: merge\n    mbtilesDir: mbtiles\n}","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":197,"to":211}}}}],["110",{"pageContent":":::note\nThe congig file (config/default.hjson) containes not only parameter for merge work, but also parameters for rgbifying.\n:::\n\n\nnodejs script for merge (click here to open)\n\n```javascript:index4merge.js\n//modules\nconst config = require('config')\nconst fs = require('fs')\nconst {spawn} = require('child_process')\nconst tilebelt = require('@mapbox/tilebelt')\nconst Queue = require('better-queue')\n\n//config parameters\nconst srcDir = config.get('srcDir')\nconst mergeDir = config.get('mergeDir')\nconst mbtilesDir = config.get('mbtilesDir')\nconst gdalmergePath = config.get('gdalmergePath')\n\nlet modulesObj = {} //object {key: [srcFile, ... ], ...}\nlet emptyModules = []\nlet keys = [] //Array of key such as \"6-x-y\"\nlet keyInProgress = []\nlet idle = true\nlet countModule = 0\n\nconst isIdle = () => {\n    return idle\n}\n\nconst sleep = (wait) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(()=> {resolve(), wait})\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":215,"to":251}}}}],["111",{"pageContent":"const isIdle = () => {\n    return idle\n}\n\nconst sleep = (wait) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(()=> {resolve(), wait})\n    })\n}\n\nlet fileList = fs.readdirSync(srcDir) //list from the src folder (01_unpack)\nlet nasademFiles = fileList.filter(r => r.indexOf('.hgt') !== -1) //only hgt file  \n\n//keys (6-x-y)\nfor (x = 0; x < 64; x ++){\n    for (y = 0; y < 64; y++) {\n        let key = `6-${x}-${y}`\n        keys.push(key)\n    }\n}\n\nfor (const key of keys){\n//for (const key of ['6-31-31','6-32-32']){\n    let [tilez, tilex, tiley] = key.split('-')\n    tilex = Number(tilex)\n    tiley = Number(tiley)\n    tilez = Number(tilez)\n    const bbox = tilebelt.tileToBBOX([tilex, tiley, tilez])\n    modulesObj[key] = []","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":251,"to":279}}}}],["112",{"pageContent":"for (x=Math.floor(bbox[0]); x < bbox[2]; x++ ){\n        m = x.toString(10) // 10 means decimal\n    \n        if(x < 0) {\n            m = m.replace(\"-\",\"\")\n            if(m.length == 1){\n                m = `00${m}`\n            } else if (m.length == 2) {\n                m = `0${m}`\n            }\n            m = `W${m}`\n        } else {\n            if(m.length == 1){\n                m = `00${m}`\n            } else if (m.length == 2) {\n                m = `0${m}`\n            }\n            m = `E${m}`\n        } // Then, m has proper string","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":281,"to":299}}}}],["113",{"pageContent":"for (y = Math.floor(bbox[1]); y < bbox[3]; y++){\n            n = y.toString(10)\n            if(y<0){\n                n = n.replace(\"-\",\"\")\n                if(n.length == 1) {\n                    n = `0${n}` \n                }\n                n = `S${n}`\n            } else {\n                if(n.length == 1) {\n                    n = `0${n}` \n                }\n                n = `N${n}`\n            }\n            nm = `${n.toLowerCase()}${m.toLowerCase()}.hgt` //e.g. e27e027.hgt\n            if(nasademFiles.includes(nm)){\n                //console.log (`${nm}---> yes(${key})`)\n                modulesObj[key].push(`${srcDir}/${nm}`)\n            }    \n        }\n    }\n    if (Object.keys(modulesObj[key]).length == 0) {\n        emptyModules.push(key)\n    } \n    if (modulesObj[key].length == 0){\n        delete modulesObj[key]\n    } \n\n}","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":301,"to":329}}}}],["114",{"pageContent":"}\n\n\nconst queue = new Queue(async (t, cb) => {\n    const key = t.key\n    const tile = t.tile\n    const [z, x, y] = tile\n    const mergedPath = `${mergeDir}/${key}.tif`\n    const tmpPath = `${mbtilesDir}/part-${key}.mbtiles`\n    const dstPath = `${mbtilesDir}/${key}.mbtiles`\n    countModule ++\n\n    keyInProgress.push(key)\n    console.log(`[${keyInProgress}] in progress`)\n\n    console.log(`--- ${key} (${countModule}/${Object.keys(modulesObj).length}) starts: ${modulesObj[key].length} src file/files`) //list of src files\n    //console.log(`--- ${key} (${countModule}/${Object.keys(modulesObj).length}): ${modulesObj[key].length}   (${modulesObj[key]})`) //list of src files\n\n    let gdalmergeArray = [\n        '-o', mergedPath\n    ]\n    const mgStartTime = new Date()\n    gdalmergeArray = gdalmergeArray.concat(modulesObj[key])","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":329,"to":351}}}}],["115",{"pageContent":"let gdalmergeArray = [\n        '-o', mergedPath\n    ]\n    const mgStartTime = new Date()\n    gdalmergeArray = gdalmergeArray.concat(modulesObj[key])\n\n    if(fs.existsSync(mergedPath)){\n        console.log(`--- ${key}: file already exists (${mgStartTime.toISOString()})`)\n        keyInProgress = keyInProgress.filter((v) => !(v === key)) \n        return cb()        \n    } else {","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":351,"to":361}}}}],["116",{"pageContent":"const gdalmerge = spawn(gdalmergePath, gdalmergeArray)\n    //gdalmerge.stdout.on('data', (data) => {\n    //    console.log(`stdout: ${data}`)\n    //})\n    gdalmerge.stderr.on('data', (data) =>{\n        console.log(`stderr(at merge):${data}`)\n    })\n    gdalmerge.on('error', (error) => console.log(error.message.message))\n    gdalmerge.on('exit', (code, signal) =>{\n        if(code) console.log(`process exit with code: ${code}.`)\n        if(signal) console.log(`process killed with signal: ${signal}.`)\n        const mgEndTime = new Date() \n        console.log(`--- ${key}: ${modulesObj[key].length} src file/files merge ends (${mgStartTime.toISOString()} --> ${mgEndTime.toISOString()} )`)\n        keyInProgress = keyInProgress.filter((v) => !(v === key)) \n        //fs.renameSync(tmpPath,dstPath)\n        //fs.unlinkSync(mergedPath)\n        return cb()","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":363,"to":379}}}}],["117",{"pageContent":"})\n    }\n},{\n    concurrent: config.get('concurrent'),\n    maxRetries: config.get('maxRetries'),\n    retryDelay: config.get('retryDelay')\n})\n\nconst queueTasks = () => {\n    for (let module of Object.keys(modulesObj)){\n        let tile = module.split('-').map(v => Number(v))\n        queue.push({\n            key: module,\n            tile: tile\n        })\n    }\n}\n\nconst shutdown = () => {\n    console.log('** production system (merge) shutdown! (^_^) **')\n  }","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":381,"to":401}}}}],["118",{"pageContent":"const shutdown = () => {\n    console.log('** production system (merge) shutdown! (^_^) **')\n  }\n\n  const main = async () =>{\n    const stTime = new Date()\n    console.log(`-------UNVT---------------\\n${stTime.toISOString()}: Production starts. \\n- From the saved sources, we have ${Object.keys(modulesObj).length} modules with NASADEM. \\n- ${emptyModules.length} modules are without NASADEM.\\n- Here is the list of ${Object.keys(modulesObj).length} modules: \\n${Object.keys(modulesObj)}\\n--------------------------`)\n    queueTasks()\n    queue.on('drain', () => {\n        const closeTime = new Date()\n        console.log(`Production ends: ${stTime.toISOString()} --> ${closeTime.toISOString()}`)\n        shutdown()\n    })\n}\n\nmain()","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":401,"to":416}}}}],["119",{"pageContent":"Then, I ran the following script.\n\n```bash\nnpm install\nnpm run merge","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":421,"to":425}}}}],["120",{"pageContent":"It was turned out **that 931 modules out of 4096 have NASADEM data in their extent**. So, we will obtain 931 tiff files through this process. This statics was automatically calculated from the files in the directory where I stored the unpacked files.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/55533ae7-1541-2617-aed3-9fbf894cbf00.png)\n*Figure 6. A snapshot at the begining of the processing*\n\nFor some modules, there are a few source files and it took short time. If a module has many files, it took longer time. Because I used the spatial modules based on the ZL6 tile, the maximum number of the source files in a module would be 49 and its output would be around a few GB.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f3aef290-8ca7-3b77-7415-5f2a5a9c7331.png)\n*Figure 7. A snapshot during merge work*","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":428,"to":434}}}}],["121",{"pageContent":"It took **about two days** to merge files for all spatial modules that have NASADEM. **The total size of all 931 merged files is 587GB**. The total size increased compared with the total size of unpacked files, but it is natural because some source files (1 by 1 degrees) are duplicated for different ZL6 extents.\n\nI remember the merge process took about 5 days when I worked with SRTM dem (source files are in tiff format) in August 2022. I changed the resource setting of the Docker since then, so it would affect the conversion time. Anyway, the log of the work can be accessible from here: https://github.com/ubukawa/nasadem-rgbify/blob/main/merge-log.txt\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5079f26e-f5ad-2068-6bce-1116d9454ea6.png)\n*Figure 8. Merged files for respective spatial modules as inputs for RGBifying*","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":436,"to":441}}}}],["122",{"pageContent":"Step 5. RGBifying \nI prepared another nodejs script for RGBifying merged files.\n\nnodejs script for rgbifying (click here to open)\n\n```javascript:index4rgb.js\n//modules\nconst config = require('config')\nconst fs = require('fs')\nconst {spawn} = require('child_process')\nconst Queue = require('better-queue')\n\n//config parameters\nconst mergeDir = config.get('mergeDir')\nconst mbtilesDir = config.get('mbtilesDir')\nconst rasterioPath = config.get('rasterioPath')\nconst maxZ = config.get('maxZ')\nconst minZ = config.get('minZ')\n\nlet keys = [] //Array of key such as \"6-x-y\"\nlet keyInProgress = []\nlet idle = true\nlet countModule = 0\n\nconst isIdle = () => {\n    return idle\n}\n\nconst sleep = (wait) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(()=> {resolve(), wait})\n    })\n}\n\nlet mgfileList = fs.readdirSync(mergeDir) //list from the merge folder\nmgfileList = mgfileList.filter(r => r.indexOf('.tif') !== -1) //only tiff file","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":443,"to":478}}}}],["123",{"pageContent":"let mgfileList = fs.readdirSync(mergeDir) //list from the merge folder\nmgfileList = mgfileList.filter(r => r.indexOf('.tif') !== -1) //only tiff file\n\n\nfor (let i=0; i {\n    //const startTime = new Date()\n    const key = t.key\n    const tile = t.tile\n    const [z, x, y] = tile\n    const mergedPath = `${mergeDir}/${key}.tif`\n    const tmpPath = `${mbtilesDir}/part-${key}.mbtiles`\n    const dstPath = `${mbtilesDir}/${key}.mbtiles`\n    countModule ++\n\n    keyInProgress.push(key)\n    console.log(`[${keyInProgress}] in progress`)\n    console.log(`--- ${key} (${countModule}/${keys.length}) starts`) //list of src files\n\n    const rgbStartTime = new Date()","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":478,"to":496}}}}],["124",{"pageContent":"if(fs.existsSync(dstPath)){\n        console.log(`--- ${key}: file already exists (${rgbStartTime.toISOString()})`)\n        keyInProgress = keyInProgress.filter((v) => !(v === key)) \n        return cb()        \n    } else {\n        const rgbify = spawn(rasterioPath, [\n            'rgbify', '-b','-10000','-i','0.1', '--max-z', maxZ, '--min-z', minZ,\n            '--format', 'webp', '--bounding-tile', `[${x.toString()},${y.toString()},${z.toString()}]`, \n            mergedPath, tmpPath\n        ])\n        //rgbify.stdout.on('data', (data) => {\n        //    console.log(`stdout: ${data}`)\n        //})\n        rgbify.stderr.on('data', (data) =>{\n            console.log(`stderr(at rgbify):${data}`)\n        })\n        rgbify.on('error', (error) => console.log(error.message.message))\n        rgbify.on('exit', (code, signal) =>{\n            if(code) console.log(`process exit with code: ${code}.`)\n            if(signal) console.log(`process killed with signal: ${signal}.`)","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":499,"to":518}}}}],["125",{"pageContent":"rgbify.on('exit', (code, signal) =>{\n            if(code) console.log(`process exit with code: ${code}.`)\n            if(signal) console.log(`process killed with signal: ${signal}.`)\n            keyInProgress = keyInProgress.filter((v) => !(v === key)) \n            fs.renameSync(tmpPath,dstPath)\n            //fs.unlinkSync(mergedPath)\n            const rgbEndTime = new Date() \n            console.log(`--- ${key} ends:  (${rgbStartTime.toISOString()} --> ${rgbEndTime.toISOString()} )`)\n            return cb()\n        })\n    }\n},{\n    concurrent: config.get('concurrent'),\n    maxRetries: config.get('maxRetries'),\n    retryDelay: config.get('retryDelay')\n})","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":518,"to":533}}}}],["126",{"pageContent":"const queueTasks = () => {\n    for (let key of keys){\n    //for (let tile of [[6,32,20],[6,32,21],[6,32,22],[6,32,23],[6,33,20],[6,33,21],[6,33,22]]){\n    //for (let key of ['bndl1', 'bndl2', 'bndl3', 'bndl4', 'bndl5', 'bndl6']){\n        let tile = key.split('-').map(v => Number(v))\n        queue.push({\n            key: key,\n            tile: tile\n        })\n    }\n}\n\nconst shutdown = () => {\n    console.log('** production system shutdown! (^_^) **')\n  }\n\n  const main = async () =>{\n    const stTime = new Date()\n    console.log(`-------UNVT---------------\\n${stTime.toISOString()}: Production starts. \\n- From the merged files, we have ${keys.length} modules with SRTM DEM. \\n- Here is the list of ${keys.length} modules: \\n${keys}\\n--------------------------`)\n    queueTasks()\n    queue.on('drain', () => {\n        const closeTime = new Date()\n        console.log(`Production ends: ${stTime.toISOString()} --> ${closeTime.toISOString()}`)\n        shutdown()\n    })\n}\n\nmain()","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":535,"to":562}}}}],["127",{"pageContent":"Then, I ran the command as below:\n\n```bash\nnpm run rgbify\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e46ef022-a309-b79f-4d2d-062d45ef1414.png)\n*Figure 9. A screenshot during rgbifying*\n\nI got the RGB elevations tiles in mbtiles format. It took about 2 days (41h28m) to obtain 931 mbtiles files. The total size is **184GB**.\n\n:::note\nIt is noteworthy that I got some future warning message during the rgbifying for 6-63-20, 6-63-21, .., 6-63-42. They are at the western limit of the web map mercator, and I thought it could be somehow related to the tile extent while I confirmed that their input files did not exist over the E180/W180 line.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f13cc0e8-8e69-3fab-33ab-35451b708d5b.png)\n*Figure 10. A screenshot of future warning for 6-63-y*\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":567,"to":582}}}}],["128",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f13cc0e8-8e69-3fab-33ab-35451b708d5b.png)\n*Figure 10. A screenshot of future warning for 6-63-y*\n:::\n\n:::note\nThe zoom level range of the outputs is from ZL6 to ZL12. We can adjust the zoom level range by eiditing the config setting in config/default.hjson. Thinking of the resolution of the source data and the total size of outputs, I used 12 as the maxzoom.\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":582,"to":588}}}}],["129",{"pageContent":"Step 6. Hosting\nAlthough the data hosting is not the main scope of this article, I would like to breifly explain how I host these RGB elevation tiles for our use.\n\n### Case 1: Hosting with nodejs/express server our hosting (Our case)\nTo save the stroage, I use \"mbtiles\" format, but it does not simply work with the static hosting because raster tile is generally requested as **png format**. We have established a simple web server using nodejs/express, and created a spetial module for raster tile (png) delivery from mbtiles with a npm module, called **mapbox/mbtiles( [npm package](https://www.npmjs.com/package/@mapbox/mbtiles) / [GitHub Repository](https://github.com/mapbox/node-mbtiles) )**. And, because we have 931 mbtiles, not a single file, we have adjusted routing so that we can properly respond to the RGB elevation tile requests. For detaile, you can check here: https://github.com/unvt/coesite3/blob/main/routes/rgbElev.js (and also check app.js in the upper level if needed).","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":591,"to":595}}}}],["130",{"pageContent":"Case 2: Hosting as static contents\nBy converting tiles from mbtiles format into png format, we can simply host them as static contents at any webserver.\nunvt/rgbify-node has **a tool called [mbutil](https://github.com/mapbox/mbutil) by mapbox**, we can simply obtain png files by running the following command.\n\n```\nmb-util mbtiles/6-hoge-hoge.mbtiles zxy/6-hoge-hoge","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":597,"to":602}}}}],["131",{"pageContent":":::note\nFrom my experiece, **I think total data size of png files is greater than that of mbtiles**. Sometimes, it can be 3 or 4 times larger. So, if your data is over 100GB in mbtiles, it would be over 300GB in png. This is the reason why I chose to use mbtiles for my hosting.\n:::\n\n# Summary\nThus, I have explained how I converted RGB elevation tiles from NASADEM. NASADEM has less void compared with SRTM.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b756ac45-7769-bad0-8a77-d8ac8ec4fd47.png)\n\n\n# References\n\nhttps://lpdaac.usgs.gov/products/nasadem_hgtv001/\n\nhttps://lpdaac.usgs.gov/resources/e-learning/how-access-lp-daac-data-command-line/\n\nhttps://docs.mapbox.com/data/tilesets/reference/mapbox-terrain-dem-v1/\n\nhttps://www.maptiler.com/terrain/\n\nhttps://www.npmjs.com/package/@mapbox/mbtiles\n\nhttps://github.com/unvt","metadata":{"source":"https://qiita.com/T-ubu/items/c7bb5697b51f245ef163","title":"Creation of RGB elevation tile from NASADEM","tags":"unvt DEM NASA geo","author":"T-ubu","slide":"false","loc":{"lines":{"from":605,"to":627}}}}],["132",{"pageContent":"# Introduction\nIn the web mapping field, I think vector tile technique is getting its popularity year by year. I joined FOSS4G in 2022 and 2021, and strongly felt it. There are a lot of wonderful tools such as [OpenMapTiles](https://openmaptiles.org/), [tilemaker](https://github.com/systemed/tilemaker) and [onthegomap/planetiler](https://github.com/onthegomap/planetiler) to create your own vector tile data from OpenStreetMap. \n\nOur initiative, [UN Vector Tile Toolkit (UNVT)](https://github.com/unvt), also supports converting vector tile from OpenStreetMap data, so I will introduce how we can create vector tile from OpenStreetMap using UNVT (in particular ~~[unvt/naru](https://github.com/unvt/naru)~~ [unvt/nanban](https://github.com/unvt/nanban)).","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":4}}}}],["133",{"pageContent":"Because [unvt/naru](https://github.com/unvt/naru) was developed more than two years ago, it worked on nodejs ver. 12, and its docker image cannot be build right now at my local environment. I have created a repository [ubukawa/mini-naru](https://github.com/ubukawa/mini-naru) containing a subset of files from unvt/naru for vector tile creation, which will run on the docker based unvt/nanban environment.\n\n\n# My Environment\nMy working environment is as follows:\n* Windows 10 (Enterprise)\n* Docker version 20.10.8\n* PowerShell version 5.1.19041.1237\n* git version 2.25.0.windows.1\n\n\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":6,"to":18}}}}],["134",{"pageContent":"Step 1: Download the file\nThere is a good web page named [\"GEOFABRIK\"](https://download.geofabrik.de/) that provides OpenStreetMap data extracts. You can choose the data by region, contry and so forth.\n\nI chose the data for the Ohaio State, USA for this trial as below. I got \"ohio-latest.osm.pbf.\" \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d0d9cdc7-1a82-a46f-deca-91f1a4fbe1f9.png)\n\n\n## Step 2: Cloning the scripts from mini-naru\n\n```bash\ngit clone https://github.com/ubukawa/mini-naru\ncd mini-naru\n```","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":20,"to":32}}}}],["135",{"pageContent":"Step 2: Cloning the scripts from mini-naru\n\n```bash\ngit clone https://github.com/ubukawa/mini-naru\ncd mini-naru\n```\n\n\n## Step 3: Starting Docker container\nI saved the downloaded file in the **src** directory at my working directory, and started a docker container there. The unvt/nanban is a docker image that includes all the necessary tool for this vector tile practice. \n\n```bash\ndocker run -it --rm -v ${PWD}:/data unvt/nanban\ncd /data\n```\n\nunvt/naru originally used its own Dockerfile to establish its docker image. However, because it does not work at my environment now, I am using another unvt tool to establish my working environment.","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":32,"to":48}}}}],["136",{"pageContent":"Step 4:  Making a config file for data export and testing export\nWe use osmium for reading the data from the source (src/ohio-latest.osm.pbf). I referred to a config file for it, [osmium-export-config.json](https://raw.githubusercontent.com/ubukawa/mini-naru/main/osmium-export-config.json), and ran the command as below.","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":51,"to":52}}}}],["137",{"pageContent":"```bash\n osmium export --config osmium-export-config.json --index-type=sparse_file_array --output-format=geojsonseq --output=- src/ohio-latest.osm.pbf\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/810d7871-98b1-caf0-17d6-1f4585f4653b.png)\nThen, I saw the features are exported as geojson sequence. We can adjust config file whenever needed.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f9aee2d5-4fb7-96dd-5487-b99bae5c9081.png)\nI do not write the copy of the [osmium-export-config.json](https://raw.githubusercontent.com/ubukawa/mini-naru/main/osmium-export-config.json) here, but it is important to confirm its content for your better understanding.","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":54,"to":60}}}}],["138",{"pageContent":"Step 5: Applying a filter to modify the exported GeoJSON sequence\nWe will edit the GeoJSON sequence with **filter.js** and **modify.js**. First, I installed two npm packages as below.\n```bash\nnpm install --save json-text-sequence @mapbox/geojson-area","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":63,"to":66}}}}],["139",{"pageContent":"Then, let's check **[filter.js](https://raw.githubusercontent.com/ubukawa/mini-naru/main/filter.js)** and **[modify.js](https://raw.githubusercontent.com/ubukawa/mini-naru/main/modify.js)**. Although I do not explain about the modify.js, but this is the core of the data conversion, and this defines the vector tile structure. We can learn a lot from this file. You can also edit this file to change the vector tile structure.\n\nThen, I ran command as below. I just added a filter to the previous step using pipe and node (| node filter.js).\n\n```bash\nosmium export --config osmium-export-config.json --index-type=sparse_file_array --output-format=geojsonseq --output=- src/ohio-latest.osm.pbf | node filter.js\n```\nNow, we can see that each exported feature has the propeties for tippicanoe, which is for the vector tile conversion.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d1d38dc4-b4c0-4024-3bb2-b3579de7d410.png)","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":69,"to":77}}}}],["140",{"pageContent":"Step 6: Vector tile conversion (export as mbtiles)\nSo far, I confirmed that I obtained a GeoJSON sequence with proper conversion information. It is ready to be piped into tippecanoe, a vector tile conversion tool. I added one more pipe to the previous command.\n\n```bash\nosmium export --config osmium-export-config.json --index-type=sparse_file_array --output-format=geojsonseq --output=- src/ohio-latest.osm.pbf | node filter.js | tippecanoe --no-feature-limit --no-tile-size-limit --force --simplification=2 --maximum-zoom=15 --base-zoom=15 --hilbert --output=src/output.mbtiles\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/74e04e03-85a7-7557-9ab1-b1e201eeba40.png)\nDepend on the source data and PC power, it would take a long time.","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":79,"to":86}}}}],["141",{"pageContent":"Step 7: converting from mbtiles format to pbf tile format.\nFor static hosting via GitHub page, let's convert mbitles to pbf files in zxy structure using tile-join, a sub-tool of the Tippecanoe. However, because the total size of pbf tiles can be 3 or 4 times larger than the mbtiles size, it would be not a good idea to convert a large mbtiles data into pbf. (If so, you may think about delivering the tiles from mbtiles using nodejs server, etc..) \n\n```bash\ntile-join --force --no-tile-compression --no-tile-size-limit --output-to-directory=docs/zxy src/output.mbtiles\n```","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":90,"to":95}}}}],["142",{"pageContent":"Result: Vector tile in PBF format\nThus, I obtained vector tiles in zxy directory.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ef968aeb-6e3e-15dc-fd56-20cc77ce0d93.png)\n\nIt would be a good idea to confirm the center of data in the metadata.json.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/fcbc91cf-8733-b27f-608f-753f33bd4bb7.png)\n\n\n\n\n# Additional note: Vector tile map hosting \n\n## styling\nBecause the vector tile structure is designed by the **filter.js** and **modify.js** as explained above, we can use a common style from unvt/naru [here](https://raw.githubusercontent.com/ubukawa/mini-naru/main/docs/style.json) by adjusting the center, location of source tile, glyphs, etc. It is from unvt/naru repository.","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":97,"to":110}}}}],["143",{"pageContent":"Hosting\nIt would be easy to host the tile in GitHub page with necessary library and files.\nunvt/naru has a function to create sprites (map symbols), and glyphs (text fonts), etc., so I copied them into mini-naru (https://github.com/ubukawa/mini-naru/tree/main/docs) as well as the latest MapLibre GL JS. You can create your map environment using these resources.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4b27513c-c032-0d15-ee28-b4ce36c6057c.png)\n\nhttps://ubukawa.github.io/ohio/index.html#14.28/41.50216/-81.66211/-92/60\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4390b98f-9cdd-3898-33a5-a89fbd4a504f.png)\n\n\n# Acknowledgement\nThis trial is based on the previous efforts summerized in the unvt/naru by @hfu and his colleagues.\n\n# Reference\n* unvt/naru https://github.com/unvt/naru\n* unvt/nanban https://github.com/unvt/nanban\n* ubukawa/mini-naru https://github.com/ubukawa/mini-naru\n* GEOFABRIK https://download.geofabrik.de/","metadata":{"source":"https://qiita.com/T-ubu/items/b112ec739a99f92f32dd","title":"Vector Tile Creation from OpenStreetMap (osm.pbf) using unvt tool (docker based unvt/nanban)","tags":"unvt vectortile OpenStreetMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":112,"to":128}}}}],["144",{"pageContent":"# Introduction\nMy colleague Steve gave me some sample date of the point cloud (about 5.5GB in LAZ), so I tried to make voxel tile to easily overview the data. As the source was large, I used **pdal tile** to reduce the burden during the voxel resampling. Here is the record of my work. The source data, the point cloud data, was generated by using OpenDroneMap.\n\n# Result\nBefore introducing the procedure, here is the overview of my final result in GitHub page. They can be seen at https://ubukawa.github.io/voxel-2/index.html . It would be a good to change your browser scake to smaller such as 50% or 33%. \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/2b689d82-771c-2860-f062-5128076ee583.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d40206c6-b0b2-39c4-a90e-c163122dcce0.png)","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":8}}}}],["145",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d40206c6-b0b2-39c4-a90e-c163122dcce0.png)\n\nhttps://ubukawa.github.io/voxel-2/index.html#17.07/-4.894677/29.653191/-63.9\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/884806a5-f75b-a5f1-e1c1-f7c55639645c.png)\n\n\n\n# My Environment\n* Windows 10 Enterprise\n* Docker version 20.10.8\n* GitHub Repository for this work https://github.com/ubukawa/voxel-2\n\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":8,"to":21}}}}],["146",{"pageContent":"Step 0. Starting a Docker container\nIn order to easily establish my working environment, I used Docker container. A docker image unvt/voxel has the pdal and other tools for this work.\n\n```\ndocker run -it --rm -v ${PWD}:/data unvt/voxel\n```","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":23,"to":28}}}}],["147",{"pageContent":"Step 1. Check the point cloud data\nWe can check metadata of the targeted data by running the following command. The option \"metadata\" will save time if your data is too big. You can check the projection and datum of the target.\n\n```\npdal info src/sample.laz --metadata\n``` \nIn this case, I confirmed that the datum is WGS84 and projection is UTM35S, therefore its EPSG code should be 32735.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/24170037-362c-be68-7c82-53d7267bfe1e.png)\n\nLet's also check a specific point (#0) with the following command (dumping the point #0).\n\n```\npdal info src/sample.laz -p 0\n``` \n\nBut, I found that it took long time wit the above command. Let's use this then.","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":30,"to":45}}}}],["148",{"pageContent":"```\npdal info src/sample.laz -p 0\n``` \n\nBut, I found that it took long time wit the above command. Let's use this then.\n\n```\npdal info src/sample.laz --summary\n``` \nThis one worked promptly, and I can see the properties at \"dimensions.\" It seems that the RGB values are in #13rd, 14th, and 15th columns. \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/98885ba9-699b-a963-5ce6-a9c784d50351.png)","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":45,"to":55}}}}],["149",{"pageContent":"Step 2. Reprojection\nUsing pdal with ruby, we can convert the projection from UTM to the web mercator which is for the web map tile. Prepare the following \"1.rb\" and \"constants.rb\", and run the command.\n\n\n```ruby: 1.rb\n# for reprojection. (actually it is not needed)\nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nbasename = ENV['BASENAME']\nsrc_path = \"#{TMP_DIR}/#{basename}.laz\"\ndst_path = \"#{TMP_DIR}/#{basename}-3857.laz\" # you can use las if you want\n\npipeline = <<-EOS\npipeline: \n  - \n    filename: #{src_path}\n    type: readers.las\n    spatialreference: \"EPSG:32735\"\n  -\n    type: filters.reprojection\n    out_srs: \"EPSG:3857\" \n  -\n    type: writers.las\n    filename: #{dst_path}\nEOS\n\nprint JSON.dump(YAML.load(pipeline))","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":60,"to":88}}}}],["150",{"pageContent":"1.rb defined the projection of the source and output. In addition, it defines the format of output as \"LAS\" or \"LAZ\". Although its export type is \"writers.las\", it covers LAZ format if you define the export file name as laz (see \"dst_path\" in the 1.rb).\nAfter the conversion as the las format, I found that the exported file in LAS format is about 37GB while the source file in LAZ (compressed) is 5.6 GB. When I converted it into laz, the exported file was almost the same size with the source.\n\n\n```ruby: constants.rb\nSKIP = true\n\nTMP_DIR = 'src'\nZ_ONE_METER = 19\nBASE = 2\n\nMAXZOOM = 19\nMINZOOM = 10\nMINCOPYZOOM = 10\n\nLAYER = 'voxe\n```\n\nYou run the command with specifying the basename. Thus, \"src/sample.laz\" will be converted and exported as \"src/sample-3857.las\" (or \"src/sample-3857.laz\"). It will take several hours depend on your data size.  \n```bash:\nBASENAME=sample ruby 1.rb | pdal pipeline --stdin\n```","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":91,"to":112}}}}],["151",{"pageContent":"Step 3. Conversion (failed)\nNow, we have \"sample-3857.las\" (or laz) in src directory. Let's go futher. Prepare 2.rb and 3.rb, then run the following command. Then, wait for a while. \n\n```bash:\nZ=19 BASENAME=sample ruby 2.rb | pdal pipeline --stdin | Z=19 ruby 3.rb | tippecanoe --maximum-zoom=19 --minimum-zoom=19 --projection=EPSG:3857 --force --output out-19.mbtiles --no-tile-size-limit --no-feature-limit","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":116,"to":120}}}}],["152",{"pageContent":"2.rb is for resampleing using filters.voxelcenternearestneigbour of pdal.\n```ruby.2.rb\nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nz = ENV['Z'].to_i\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nbasename = ENV['BASENAME']\nsrc_path = \"#{TMP_DIR}/#{basename}-3857.laz\" #unless File.exist?(src_path)\ndst_path = \"#{TMP_DIR}/#{basename}-#{z}.laz\"\n$stderr.print \"#{spacing}m for #{dst_path} from #{src_path}\\n\"\n\npipeline = <<-EOS\npipeline: \n  - \n    filename: #{src_path}\n    type: readers.las\n  -\n    type: filters.voxelcenternearestneighbor\n    cell: #{spacing}\n  -\n    type: writers.text\n    format: csv\n    filename: STDOUT\nEOS\n\nprint JSON.dump(YAML.load(pipeline))","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":123,"to":150}}}}],["153",{"pageContent":"3.rb is for cleaning and adjusting the GeoJSON sequence for Tippecanoe, a vector tile conversion tool, processing. If you are an advanced user, you may find it interesting about the minzoom/maxzoom setting. This process will generate vector tiles at a single ZL. So, you have to repeat the process with the different z parameters. This is because we want to use different spacing for each zoom level (e.g. 1 meter at ZL19, 2 meter at ZL18, 4 meter at ZL17, etc..).\n\n```ruby:3.rb\nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nz = ENV['Z'].to_i\nminzoom = (z == MINZOOM) ? MINCOPYZOOM : z\nmaxzoom = z\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nn = 0","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":153,"to":164}}}}],["154",{"pageContent":"z = ENV['Z'].to_i\nminzoom = (z == MINZOOM) ? MINCOPYZOOM : z\nmaxzoom = z\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nn = 0\n\nfirst = true\nstart_time = Time.now\nwhile gets\n  if first\n    first = false\n    next\n  else\n    n += 1\n  end\n  r = $_.strip.split(',')\n  x = r[0].to_f - r[0].to_f % spacing\n  y = r[1].to_f - r[1].to_f % spacing\n  h = r[2].to_f - r[2].to_f % spacing\n  h = h.to_i\n  color = '#' + r[13..15].map{|v| sprintf('%01x', v.to_i )}.join\n  g = <<-EOS\ntype: Polygon\ncoordinates: \n  -\n    -\n      - #{x}\n      - #{y}\n    -\n      - #{x + spacing}\n      - #{y}\n    -\n      - #{x + spacing}\n      - #{y + spacing}\n    -\n      - #{x}\n      - #{y + spacing}\n    -\n      - #{x}\n      - #{y}\n  EOS\n  g = YAML.load(g)\n  f = <<-EOS\ntype: Feature\nproperties: \n  color: '#{color}'\n  h: #{h}\n  spacing: #{spacing}\ntippecanoe:\n  minzoom: #{minzoom}\n  maxzoom: #{maxzoom}\n  layer: #{LAYER}\n  EOS\n  f = YAML.load(f)\n  f[:geometry] = g\n  print JSON.dump(f), \"\\n\"\nend","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":164,"to":220}}}}],["155",{"pageContent":"def hms(s)\n  min, sec = s.to_i.divmod(60)\n  hour, min = min.divmod(60)\n  \"%02d:%02d:%02d\" % [hour, min, sec]\nend\n\n$stderr.print \"\\n[#{z}] #{hms(Time.now - start_time)}s\\n\"","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":222,"to":228}}}}],["156",{"pageContent":"However, unfortunately, after a while, **I found that the process was killed, I meant the voxelcenternearestneighbour was killed**, dut to the large size of the source (about 5GB in LAZ format). If your data is not so big or if your PC is strong enough, you would succeed. **I need to try another way.**","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":231,"to":231}}}}],["157",{"pageContent":"Step 4. Divide the data\nBecause the data is too big. Let's divide it into several pieces using **pdal tile**.\n\n```\npdal tile --length 2000 src/sample-3857.laz \"tile/output_#.laz\"\n```\n\nThen, we have the tiled laz data. If the size of the files is still large, you can change the parametere of the previous tiling command. (I first used 3000, but it was not good, so I used 2000.)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/c7a3a54d-f850-62b8-7824-ca631a4506ef.png)","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":235,"to":243}}}}],["158",{"pageContent":"Step 5. Resampling to Voxel, and other minor adjustments","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":245,"to":245}}}}],["159",{"pageContent":"conversion of each file at each zoom level\nFor each laz file, we create the voxel vector tile with the following script. I ran the same command for zoom level 19 to 15. At ZL19, it has 1 meter voxel, while we have 16 meter voxel at ZL15.","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":246,"to":247}}}}],["160",{"pageContent":"```bash:all.sh\nmkdir mbtiles/19\nfor f in tile/*.laz; do Z=19 BASENAME=`basename ${f} .laz` ruby 2.rb | pdal pipeline --stdin | Z=19 ruby 3.rb | tippecanoe --maximum-zoom=19 --minimum-zoom=19 --projection=EPSG:3857 --force --output mbtiles/19/`basename ${f} .laz`.mbtiles --no-tile-size-limit --no-feature-limit; done\nmkdir mbtiles/18\nfor f in tile/*.laz; do Z=18 BASENAME=`basename ${f} .laz` ruby 2.rb | pdal pipeline --stdin | Z=18 ruby 3.rb | tippecanoe --maximum-zoom=18 --minimum-zoom=18 --projection=EPSG:3857 --force --output mbtiles/18/`basename ${f} .laz`.mbtiles --no-tile-size-limit --no-feature-limit; done\nmkdir mbtiles/17\nfor f in tile/*.laz; do Z=17 BASENAME=`basename ${f} .laz` ruby 2.rb | pdal pipeline --stdin | Z=17 ruby 3.rb | tippecanoe --maximum-zoom=17 --minimum-zoom=17 --projection=EPSG:3857 --force --output mbtiles/17/`basename ${f} .laz`.mbtiles --no-tile-size-limit --no-feature-limit; done\nmkdir mbtiles/16","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":249,"to":256}}}}],["161",{"pageContent":"mkdir mbtiles/16\nfor f in tile/*.laz; do Z=16 BASENAME=`basename ${f} .laz` ruby 2.rb | pdal pipeline --stdin | Z=16 ruby 3.rb | tippecanoe --maximum-zoom=16 --minimum-zoom=16 --projection=EPSG:3857 --force --output mbtiles/16/`basename ${f} .laz`.mbtiles --no-tile-size-limit --no-feature-limit; done\nmkdir mbtiles/15\nfor f in tile/*.laz; do Z=15 BASENAME=`basename ${f} .laz` ruby 2.rb | pdal pipeline --stdin | Z=15 ruby 3.rb | tippecanoe --maximum-zoom=15 --minimum-zoom=15 --projection=EPSG:3857 --force --output mbtiles/15/`basename ${f} .laz`.mbtiles --no-tile-size-limit --no-feature-limit; done\n```","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":256,"to":260}}}}],["162",{"pageContent":"merge outputs into one at each zoom level\nAs we went through the resampling process, I think now we can marge output mbitles.\nFirst, we will merge mbtiles at each zoom level.\n```bash\ntile-join -pk -o mbtiles/compile-19.mbtiles mbtiles/19/*.mbtiles\ntile-join -pk -o mbtiles/compile-18.mbtiles mbtiles/18/*.mbtiles\ntile-join -pk -o mbtiles/compile-17.mbtiles mbtiles/17/*.mbtiles\ntile-join -pk -o mbtiles/compile-16.mbtiles mbtiles/16/*.mbtiles\ntile-join -pk -o mbtiles/compile-15.mbtiles mbtiles/15/*.mbtiles","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":262,"to":270}}}}],["163",{"pageContent":"Ok, now, we can roughly see the size of the voxel tiles for each zoom level.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/166dae02-a222-9255-cd03-eb5411819382.png)\nThe source LAZ data was **5,574,559KB**. At zoom level 19, where the voxel spacing is 1 meter, it is about 1 GB, and I think this is still large. Although it is 2 meter voxel, at zoom level 18, I thik about 230MB is pretty good for overview the data. I can continue my work at 1 meter voxel, but in order to host them in GitHub page, I will continue with ZL 18 and smaller.","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":273,"to":275}}}}],["164",{"pageContent":"Making pbf tiles from mbtiles\nIn order to host vector tile in static way, we will convert mbtiles into (zxy folder structured) pbf. I think we can do this with tile-join. By converting into pbf, although we can host them easily, the data size will be bigger.\n\n```bash\ntile-join -pk -pC -e  pbf/zxy18 mbtiles/compile-18.mbtiles\ntile-join -pk -pC -e  pbf/zxy17 mbtiles/compile-17.mbtiles\ntile-join -pk -pC -e  pbf/zxy16 mbtiles/compile-16.mbtiles\ntile-join -pk -pC -e  pbf/zxy15 mbtiles/compile-15.mbtiles","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":278,"to":285}}}}],["165",{"pageContent":"We have pbf tiles like this.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/00205229-0733-b47d-c28d-0b1dffa50a24.png)\n\nOh, I found that the total size for ZL18 now exceeds 1GB while it was about 230MB in mbtiles format. It is well expected.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0b167e8f-b4c0-0536-2496-72b115d55bb2.png)\n\n\nSo, I created voxel tile set from ZL 17 to 15 like this (at ZL17, voxel spacing is 4 meter). Its total size is 315MB.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/1cbbcf0c-4a83-16fd-2752-14097d22767a.png)\n\nFYI, if I include all like below, its total size is **4.83GB**. Not good for easy hosting...\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/08260a8a-a05a-56e6-3e95-f374dbb85a34.png)","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":288,"to":299}}}}],["166",{"pageContent":"Step 6. Hosting\nI enabled GitHub page, and uploaded the files at docs folder. This time, we use MapLibre as the map library.\nFor detail, please check https://github.com/ubukawa/voxel-2/tree/main/docs\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f7b92c8f-0440-633f-70f1-08338168182d.png)\n\n# Result\nDue to the file size constrain, I just uploaded the voxel tile of up to 4 meters at ZL 17. You can see it here https://ubukawa.github.io/voxel-2/index.html\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b94a8ef7-e616-7727-e221-14d5b53c1126.png)","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":302,"to":309}}}}],["167",{"pageContent":"Future issue\nI want to know how we can remove the terrain offset for certain layers when I overlay over the 3D terrain model with MapLibre GL JS.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/def41976-5e13-6491-cfe5-8e8a9f40774f.png)\n\n\n# Acknowledgement\nThank you Steve V. M. for sharing your sample data. Thank you @hfu for developing this method.\n\n\n# Reference\n* PDAL https://pdal.io/en/stable/index.html\n* MapLibre GL JS https://github.com/maplibre/maplibre-gl-js\n* How to create voxel tiles (in Japanese) at YouTube (by Furuhashi Lab. and @hfu  ) https://www.youtube.com/watch?v=LrDk0VFodTE\n* OpenDroneMap https://www.opendronemap.org/\n* optgeo/kid-c https://github.com/optgeo/kid-c\n* Making Voxel tiles from LAZ using pdal and Tippecanoe https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","metadata":{"source":"https://qiita.com/T-ubu/items/87befeb59299fe621daa","title":"(Record) Making Voxel tiles from point cloud LAZ data using pdal and tippecanoe - trial 2　(thumbnail for OpenDroneMap data)","tags":"MapLibre PointCloud vectortile OpenDroneMap","author":"T-ubu","slide":"false","loc":{"lines":{"from":311,"to":326}}}}],["168",{"pageContent":"# Introdution\nI have developed voxel tile from a point cloud data (LAZ) format. This is a record of my work.\n\n\n# Envrionment\n* Windows 10 Enterprise\n* Docker version 20.10.8\n\n\n# Procedure\n\n## Step 1: Starting Docker container\nBecause we need some software for the data conversion, let's use Docker. For window's user, it is sometimes hard to use the vector tile conversion tool, Tippecanoe, in their local environment, so it would be easier to use Docker container to do the conversion.\n\nWe have unvt/voxel image, so we can use it if needed.\n\n```bash\ndocker pull unvt/voxel\ndocker run -it --rm -v ${PWD}:/data unvt/voxel\ncd /data\n```","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":21}}}}],["169",{"pageContent":"Step 2: Reprojection to the web mercator projection and export to LAS file\nAs the source data is in LAZ format and its projection is UTM17 (EPSG:32617), we will reproject it and save it as LAS file. We will use the pdal (PDAL - Point Data Abstraction Library) with some help from ruby (note: ruby is an open source programming language).\n\nI prepared 1.rb and constant.rb for reprojection using pdal. The constants.rb includes some other constants for our future work. \n\n```ruby:1.rb\n# for reprojection. \nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nbasename = ENV['BASENAME']\nsrc_path = \"#{TMP_DIR}/#{basename}.laz\"\ndst_path = \"#{TMP_DIR}/#{basename}-3857.las\"\n\npipeline = <<-EOS\npipeline: \n  - \n    filename: #{src_path}\n    type: readers.las\n    spatialreference: \"EPSG:32617\"\n  -\n    type: filters.reprojection\n    out_srs: \"EPSG:3857\"\n  -\n    type: writers.las\n    filename: #{dst_path}\nEOS\n\nprint JSON.dump(YAML.load(pipeline))","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":23,"to":52}}}}],["170",{"pageContent":"```ruby:consants.rb\nSKIP = true\n\nTMP_DIR = 'src'\nZ_ONE_METER = 19\nBASE = 2\n\nMAXZOOM = 19\nMINZOOM = 10\nMINCOPYZOOM = 10\n\nLAYER = 'voxel'\n```\n\n```bash\nBASENAME=tappan ruby 1.rb | pdal pipeline --stdin\n```","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":55,"to":71}}}}],["171",{"pageContent":"Step 3: Resampling\nI made 2.rb for resmpling the input data with pdal. Because I defined Z-ONE_METER as 19 in the constraints.rb, the spacing will be 1 meter at the zoom level 19. (The spacing will be larger in smaller zoom level. e.g 2 meter at ZL18, 4 meter at ZL 17, etc.)\n\n\n```ruby: 2.rb\nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nz = ENV['Z'].to_i\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nbasename = ENV['BASENAME']\nsrc_path = \"#{TMP_DIR}/#{basename}-3857.las\" #unless File.exist?(src_path)\ndst_path = \"#{TMP_DIR}/#{basename}-#{z}.las\"\n$stderr.print \"#{spacing}m for #{dst_path} from #{src_path}\\n\"\n\npipeline = <<-EOS\npipeline: \n  - \n    filename: #{src_path}\n    type: readers.las\n  -\n    type: filters.voxelcenternearestneighbor\n    cell: #{spacing}\n  -\n    type: writers.text\n    format: csv\n    filename: STDOUT\nEOS\n\nprint JSON.dump(YAML.load(pipeline))","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":74,"to":104}}}}],["172",{"pageContent":"Then, run the pdal as below. Because the output is not piped into a vector tile conversion tool, tippecanoe, we just see the result as the stdout. It seems that their RGB is also properly extracted.\n\n```bash\nZ=19 BASENAME=tappan ruby 2.rb | pdal pipeline --stdin\n```\nWe can see that coordinates are in the web mercator, and spacing of each voxel is one meter. We can also see that the values for RGB appear at the end of the row. Please check their order so that we can use them at the following step (This case, they are 13th, 14th and 15th.).\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/a34f8e95-3e39-2bbf-2020-d3c2db3db5b2.png)","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":107,"to":113}}}}],["173",{"pageContent":"Step 4: Adjustment for VT conversion\nBecause the vector tile conversion tool, Tippecanoe, reads GeoJSON as input, we will edit the previous result for that format. In addtion, we develop the data structure for each recortd to be converted as vector tile.\n\n```ruby: 3.rb\nrequire './constants'\nrequire 'yaml'\nrequire 'json'\n\nz = ENV['Z'].to_i\nminzoom = (z == MINZOOM) ? z  : MINCOPYZOOM\nmaxzoom = z\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nn = 0","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":115,"to":127}}}}],["174",{"pageContent":"z = ENV['Z'].to_i\nminzoom = (z == MINZOOM) ? z  : MINCOPYZOOM\nmaxzoom = z\nspacing = (BASE ** (Z_ONE_METER - z)).to_f\nn = 0\n\nfirst = true\nstart_time = Time.now\nwhile gets\n  if first\n    first = false\n    next\n  else\n    n += 1\n  end\n  r = $_.strip.split(',')\n  x = r[0].to_f - r[0].to_f % spacing\n  y = r[1].to_f - r[1].to_f % spacing\n  h = r[2].to_f - r[2].to_f % spacing\n  h = h.to_i\n  color = '#' + r[13..15].map{|v| sprintf('%01x', v.to_i )}.join\n  g = <<-EOS\ntype: Polygon\ncoordinates: \n  -\n    -\n      - #{x}\n      - #{y}\n    -\n      - #{x + spacing}\n      - #{y}\n    -\n      - #{x + spacing}\n      - #{y + spacing}\n    -\n      - #{x}\n      - #{y + spacing}\n    -\n      - #{x}\n      - #{y}\n  EOS\n  g = YAML.load(g)\n  f = <<-EOS\ntype: Feature\nproperties: \n  color: '#{color}'\n  h: #{h}\n  spacing: #{spacing}\ntippecanoe:\n  minzoom: #{minzoom}\n  maxzoom: #{maxzoom}\n  layer: #{LAYER}\n  EOS\n  f = YAML.load(f)\n  f[:geometry] = g\n  print JSON.dump(f), \"\\n\"\nend","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":127,"to":183}}}}],["175",{"pageContent":"def hms(s)\n  min, sec = s.to_i.divmod(60)\n  hour, min = min.divmod(60)\n  \"%02d:%02d:%02d\" % [hour, min, sec]\nend\n\n$stderr.print \"\\n[#{z}] #{hms(Time.now - start_time)}s\\n\"","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":185,"to":191}}}}],["176",{"pageContent":"```bash\nZ=19 BASENAME=tappan ruby 2.rb | pdal pipeline --stdin | Z=19 ruby 3.rb\n```\nThen, you can confirm the geojson output as stdout. This will be forwarded to Tippecanoe at the next stage.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/cfbf3b7f-9533-96e1-253e-f8e671b1524d.png)","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":194,"to":198}}}}],["177",{"pageContent":"Step 5. Vector tile conversion\nThen, we forward the result from the previous step into Tippecanoe by using pipe funciton. You can do it by just running the following command.\n\n```\nZ=19 BASENAME=tappan ruby 2.rb | pdal pipeline --stdin | Z=19 ruby 3.rb | tippecanoe --maximum-zoom=19 --minimum-zoom=19 --projection=EPSG:3857 --force --output out-19.mbtiles --no-tile-size-limit --no-feature-limit\n```\nThe, you will get the vector tile in mbtiles format.\n\n## Step 6. From mbtiles to pbf format\nWe convert the mbtiles file into pbf files so that we can host them via GitHub page.\n\n```\ntile-join --force --output-to-directory=docs/voxel --no-tile-size-limit --no-tile-compression output.mbtiles\n```","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":200,"to":213}}}}],["178",{"pageContent":"Step 7. Hosting voxel tiles\nUsing MapLibre GL JS, we can create a web map like this.\n\nhttps://ubukawa.github.io/tappanSQ/index3.html#15.56/41.293028/-82.216623/85.2/44\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8dd593a0-f69c-dd66-6b27-6c31b9d47f70.png)\n\nI do not explain how we can create such webmap, but you can check necessary files for the hosting from here: https://github.com/ubukawa/tappanSQ/tree/main/docs\n\n# Acknowledgement\nI thank Steve V. M. for sharing the test data.\n\n# References\nhttps://pdal.io/en/stable/\n\nhttps://github.com/ubukawa/tappanSQ","metadata":{"source":"https://qiita.com/T-ubu/items/1a0cd7363b8f93de8821","title":"Making Voxel tiles from LAZ using pdal and Tippecanoe","tags":"PointCloud vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":215,"to":229}}}}],["179",{"pageContent":"# Introduction\nBoth the MapLibre GL JS and Mapbox GL JS consume RGB elevation tiles to create 3D terrain maps or hillshade. We can of course use some exisitng RGB elevation tiles, but here I would like to introduce how I made RGB elevation tile from a public domain DEM (SRTM from USGS) for my area of interest.\n\n:::note\n2022-10-31 Additional note \nThis article was with SRTM. However, there would be some void areas in paticular mountaion area with SRTM.\nYou may want to try NASADEM, which is based on SRTM, ASTER G-DEM and ALOS DEM.\nHere is the link to my other trial　https://qiita.com/T-ubu/items/c7bb5697b51f245ef163\n:::\n\n# My environment\n* Windows 10 Enterprise\n* Docker version 20.10.8\n* PowerShell version 5.1.19041.1237\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":16}}}}],["180",{"pageContent":"Step 1: SRTM download from USGS\n\nI visited [USGS EarthExplorer](https://earthexplorer.usgs.gov/) and downloaded SRTM 1 arc second DEM in tiff format. For the area of my interest, I downloaded the following 10 files from w80 to w75 and from n42 to n44. It is the area around the Niagara Falls and the Finger Lakes.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f9d80e54-cbb2-f8d4-d60b-7db41f591879.png)\n\nThen, I stored the files in \"src\" directory of my working place.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/6fe973ca-af70-2be9-382b-59baab11a179.png)\n\n\nFYI, if you want to download more file all at once, try bulk download. I also tried for my other project: https://qiita.com/T-ubu/items/bb353935085eec2ab7a0","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":17,"to":26}}}}],["181",{"pageContent":"Step 2: Run a Docker container to use various tools\nDuring this work, we need to use various geospatial tools namely gdal_merge.py, rasterio, and mb-util. In order to easily use them, let's use a Docker image and work on that Docker container. I have pushed my docker container as unvt/rgbify:ubukawa. So, we can pull it and run as below. Make sure that we will connecto our local working directory within the docker container (/data).\n\n```bash\ndocker pull unvt/rgbify:ubukawa\ndocker run -it --rm -v ${PWD}:/data unvt/rgbify:ubukawa\ncd /data\n```","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":28,"to":35}}}}],["182",{"pageContent":"Step 3: Merging the DEM as a single input file\nIf the total size of your files are not so large, let's merge them all to create a single input file. You can do it with gdal_merge.py as follows.\n\n```bash\ngdal_merge.py -o input.tif src/*.tif\n```\nYou will see the progress like this figure.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/fdf935ac-9276-2ecb-ecb4-ddf31bbd536f.png)\n\n(Note for Advanced users)\nFrom my experience, if the total size of your SRTM data is greater than a few GB, it would be a good idea to prepare separate input files. When I worked for the whole SRTM data, I made 932 inputs files from 14,277 SRTM files (I used the ZL6 tile extent to devide the input). If you are interested in, use translator and check this text: https://qiita.com/T-ubu/items/a90c3d42f809725f50ab.","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":37,"to":47}}}}],["183",{"pageContent":"Step 4: Creating RGB elevation tile\nYou can run raterio tool in our container. Just run the following command to obtain RGB elevation tile from the merged input. You can adjust the max zoom and min zoom if needed, but given the original resolution, I think the max zoom would be 12 or 13.\n\n```bash\nrasterio rgbify -b -10000 -i 0.1 --max-z 12 --min-z 9 --format webp input.tif out.mbtiles\nmb-util out.mbtiles zxy\n```\nWith the above command, we created the mbtiles first and extend it to zxy directory using mb-util. Now, you have the RGB elevation tiles like this.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/812d6dd3-04df-58e4-4bbb-1231a9e2c3df.png)\n\nThen, congratulations. You now have the RGB elevation tile in zxy structure (png).\n\n# Summary\nThis articile shows how I made a RGB elevation tile from SRTM DEM for my area of interest.","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":50,"to":63}}}}],["184",{"pageContent":"Then, congratulations. You now have the RGB elevation tile in zxy structure (png).\n\n# Summary\nThis articile shows how I made a RGB elevation tile from SRTM DEM for my area of interest.\n\n# Acknowledgement\nI thank USGS for providing such wonderful earth observation data sets.\nI also thank the developers of the tools, which enables me to get a good result in an open source way. \n\n# References \nhttps://earthexplorer.usgs.gov/\n\nhttps://github.com/mapbox/rio-rgbify\n\nhttps://gdal.org/programs/gdal_merge.html\n\nhttps://github.com/ubukawa/rgbify\n\nhttps://github.com/unvt/rgbify","metadata":{"source":"https://qiita.com/T-ubu/items/09720f25d5278d85222c","title":"RGB elevation tile creation from SRTM data (1 arc sec from USGS)","tags":"MapLibre DEM unvt mapbox","author":"T-ubu","slide":"false","loc":{"lines":{"from":63,"to":81}}}}],["185",{"pageContent":"# Introduction\nI would like to demonstrate how we can create a webmap with MapLibre GL JS. The main target of this text is for the beginners.\n\nThis document will explain:\n- How we create a simple 2D webmap with MapLibre GL JS from existing vector tile and style\n- How we exmapnd 2D map to a terrain 3D map with existing RGB elevation tiles.\n\nbut it will not explain:\n- How we create vector tiles\n- Howe we develop RGB raster tiles\n- How we develop map styles\n- How we prepare text fonts (glyphs) or map symbols (sprite)\n\nFor the issues I do not explain here, I have another materials, so please feel free to visit my GitHub repository or my speaker deck.\n\nhttps://speakerdeck.com/ubukawa\n\n## Note added on 2022-09-22\nWe have YouTube movie for this hands-on.\n\nhttps://www.youtube.com/watch?v=jFlSooPNqOA\n\n\n# Environment\nMy working environment is as follows:\n* Windows 10 Enterprise\n* Windows PowerShell\n* Page hosting via GitHub page\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":30}}}}],["186",{"pageContent":"Step 1: Making a GitHub repository\nCreate a repository for this practice. I have created a repository here:\nhttps://github.com/ubukawa/practice-bm\n\nThen, let's create a \"docs\" directory to store the files for web hosting, and move there.\n\n```\nmkdir docs\ncd docs\n```","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":31,"to":40}}}}],["187",{"pageContent":"Step 2: Getting the latest MapLibre GL JS\nLet's check the latest version of MapLibre GL JS here https://github.com/maplibre/maplibre-gl-js. As of the 13th September 2022, the latest version is 2.4.0. Then, get these files from unpkg.org with the following command in the PowerShell. Let's also get the license text from maplibre.\n\n\n```\nmkdir maplibre-gl@2.4.0\ncd maplibre-gl@2.4.0\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js.map\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css\ncurl.exe -O https://raw.githubusercontent.com/maplibre/maplibre-gl-js/main/LICENSE.txt\ncd ..\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/2a27960f-4899-4700-a2a1-71b6fbfc6167.png)\n\nYou will have files as below.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/429fe952-6182-ff17-04fc-e1b7b89463ed.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":42,"to":58}}}}],["188",{"pageContent":"Step 2: Consider map styles\nIf you are getting familiar with the MapLibre/Mapbox webmaps, you can freely design map style by writing **style.json** (or json file with any other name) following the MapLibre/Mapbox style specification.\n* https://maplibre.org/maplibre-gl-js-docs/style-spec/\n* https://docs.mapbox.com/mapbox-gl-js/style-spec/\n\nA style json generally has rich information on the map styling, I mean style layers information. In addition, I think it is important to understand that a tyle json has information on:\n* data source (vector, raster, WMS, etc..),\n* map symbol (sprite),\n* text font (glyphs),\n* and others\n\nThis time, let's use **existing style file (json format)** for easy understanding. From my past practice, I have three different styles as below.","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":60,"to":71}}}}],["189",{"pageContent":"This time, let's use **existing style file (json format)** for easy understanding. From my past practice, I have three different styles as below.\n\n* Small scale vector tile map from NaturalEarth\n    * https://ubukawa.github.io/vt-test/maps/test-simple.json\n* Vector tile map from OSM with SRTM DEM at around New York City \n    * https://ubukawa.github.io/practice-bm/srtm.json\n* Vector tile map from OSM (without DEM) \n    * https://ubukawa.github.io/osm-neighbor/style.json","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":71,"to":78}}}}],["190",{"pageContent":"Step 3: Preparing html file\nNow, we have 1) a map library, that is MapLibre GL JS, and 2) style information that is confirmed at the previous step. So, let's make a html file to draw a webmap.\n\nUnder the \"docs\" directory, where is the root of the GitHub page, let's create a \"map1.html\" as below.\n\n```html:map1.html\n\n\n\n\nDisplay a map - Practice 1\n\n\n\n\n    body { margin: 0; padding: 0; }\n    #map { position: absolute; top: 0; bottom: 0; width: 100%; }\n\n\n\n\n\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle: 'https://ubukawa.github.io/vt-test/maps/test-simple.json', // style URL\n//center: [140.084556, 36.104611], // you can specify starting position if you want [lng, lat]\n//zoom: 7, // starting zoom\n//maxZoom: 4, // min zoom\nmaxZoom: 14 // max zoom of the map\n});","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":81,"to":110}}}}],["191",{"pageContent":"//UI\nmap.addControl(new maplibregl.NavigationControl(), 'bottom-right');\nmap.addControl(new maplibregl.GeolocateControl({positionOptions: {enableHighAccuracy: true},trackUserLocation: true}), 'top-right');\nmap.addControl(new maplibregl.ScaleControl() );\n\n//debug\n//map.showTileBoundaries = true;\n//map.showCollisionBoxes = true;\n\n\n\n``` \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8106e27c-0779-80f3-8bcf-a6b806a80522.png)\nOnce you make it, please push your edit to your GitHub repository.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ed70f972-4863-5232-8e65-64c2fdcfe440.png)\n\nDon't forget to enable GitHub page at your repository.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/3d07bb81-a779-7635-a0ba-844251181bdc.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":112,"to":129}}}}],["192",{"pageContent":"Don't forget to enable GitHub page at your repository.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/3d07bb81-a779-7635-a0ba-844251181bdc.png)\n\n\nNow, you will see a map like this. Please note that the boundaries in the map are not authorized by any agencies. We are now refering to the style of a small scale map, but we can change the reference to any other style hosted in the Internet.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8b11a938-0d24-fdd1-7750-6f165199e100.png)\n\nLet's try to change the referred style from the first one to the second one. You just need to slightly edit the style in the **map**. We can also change the maxZoom of the map because the second one is larger map than the first one. Edit it as below, and push it and wait for awhile. It might be a good idea to save the revised file as **map2.html**.","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":129,"to":136}}}}],["193",{"pageContent":"```html:Part of map2.html (in the script at the body)\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle: 'https://ubukawa.github.io/practice-bm/srtm.json', // style URL\nmaxZoom: 19 // max zoom of the map\n});\n```\nThen, you will see the map like this. This map is based on the vector tile converted from OSM data, and hillshade, derived from RGM elevation tile converted from SRTM 1 sec DEM, is added for certain area. I did not upload the RGB elevation tile for the whole area, so you will find the area with hillshade is limited.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/6d6b4f7a-90ea-c771-9547-ae59ec3aa1b3.png)\n\nThese styles with **raster-dem** source are ready to go for **terrain 3D expression** by MapLibre.","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":138,"to":148}}}}],["194",{"pageContent":"Step 4: Create a webmap with terrain 3D expression\nBefore making a 3D terrain map, please make sure **that you have proper raster-dem source**. If you have any suitable RGB elevation source in the style file, it is perfect. It is also possible to separately add the RGB elevation source within a html's script.","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":150,"to":151}}}}],["195",{"pageContent":"Case 1: Adding the source and setting the terrain within html script\nLet's copy map2.html as map3.html. Then, let's add **map.addSource** to add a terrain source and **map.setTerrain** to set the terrain 3D. Let's add the followings to the map3.html","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":153,"to":154}}}}],["196",{"pageContent":"```html:part of map3.html (after var map is defined)\n//for 3D terrain\nmap.on('load', () => {\n map.addSource(\"terrain3D\",{\n   \"type\": \"raster-dem\",\n   \"tiles\": [\"https://ubukawa.github.io/srtm-rgb-nyc/zxy/{z}/{x}/{y}.png\"],\n   \"attribution\": \"RGB Elevation from SRTM DEM - 1 second (USGS)\",\n   \"tileSize\": 256,\n   \"maxzoom\": 12,\n   \"minzoom\": 4\n });\n map.setTerrain({\n   source: \"terrain3D\",\n   exaggeration: 1\n });\n});\n```\nLet's also add maxPitch (to 85) and hash setting to the map so that we can handle map easily. Please see below.\n```\nvar map = new maplibregl.Map({\ncontainer: 'map', // container id\nstyle: 'https://ubukawa.github.io/practice-bm/srtm.json', // style URL\nmaxZoom: 19, // max zoom of the map\nmaxPitch: 85,\nhash: true\n});\n```\nYou can see the actual html and demo site from:\nhtml: https://github.com/ubukawa/practice-bm/blob/main/docs/map3.html\ndemo: https://ubukawa.github.io/practice-bm/map3.html","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":156,"to":185}}}}],["197",{"pageContent":"Now, because we enable hash, you can see the zoom level, lat, long, nearing, and pitch as the URL path. \n\nFor example, you can see the Bear Mountain and Hessian Lake in New York States here: https://ubukawa.github.io/practice-bm/map3.html#16.18/41.31329/-73.993859/-60.1/74\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ba03a794-bf66-0408-0322-52c1192fb5ac.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":187,"to":190}}}}],["198",{"pageContent":"Case 2: Adding the source and setting the terrain in style file\nInstead of adding the source and setting the terrain in html script, we can also define them in the style file. Let's copy the original style file to edit and save in your repository.\n\n* original: https://ubukawa.github.io/practice-bm/srtm.json\n* edited style:  https://ubukawa.github.io/practice-bm/srtm-3d.json\n\nThe edited style only have an additional source for terrain, and terrain setting. And, by simply referring to this style, we can create a 3D map. (You do not have to add map.on function here.)\n\nhtml: https://github.com/ubukawa/practice-bm/blob/main/docs/map4.html\ndemo: https://ubukawa.github.io/practice-bm/map4.html\n\nYou may see the same map with the previous case.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e4502f5a-9e12-e7be-f592-9d9102874749.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":192,"to":204}}}}],["199",{"pageContent":"some note on 3D terrain:\nBecause the MapLibre GL JS is derived from Mapbox GL JS version 1.X, regarding the basic map creation, you can do the almost same things with Mapbox GL JS and Mapbox GL JS. However, the terrain 3D expression is somehow different between MapLibre and Mapbox due to the change of the license of the Mapbox's license after its version 2.0. \n\n# One more practice: Plug-in\nI got a request of using a comparing tool, so let's quickly go through \"maplibre-gl-compare\" plug-in. \n\nhttps://github.com/maplibre/maplibre-gl-compare","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":209,"to":215}}}}],["200",{"pageContent":"Preparation of the maps to compare\nHere, I have prepared two maps for the comparison.\n* Map 1 style: Vector tile map from OSM (without DEM) \n    * https://ubukawa.github.io/osm-neighbor/style.json\n* Map 2 style: Raster tile from Sentinel 2 imagery  \n    * https://ubukawa.github.io/practice-bm/style-sentinel-ny.json\n\nWe have the following two maps with the above two styles.\nhttps://ubukawa.github.io/practice-bm/comp-map1.html\nhttps://ubukawa.github.io/practice-bm/comp-map2.html\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/03b8e2e1-0adb-061f-b83b-0eb13690d01a.png)\nIf you want to know how to develop Sentinel 2 raster tile with FOSS4G tool, I have another article here (in Japanese. Use translator): https://qiita.com/T-ubu/items/de0d30e0f2bdcd72ee8a","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":217,"to":228}}}}],["201",{"pageContent":"Downloading \"maplibre-gl-compare\"\nLet's get the plug-in files from https://github.com/maplibre/maplibre-gl-compare. We will use maplibre-gl-compare.js, maplibre-gl-compare.css, and license.txt, but cloning whole repository woudl be easier. Let's run \"git clone\" at your docs directory.\n\n```\ngit clone https://github.com/maplibre-maplibre-gl-compare\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/d109f6ab-bbdc-ef36-0a3d-165ad0be7e69.png)\n\nThen, you will have JS and CSS files under \"maplibre-gl-compare/dist\" directory.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/2ea97de2-5309-de9b-0926-36828c91a446.png)\n\nThen, keep the \"dist\" directory and the license.txt, and delete other files.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/99826b0a-b806-8ffc-bb27-130fa4aaabec.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":231,"to":243}}}}],["202",{"pageContent":"Preparing a html file to compare\nReferring to some example, we can create a simple comparison map as below:\n\n\n```html:comp-map.html\n\n\n\n\nDisplay a map - map for compare\n\n\n\n\n\n\n    body { margin: 0; padding: 0; overflow: hidden; }\n    body * {webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }\n    .map { position: absolute; top: 0; bottom: 0; width: 100%; }\n    .controls { position: absolute; top: 0; right: 0; }\n\n\n\n \n   \n   \n \n\nvar map1 = new maplibregl.Map({\n  container: \"map1\",\n  style: \"https://ubukawa.github.io/osm-neighbor/style.json\",\n  zoom: 9,\n  center: [-73.8128, 40.8513], // center [lng, lat]\n  maxZoom: 0, // min zoom\n  maxZoom: 16, // max zoom\n  hash: true\n});\n\nvar map2 = new maplibregl.Map({\n  container: \"map2\",\n  style: \"https://ubukawa.github.io/practice-bm/style-sentinel-ny.json\",\n  zoom: 9,\n  center: [-73.8128, 40.8513], // center [lng, lat]\n  maxZoom: 0, // min zoom\n  maxZoom: 16, // max zoom\n  hash: true\n});","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":246,"to":292}}}}],["203",{"pageContent":"var wrapperSelector = \"#wrapper\";\nvar wrapperElement = document.body.querySelectorAll(\"#wrapper\")[0];\n\nvar options = {\n  mousemove: false, \n  orientation: \"vertical\", //horizontal \n};\n\nvar map = new maplibregl.Compare(\n  map1,\n  map2,\n  wrapperSelector,\n  options\n);\n\nmap1.addControl(new maplibregl.ScaleControl(), 'bottom-left' );\nmap1.addControl(new maplibregl.NavigationControl(), 'bottom-left');","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":294,"to":310}}}}],["204",{"pageContent":"I noticed the followings things when I worked on the above file.\n* Reference to the maplibre-gl-compare.js and maplibre-gl-compare.css are added.\n* style for body *, .map are added. (I omitted the controls, but keep .control in the style.)\n* Instead of \"map\", \"wrapper\" div is used and it includes the map1 and map2, which are the maplibre.Map.\n* Elements of the map1 and map2 are difined. It would be good to use a common set of parameters to avoid confusion.\n* There are some options for maplibregl.Compare. We could explore them in the future.\n* control elements are added to the map1, not wrapper. I have not yet tested to add controls to the wrapper though. \n\nYou will see a map like this.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/35c6707d-c01d-2fc5-3290-7fc16fde65c3.png)","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":318,"to":327}}}}],["205",{"pageContent":"You will see a map like this.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/35c6707d-c01d-2fc5-3290-7fc16fde65c3.png)\n\nYou can see the area around the Bear Mountain at: https://ubukawa.github.io/practice-bm/comp-map.html#13.62/41.31192/-73.99523\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/88ac91b2-1054-02de-444a-65365f2f7bc1.png)\n\nCongratulation. This is the end of our practice.\n\n\n\n# Summary\nThus, we can create a webmap with 3D terrains powered by MapLibre. We also can try a simple comparison plugin.\n\n\n# References\n\nhttps://www.maptiler.com/news/2022/05/maplibre-2/\n\nhttps://github.com/maplibre/maplibre-gl-js","metadata":{"source":"https://qiita.com/T-ubu/items/ce988005955da637ab06","title":"(For beginner) Guidance on Making a 3D webmap with MapLibre GL JS","tags":"unvt MapLibre vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":327,"to":345}}}}],["206",{"pageContent":"# Introduction\nPreviously, I have developed a webmap with Mapbox GL JS version 1.x and its plugings. These years, because the MapLibre GL JS is growing, I would like to try to make a web map with MapLibre and its plugins. I took note of my work for our future reference.\n\n# My environment\n* Windows 10\n* PowerShell (PSVersion 5.1.190041.1682)\n\n# Implementation of plugins\nFor testing purpose, I created [a GitHub repository](https://github.com/ubukawa/libre-plugin) and tested plugins. \nFor easy implementation and demonstration purpose, I try **NOT using** \"import\", and I did not use webpack to complie javascripts at this stage. So you can easily follow the each procedure written in this memo.","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":10}}}}],["207",{"pageContent":"Preparation 1: Creating GitHub repository\nFor this work, I have created https://github.com/ubukawa/libre-plugin as a working repository. My docker does not start these days, so I decided to use my PowerShell for running command, and to use GitHub page for web hosting, rather than using local hosting with nodejs or budo.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ba2a4f81-712b-18c6-40f4-eda2df9f7a29.png)\n\n\n\n## Preparation 2: Preparing MapLibre GL JS\nI made a docs directory for web hosting, and downloaded the latest MapLibre GL JS and its license in it with the following command.\n\n```\nmkdir docs\ncd docs\nmkdir maplibre-gl@2.4.0\ncd maplibre-gl@2.4.0\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js.map\ncurl.exe -O https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css\ncurl.exe -O https://github.com/maplibre/maplibre-gl-js/blob/v2.4.0/LICENSE.txt\ncd ..\n```","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":12,"to":31}}}}],["208",{"pageContent":"Preparing the styles\nThis time, for testing map, I decided to use some exisitng styles from my past tests. I wanted to try with the style switcher, so I copied two styles.\n\n```\ncurl.exe -O https://ubukawa.github.io/plugs/std.json\ncurl.exe -O https://ubukawa.github.io/plugs/std-photo.json\n```\n\n## Preparation 3: Enabling GitHub page\nNow, the docs directory works for the GitHub page. (I changed the setting as below.)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5f3d36f4-2fcc-d50f-06b4-911080bd83eb.png)\n\n## Preparation 4: Making a simle map by MapLibre\nI made a simple html to host a simple web map. \nDemo: https://ubukawa.github.io/libre-plugin/map01.html\nHTML: https://github.com/ubukawa/libre-plugin/blob/main/docs/map01.html\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/9eff9d6a-6ed9-9d00-8a70-e7e68271d728.png)","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":32,"to":48}}}}],["209",{"pageContent":"Plugin 1: Adding maplibre-gl-export\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4abe8abd-bf0a-5804-3471-833351b32a48.png)\nBy using this plugin, we can export the map as an image. I think this plugin is relased from watergis and its latest version is v.1.3.6 as of 2 September 2022.\nhttps://github.com/watergis/maplibre-gl-export/releases/tag/v1.3.6\n\nWe can just add css and js in the header, and add a MapLibreExportControl as map.addContorol. \n\n```html:some part from map02.html\n...\n\n\n...\n\n\n\n\n\n...\n\n...\nmap.addControl(new MaplibreExportControl({\n  PageSize: Size.A4,\n  PageOrientation: PageOrientation.Portrait,\n  Format: Format.PNG,\n  DPI: DPI[96],\n  //Crosshair: true,\n  PrintableArea: true,\n  Local: 'en'\n}), 'top-right');","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":51,"to":79}}}}],["210",{"pageContent":"You can see the html example here:\nDemo: https://ubukawa.github.io/libre-plugin/map02.html\nHTML: https://github.com/ubukawa/libre-plugin/blob/main/docs/map02.html\n\n\nPlease be advised that the maplibre-gl-export (as of v.1.3.6) does not work well with MapLibre 3D terrain.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8edb5590-b6db-f198-de85-d870ebfd0701.png)","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":85,"to":91}}}}],["211",{"pageContent":"Plugin 2: Adding a style switcher\nThis is a function to switch the base map, or I mean switching the style of the base map.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e2df04df-3409-bc3d-7745-f4ee8d821f12.png)\n\nThere is a famous style switcher, el/style-switcher, developed for Mapbox GL JS, and the earlier version of MapLibre GL JS can use it. However, the latest version of MapLibre GL JS may not be able to use it. (Please see the following issues.)\n\nhttps://github.com/el/style-switcher/issues/14\n\nAs the el's style switcher does not support for the later version of MapLibre after 1.14. I explored how we can realise it. Then, I find that there are some examples of achieving this style switcher function using javascript (see below). MapTiler also provides a good examples.\n\nhttps://github.com/maplibre/maplibre-gl-js/discussions/929\n\nhttps://github.com/optgeo/kid-c/tree/main/docs\n\nhttps://docs.maptiler.com/maplibre-gl-js/control-style-switcher/","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":94,"to":108}}}}],["212",{"pageContent":"https://github.com/maplibre/maplibre-gl-js/discussions/929\n\nhttps://github.com/optgeo/kid-c/tree/main/docs\n\nhttps://docs.maptiler.com/maplibre-gl-js/control-style-switcher/\n\nFrom above examples, I think the following implementation is similar to el/style-switcher, so I will go with it.\n\nhttps://github.com/astridx/maplibreexamples/blob/main/plugins/maplibre-style-switcher.html\n\n\n\nI made a html. I added javascrips and style in the header for MapLibreStyleSwitcherControl, and added a variable \"styles\" and MapLibreStyleSwitcherControl in the script at the body. You can see it from the below URL:\nDemo: https://ubukawa.github.io/libre-plugin/map03.html\nHTML: https://github.com/ubukawa/libre-plugin/blob/main/docs/map03.html","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":108,"to":122}}}}],["213",{"pageContent":"Plugin 3: Legend Control\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/db430bb2-1ae8-9e54-f96f-fcc14c49da39.png)\nThis plugin is also from watergis. We can control the legend, and turn on/off some layers (\"style layers\") with this plugin (note: I specified some raster and hillshade layers in the above figure, but this plugin would work well with vector layers.). https://github.com/watergis/mapbox-gl-legend\n\nI added the following two lines in the header.\n```\n\n\n```\n\nAnd, I added the followings in the body script. \n```\n// for legend control\nconst targets = {\n  'Geology': 'Geological map',\n  'hills': 'Hillshade',\n};\n\nmap.addControl(new MaplibreLegendControl(targets, {\n  showDefault: false, \n  showCheckbox: true, \n  onlyRendered: true,\n  reverseOrder: true\n}), 'top-left');","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":125,"to":148}}}}],["214",{"pageContent":"Demo1: https://ubukawa.github.io/libre-plugin/map04.html\nDemo2: https://ubukawa.github.io/libre-plugin/map04-a.html\nHTML: https://github.com/ubukawa/libre-plugin/blob/main/docs/map04.html \n\nInstead of using \"targets\", we can show the all layers with a line like **map.addControl(new MaplibreLegendControl({}, {reverseOrder: false}), 'bottom-left');**\nA basemap can contain a lot of style layers. So, to show all layer is sometimes difficult.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4d83d442-f888-5bd0-cc36-43aa71e93f05.png)","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":151,"to":157}}}}],["215",{"pageContent":"(FYI) Area Switcher, and other\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/fd62f14b-41eb-a35c-2429-15984405c39d.png)\nAnother my favorite plugin for Mapbox GL JS is \"area switcher\" by watergis. Using the area switcher, we can jump into the specified areas. However, it seems that there is no such plugin available for MapLibre GL JS as of 2 September 2022. So, I gave up installing such function in my map with MapLibre for the time being. \nhttps://github.com/watergis/mapbox-gl-area-switcher\n\nIf you are interested in, you can refer to the plugin lists by Mapbox and MapLibre:\n* https://docs.mapbox.com/mapbox-gl-js/plugins/\n* https://maplibre.org/maplibre-gl-js-docs/plugins/\n\nYou can also read my previous memo below(use translator APP if necessary).\n\nhttps://qiita.com/T-ubu/items/d68c08f74fd96797c800\n\n\n# Summary\nThus, I have demonstrated how we can add several plugins for MapLibre GL JS.","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":159,"to":174}}}}],["216",{"pageContent":"https://qiita.com/T-ubu/items/d68c08f74fd96797c800\n\n\n# Summary\nThus, I have demonstrated how we can add several plugins for MapLibre GL JS.\n\nI just introduced some of my favorite plugins, and this memo dose not cover all plugins.\n\nTo reduce the number of referenced script files, you can use module bundlers such as webpack (nodejs/npm).\n\n# References\n* MapLibre GL JS https://github.com/maplibre/maplibre-gl-js\n* My test repository for this test https://github.com/ubukawa/libre-plugin\n\n*The URLs of the other sources, such as the source of plugins, are written in each chapter.*\n\n# Acknowledgement\nSpecial thanks to those who worked hard to develop these wonderful plugins. In particular, I learned a lot from the work by watergis and Mr. Jin Igarashi. Thank you.","metadata":{"source":"https://qiita.com/T-ubu/items/a311d8516288971005fa","title":"Making a map with MapLibre GL JS - Testing some MapLibre plugins","tags":"MapLibre unvt vectortile","author":"T-ubu","slide":"false","loc":{"lines":{"from":174,"to":191}}}}],["217",{"pageContent":"# Introduction\nMy colleagues have a good contour line data in ArcGIS geodatabase (.gdb) format. I want to make vector tiles from contour lines stored in ArcGIS Geodatabase.\n\nThis article is about my second experiment of vector tile conversion from Esri geodatabase following my previous test written in the previous article. Please refer to my previous test at the following page if needed.\n\nhttps://qiita.com/T-ubu/items/da43f434a6c80b5ac83f\n\nThe previous experiment was done with a geodatabase having a single layer, while the second experiment (this time) will be done with a geodatabase having more than one layer.\n\nI think it will significantly increase work efficiency to divide (clip) source data into certain tile extent prior to data conversion into vector tile. Therefore, I tried data conversion with multiple layers.\n\n\n\n#  My Working Environment\n* nodejs: v16.15.0\n* npm: 8.5.5\n* tippecanoe: v1.36.0\n* GDAL: 3.4.1, released 2021/12/27\n* Platform: Ubuntu 22.04 LTS (built on Docker for windows)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":19}}}}],["218",{"pageContent":"#  My Working Environment\n* nodejs: v16.15.0\n* npm: 8.5.5\n* tippecanoe: v1.36.0\n* GDAL: 3.4.1, released 2021/12/27\n* Platform: Ubuntu 22.04 LTS (built on Docker for windows)\n\n\n\n# Preliminary Test: Comparison of GDAL exporting time to GeoJSONs (by Layers vs by BBOX)\n\n# Data used for the preliminary test 1\nThis time, I worked with the following geodatabase with 16 layers. Each layer contains features in the certain extent (the extent of the zoom level 6 tiles). The layers are prepared my colleague, and she clipped features into these extents.\n![2022-06-29-gdb2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/78e2763c-3333-1c00-95d6-54637c52680b.png)\n\nFor the purpose of the comparison, I also used the gdb files with the same extent but without layer structure (I mean all features in a single layer). \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/3c9d32b4-2a1b-edf5-a0b9-5ad8217b8deb.png)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":19,"to":35}}}}],["219",{"pageContent":"As both gdb files are for the same extent, and their sizes are around **1.4GB** (1.38GB with 16 layers, and 1.37 GB with a single layer.).","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":37,"to":37}}}}],["220",{"pageContent":"Method 1: Specifying by layer\nGiven that layers are already decided, I checked reading time by specifying layer and writing time to GeoJSONs with the following command. (Note: the following script has line changes for easire recognition, while actual script does not have them.)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":40,"to":41}}}}],["221",{"pageContent":"```sh\necho 6-32-20; date; ogr2ogr -f GeoJSONSeq test/6-32-20.geojsons test_area_z6.gdb t_6_32_20; date;\necho 6-32-21; date; ogr2ogr -f GeoJSONSeq test/6-32-21.geojsons test_area_z6.gdb t_6_32_21; date;\necho 6-32-22; date; ogr2ogr -f GeoJSONSeq test/6-32-22.geojsons test_area_z6.gdb t_6_32_22; date;\necho 6-32-23; date; ogr2ogr -f GeoJSONSeq test/6-32-23.geojsons test_area_z6.gdb t_6_32_23; date;\necho 6-33-20; date; ogr2ogr -f GeoJSONSeq test/6-33-20.geojsons test_area_z6.gdb t_6_33_20; date;\necho 6-33-21; date; ogr2ogr -f GeoJSONSeq test/6-33-21.geojsons test_area_z6.gdb t_6_33_21; date;\necho 6-33-22; date; ogr2ogr -f GeoJSONSeq test/6-33-22.geojsons test_area_z6.gdb t_6_33_22; date;\necho 6-33-23; date; ogr2ogr -f GeoJSONSeq test/6-33-23.geojsons test_area_z6.gdb t_6_33_23; date;\necho 6-34-20; date; ogr2ogr -f GeoJSONSeq test/6-34-20.geojsons test_area_z6.gdb t_6_34_20; date;\necho 6-34-21; date; ogr2ogr -f GeoJSONSeq test/6-34-21.geojsons test_area_z6.gdb t_6_34_21; date;","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":43,"to":53}}}}],["222",{"pageContent":"echo 6-34-20; date; ogr2ogr -f GeoJSONSeq test/6-34-20.geojsons test_area_z6.gdb t_6_34_20; date;\necho 6-34-21; date; ogr2ogr -f GeoJSONSeq test/6-34-21.geojsons test_area_z6.gdb t_6_34_21; date;\necho 6-34-22; date; ogr2ogr -f GeoJSONSeq test/6-34-22.geojsons test_area_z6.gdb t_6_34_22; date;\necho 6-34-23; date; ogr2ogr -f GeoJSONSeq test/6-34-23.geojsons test_area_z6.gdb t_6_34_23; date;\necho 6-35-20; date; ogr2ogr -f GeoJSONSeq test/6-35-20.geojsons test_area_z6.gdb t_6_35_20; date;\necho 6-35-21; date; ogr2ogr -f GeoJSONSeq test/6-35-21.geojsons test_area_z6.gdb t_6_35_21; date;\necho 6-35-22; date; ogr2ogr -f GeoJSONSeq test/6-35-22.geojsons test_area_z6.gdb t_6_35_22; date;\necho 6-35-23; date; ogr2ogr -f GeoJSONSeq test/6-35-23.geojsons test_area_z6.gdb t_6_35_23; date;\n```","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":53,"to":61}}}}],["223",{"pageContent":"Method 2: Specifying by BBOX\nAlthough it would need some additional time to clip the feature, I also checked reading/cliping time without layer and writing time to GeoJSONs with the following command. (Note: the following script has line changes for easire recognition, while actual script does not have them.)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":63,"to":64}}}}],["224",{"pageContent":"```\necho 6-32-20; date; ogr2ogr -f GeoJSONSeq test2/6-32-20.geojsons -clipdst 0 52.48278022207821 5.625 55.77657301866769 test_area.gdb ; date;\necho 6-32-21; date; ogr2ogr -f GeoJSONSeq test2/6-32-21.geojsons -clipdst 0 48.922499263758255 5.625 52.48278022207821 test_area.gdb ; date;\necho 6-32-22; date; ogr2ogr -f GeoJSONSeq test2/6-32-22.geojsons -clipdst 0 45.08903556483103 5.625 48.922499263758255 test_area.gdb ; date;\necho 6-32-23; date; ogr2ogr -f GeoJSONSeq test2/6-32-23.geojsons -clipdst 0 40.97989806962013 5.625 45.08903556483103 test_area.gdb ; date;\necho 6-33-20; date; ogr2ogr -f GeoJSONSeq test2/6-33-20.geojsons -clipdst 5.625 52.48278022207821 11.25 55.77657301866769 test_area.gdb ; date;\necho 6-33-21; date; ogr2ogr -f GeoJSONSeq test2/6-33-21.geojsons -clipdst 5.625 48.922499263758255 11.25 52.48278022207821 test_area.gdb ; date;\necho 6-33-22; date; ogr2ogr -f GeoJSONSeq test2/6-33-22.geojsons -clipdst 5.625 45.08903556483103 11.25 48.922499263758255 test_area.gdb ; date;","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":66,"to":73}}}}],["225",{"pageContent":"echo 6-33-22; date; ogr2ogr -f GeoJSONSeq test2/6-33-22.geojsons -clipdst 5.625 45.08903556483103 11.25 48.922499263758255 test_area.gdb ; date;\necho 6-33-23; date; ogr2ogr -f GeoJSONSeq test2/6-33-23.geojsons -clipdst 5.625 40.97989806962013 11.25 45.08903556483103 test_area.gdb ; date;\necho 6-34-20; date; ogr2ogr -f GeoJSONSeq test2/6-34-20.geojsons -clipdst 11.25 52.48278022207821 16.875 55.77657301866769 test_area.gdb ; date;\necho 6-34-21; date; ogr2ogr -f GeoJSONSeq test2/6-34-21.geojsons -clipdst 11.25 48.922499263758255 16.875 52.48278022207821 test_area.gdb ; date;\necho 6-34-22; date; ogr2ogr -f GeoJSONSeq test2/6-34-22.geojsons -clipdst 11.25 45.08903556483103 16.875 48.922499263758255 test_area.gdb ; date;\necho 6-34-23; date; ogr2ogr -f GeoJSONSeq test2/6-34-23.geojsons -clipdst 11.25 40.97989806962013 16.875 45.08903556483103 test_area.gdb ; date;","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":73,"to":78}}}}],["226",{"pageContent":"echo 6-34-23; date; ogr2ogr -f GeoJSONSeq test2/6-34-23.geojsons -clipdst 11.25 40.97989806962013 16.875 45.08903556483103 test_area.gdb ; date;\necho 6-35-20; date; ogr2ogr -f GeoJSONSeq test2/6-35-20.geojsons -clipdst 16.875 52.48278022207821 22.5 55.77657301866769 test_area.gdb ; date;\necho 6-35-21; date; ogr2ogr -f GeoJSONSeq test2/6-35-21.geojsons -clipdst 16.875 48.922499263758255 22.5 52.48278022207821 test_area.gdb ; date;\necho 6-35-22; date; ogr2ogr -f GeoJSONSeq test2/6-35-22.geojsons -clipdst 16.875 45.08903556483103 22.5 48.922499263758255 test_area.gdb ; date;\necho 6-35-23; date; ogr2ogr -f GeoJSONSeq test2/6-35-23.geojsons -clipdst 16.875 40.97989806962013 22.5 45.08903556483103 test_area.gdb ; date;","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":78,"to":82}}}}],["227",{"pageContent":"```","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":82,"to":82}}}}],["228",{"pageContent":"How can we find BBOX (bounding box) coordinates?\nThere is a module from mapbox named \"mapbox/tilebelt\" for nodejs.\n\n```js:how to use tilebelt(example)\nconst tilebelt = require('@mapbox/tilebelt')\nconst bbox = tilebelt.tileToBBOX(32,20,6) //order is x, y, z\nconsole.log(bbox)\n```\n\nThe output will be in the order of [Xmin, Ymin, Xmax, Ymax]\n![2022-06-29-gdb2-04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ba4df1be-89b5-d6e7-7ffa-f039b1495dec.png)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":124,"to":134}}}}],["229",{"pageContent":"Comparison Result\nComparison of Processing time (seconds)\n|area | Method 1: layer | Method 2: BBOX | GeoJSONs size |  Diffrence (Method 2 - Method 1) |\n|:-:|:-:|:-:|:-:|:-:|\n|6-32-20| 5 | 57 | 8 MB| 52 |\n|6-32-21| 67 | 98 | 141 MB| 31 |\n|6-32-22| 121 | 173 | 301 MB| 52 |\n|6-32-23| 214 | 263 | 572 MB| 49 |\n|6-33-20| 38 | 69 | 66 MB| 31 |\n|6-33-21| 140 | 174 | 342 MB| 34 |\n|6-33-22| 590 | 663 | 1,043 MB| 73 |\n|6-33-23| 199 | 247 | 474 MB| 48 |\n|6-34-20| 51 | 80 | 83 MB| 29 |\n|6-34-21| 135 | 177 | 286 MB| 42 |\n|6-34-22| 505 | 581 | 920 MB| 76 |\n|6-34-23| 192 | 245 | 444 MB| 53 |\n|6-35-20| 52 | 102 | 98 MB| 50 |\n|6-35-21| 132 | 170 | 290 MB| 38 |\n|6-35-22| 139 | 177 | 292 MB| 38 |\n|6-35-23| 347 | 375 | 839 MB| 28 |","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":140,"to":159}}}}],["230",{"pageContent":"As expected, processing with layer (method 1) was always faster. \nOn the other hand, **I think the method 2 is not so bad**. Or, **I might be able to say that the method 2 would be better**.. The method 2 will save the time for ArcGIS preprocessing to make layers under a gdb. The differences between the two methods were from 28 seconds to 76 seconds (Average: 45.25, median: 45, stdev: 14).\nIf these difference (about 45 seconds) is mainly for processing spatial searching from about 1.4GB source data and clipping selected ones with the bounding box, and if such time is a linear function of the source data size, we would have need about 28 mins for searching features from the whole global database (52GB) and clipping them into a single extent.\n\n45 sec * ( 52GB / 1.4GB ) / 60 (sec/min) = 27.9 min","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":161,"to":165}}}}],["231",{"pageContent":"45 sec * ( 52GB / 1.4GB ) / 60 (sec/min) = 27.9 min\n\n\n\n# Preliminary Test2: Comparison of GDAL exporting time with the different source sizes (with BBOX method)\nWhen the source gdb was about 1.4 GB, it took about 45 seconds to search features with bbox. Let's see what happens with the same bbox when we increase the spatial extent of the source to have larger data size.\n\nWith the same bounding box used in the preliminary test 1, I just changed the extent of the source data to have the data size of **10.3 GB**.\n\nIf processing time is a linear function of the source data size, the processing time would increase by around **286 sec** guessed from the previous test.\n\n 45 sec * ((10.3GB - 1.4GB)/1.4GB) = 286 sec.","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":165,"to":176}}}}],["232",{"pageContent":"Preliminary test 2: result\nComparison of Processing time (seconds)\n|area | Method 2: BBOX from small gdb (1.4 GB) | Method 2: BBOX from large gdb (10.3 GB) | GeoJSONs size |  Diffrence (large source - small source) |\n|:-:|:-:|:-:|:-:|:-:|\n|6-32-20| 57 | 446 | 8 MB| 389 |\n|6-32-21| 98 | 482 | 141 MB| 384 |\n|6-32-22| 173 | 532 | 301 MB| 359 |\n|6-32-23| 263 | 655 | 572 MB| 392 |\n|6-33-20| 69 | 453| 66 MB| 384 |\n|6-33-21| 174 | 569 | 342 MB| 395 |\n|6-33-22| 663 | 967 | 1,043 MB| 304 |\n|6-33-23| 247 | 567 | 474 MB| 320 |\n|6-34-20| 80 | 474 | 83 MB| 394 |\n|6-34-21| 177 | 570 | 286 MB| 393 |\n|6-34-22| 581 | 964 | 920 MB| 383 |\n|6-34-23| 245 | 621 | 444 MB| 376 |\n|6-35-20| 102 | 473 | 98 MB| 371 |\n|6-35-21| 170 | 568 | 290 MB| 398 |\n|6-35-22| 177 | 559 | 292 MB| 382 |\n|6-35-23| 375 | 773 | 839 MB| 398 |","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":179,"to":198}}}}],["233",{"pageContent":"Interestingly, the difference of the processing time for each bbox is pretty stable ranging from 304 to 398 (average of 376 seconds). My guess was 286 sec, so it took more time, but I think this is still acceptable.\n\nThe average of the processing times for these 16 area was 605 seconds (= about 10 mins), so it would be good enough to run the conversion with some concurrent process.\n\n\n# Experiment","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":200,"to":205}}}}],["234",{"pageContent":"Step 1: Checking the gdal function.\nWe can access to a layer in geodatabase by adding a layer name after the gdb name as shown in the following command and figure. This time, I exported to GeoJSONs so that I can check the result. \n\n```\nogr2ogr -f GeoJSONSeq 6-32-20.geojsons test_area_z6.gdb t_6_32_20\nogr2ogr -f GeoJSONSeq 6-32-21.geojsons test_area_z6.gdb t_6_32_21\n```\n\n![2022-06-29-gdb2-03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ccfca55f-e3be-b272-b703-3f5a75854914.png)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":207,"to":215}}}}],["235",{"pageContent":"Step 2: Simple Script\n\n```js:index0.js\nconst config = require('config')\nconst Parser = require('json-text-sequence').parser\nconst { spawn } = require('child_process')\nconst srcs = config.get('srcs')\nconst ogr2ogrPath = config.get('ogr2ogrPath')","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":217,"to":224}}}}],["236",{"pageContent":"for (const src of srcs) { // if source is a single file, this loop is not necessary.\n  for (const tile of src.tiles){\n    const downstream = process.stdout\n  //console.log(`t_${tile[0]}_${tile[1]}_${tile[2]}`)\n    const parser = new Parser()\n      .on('data', f => {\n        f.tippecanoe = {\n            layer: src.layer,\n            minzoom: src.minzoom,\n            maxizoom: src.maxzoom\n        }\n        delete f.properties.SHAPE_Length //SHAPE_Length is not necessary\n        //console.log(JSON.stringify(f, null, 2)) // f  when writing\n        //downstream.write(`\\x1e${JSON.stringify(f.properties)}\\n`)\n        downstream.write(`\\x1e${JSON.stringify(f)}\\n`)\n      })\n    const ogr2ogr = spawn(ogr2ogrPath, [\n      '-f', 'GeoJSONSeq',\n      '-lco', 'RS=YES',\n      '/vsistdout/',\n      src.url,\n      `t_${tile[0]}_${tile[1]}_${tile[2]}`\n    ])\n    ogr2ogr.stdout.pipe(parser)\n\n}\n\n}","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":226,"to":253}}}}],["237",{"pageContent":"```hjson:config/default.hjson\n{\n    minzoom: 10\n    maxzoom: 12\n    srcs: [\n        {\n        url: test_area_z6.gdb\n        layer: elev\n        minzoom: 10\n        maxzoom: 12\n        tiles: [\n            [6,32,20]\n            [6,32,21]\n            [6,32,22]\n            [6,32,23]\n            [6,33,20]\n            [6,33,21]\n            [6,33,22]\n            [6,33,23]\n            [6,34,20]\n            [6,34,21]\n            [6,34,22]\n            [6,34,23]\n            [6,35,20]\n            [6,35,21]\n            [6,35,22]\n            [6,35,23]\n        ]\n        }\n    ]\n    ogr2ogrPath: ogr2ogr\n    tippecanoePath: /usr/local/bin/tippecanoe\n    dstDir: zxy\n}\n```\nBy running this script, we can see GeoJSON sequence as below.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/71c6a59e-f456-fcee-3c94-46704b5a4dc4.png)\n\nI need to adjust this script so that I can obtain the vector tile by tile by tile. (I may need to use queue)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":256,"to":295}}}}],["238",{"pageContent":"Consideration of maximum zoom level\nThis time, the source gdb was about 1.5 GB. When I made 16 mbtiles with zoom level from 10-13, the total size was about 2.3GB. When I made them with zoom level from 10-12, the total size was about two third of the that for ZL10 - 13.\n\nGiven that the original data is over 50 GB for global coverage, I think it would be a good idea to start the zoom level from 10 to 12.\n\n# Developing a Script\nLearing from UNVT's past efforts, I have made a script to create vector tiles (mbtiles format for each spatial modules).\nhttps://github.com/ubukawa/geodb5","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":298,"to":305}}}}],["239",{"pageContent":"# Developing a Script\nLearing from UNVT's past efforts, I have made a script to create vector tiles (mbtiles format for each spatial modules).\nhttps://github.com/ubukawa/geodb5\n\n* Use of \"better-queue\" module\n    * In order to concurrently process each area, \"better-queue\" module is used.\n* Use of the spatial module\n    * Because the source data is large, outout vector tiles are in respective spatial extent, or spatial module. For example, we have 6-34-22.mbtiles for the extent of the 6-34-22 tile extent (z-x-y order). \n* GeoJSON sequence was piped into the parser and forwarded to the vector tile conversion tool tippecanoe. But, it caused overflow of the data, so now GeoJSON sequence is exported as an intermediate file before converted into vector tiles.","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":305,"to":313}}}}],["240",{"pageContent":"```javascript:index.js\n// This is being edited.\nconst config = require('config')\nconst fs = require('fs')\nconst Queue = require('better-queue')\nconst { spawn } = require('child_process')\nconst Parser = require('json-text-sequence').parser\nconst tilebelt = require('@mapbox/tilebelt')\n\nconst srcdb = config.get('srcdb')\nconst ogr2ogrPath = config.get('ogr2ogrPath')\nconst tippecanoePath = config.get('tippecanoePath')\nconst minzoom = config.get('minzoom')\nconst maxzoom = config.get('maxzoom')\nconst mbtilesDir = config.get('mbtilesDir')\nconst geojsonsDir = config.get('geojsonsDir')\n\n\nlet keyInProgress = []\nlet idle = true\n\nconst isIdle = () => {\n    return idle\n}\n\nconst fsOptions = {\n    encoding: \"utf8\"\n}\n\nconst sleep = (wait) => {\n    return new Promise((resolve, reject) => {\n        setTimeout( () => {resolve()}, wait)\n    })\n}","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":315,"to":348}}}}],["241",{"pageContent":"const fsOptions = {\n    encoding: \"utf8\"\n}\n\nconst sleep = (wait) => {\n    return new Promise((resolve, reject) => {\n        setTimeout( () => {resolve()}, wait)\n    })\n}\n\nconst queue = new Queue(async (t, cb) => {\n    const startTime = new Date()\n    const key = t.key\n    const tile = t.tile\n    const [z, x, y] = tile\n    const gjsPath = `${geojsonsDir}/inter-${key}.geojsons`\n    const tmpPath = `${mbtilesDir}/part-${key}.mbtiles` \n    const dstPath = `${mbtilesDir}/${key}.mbtiles` \n    const bbox = tilebelt.tileToBBOX([x, y, z])\n\n    keyInProgress.push(key)\n    console.log(`[${keyInProgress}] in progress`)\n\n    const FSstream = fs.createWriteStream(gjsPath, fsOptions)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":348,"to":371}}}}],["242",{"pageContent":"const parser = new Parser()\n    .on('data', f => {\n        f.tippecanoe = {\n            layer: srcdb.layer,\n            minzoom: srcdb.minzoom,\n            maxzoom: srcdb.maxzoom\n        }\n        delete f.properties.SHAPE_Length\n        if ((f.properties.contour % 100) == 0){\n            f.tippecanoe.minzoom = srcdb.minzoom\n        } else if ((f.properties.contour % 40) == 0){\n            f.tippecanoe.minzoom = srcdb.minzoom + 2\n        } else {\n            f.tippecanoe.minzoom = srcdb.minzoom + 3\n        }\n        FSstream.write(`\\x1e${JSON.stringify(f)}\\n`)\n    })\n    .on('finish', () => {\n        FSstream.end()\n        const PendTime = new Date()\n        //console.log(`FS write end ${key}: ${startTime.toISOString()} --> ${PendTime.toISOString()}`)\n        //from here\n        const VTconversion = new Promise((resolve, reject)=>{\n            const tippecanoe = spawn(tippecanoePath, [\n                `--output=${tmpPath}`,\n                '--no-feature-limit',\n                '--no-tile-size-limit',","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":373,"to":399}}}}],["243",{"pageContent":"const tippecanoe = spawn(tippecanoePath, [\n                `--output=${tmpPath}`,\n                '--no-feature-limit',\n                '--no-tile-size-limit',\n                '--force',\n                '--simplification=2',\n                `--clip-bounding-box=${bbox.join(',')}`, \n                '--quiet',\n                `--minimum-zoom=${minzoom}`,\n                `--maximum-zoom=${maxzoom}`,\n                gjsPath\n                ]) \n               .on('exit', () => {\n                    fs.renameSync(tmpPath, dstPath)\n                    fs.unlinkSync(gjsPath)\n                    //const endTime = new Date()\n                    //console.log(`Tippecanoe: ${key} ends at ${endTime.toISOString()} (^o^)/`)\n                    //keyInProgress = keyInProgress.filter((v) => !(v === key))\n                    resolve()\n                })\n        })\n        .then(()=> {\n            const endTime = new Date()","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":399,"to":421}}}}],["244",{"pageContent":"//keyInProgress = keyInProgress.filter((v) => !(v === key))\n                    resolve()\n                })\n        })\n        .then(()=> {\n            const endTime = new Date()\n            console.log(` - ${key} ends: ${startTime.toISOString()} --> ${endTime.toISOString()} (^o^)/`)\n            keyInProgress = keyInProgress.filter((v) => !(v === key))\n            return cb()\n        })\n        //until here    \n    })","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":421,"to":432}}}}],["245",{"pageContent":"const ogr2ogr = spawn(ogr2ogrPath, [\n        '-f', 'GeoJSONSeq',\n        '-lco', 'RS=YES',\n        '/vsistdout/',\n        '-clipdst', bbox[0], bbox[1], bbox[2], bbox[3],\n        srcdb.url\n    ])\n    \n    //just in case (from here)\n    while(!isIdle()){\n        await sleep(3000)\n    }\n    //just in case (until here)\n\n    ogr2ogr.stdout.pipe(parser)\n\n // The following part is moved into .then of\n //   const endTime = new Date()\n //   console.log(`${key} ends: ${startTime} --> ${endTime} (^o^)/`)\n //   keyInProgress = keyInProgress.filter((v) => !(v === key))\n //   return cb()\n\n},{\n    concurrent: config.get('concurrent'),\n    maxRetries: config.get('maxRetries'),\n    retryDelay: config.get('retryDelay')\n})","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":434,"to":460}}}}],["246",{"pageContent":"},{\n    concurrent: config.get('concurrent'),\n    maxRetries: config.get('maxRetries'),\n    retryDelay: config.get('retryDelay')\n})\n\n\nconst queueTasks = () => {\n    for (let tile of srcdb.tiles){\n    //for (let tile of [[6,32,20],[6,32,21],[6,32,22],[6,32,23],[6,33,20],[6,33,21],[6,33,22]]){\n    //for (let key of ['bndl1', 'bndl2', 'bndl3', 'bndl4', 'bndl5', 'bndl6']){\n        const key = `${tile[0]}-${tile[1]}-${tile[2]}`\n        queue.push({\n            key: key,\n            tile: tile\n        })\n    }\n}\n\nconst shutdown = () => {\n    console.log('System shutdown (^_^)')\n}\n\nconst main = async () =>{\n    const stTime = new Date()\n    console.log(`${stTime.toISOString()}: Production starts. `)\n    queueTasks()\n    queue.on('drain', () => {\n        const closeTime = new Date()\n        console.log(`Production ends: ${stTime.toISOString()} --> ${closeTime.toISOString()}`)\n        shutdown()\n    })\n}\n\nmain()","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":460,"to":494}}}}],["247",{"pageContent":"The config file was:","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":497,"to":497}}}}],["248",{"pageContent":"```hjson:config/default.hjson\n{\n    minzoom: 10\n    maxzoom: 13\n    srcdb:  {\n        url: test_area_z4_8_9.gdb\n        layer: elev\n        minzoom: 10\n        maxzoom: 13\n        tiles: [\n            [4,8,0]\n            [4,8,1]\n            [4,8,2]\n            [4,8,10]\n            [4,8,11]\n            [4,8,12]\n            [4,8,13]\n            [4,8,14]\n            [4,8,15]\n            [4,9,0]\n            [4,9,1]\n            [4,9,10]\n            [4,9,11]\n            [4,9,12]\n            [4,9,13]\n            [4,9,14]\n            [4,9,15]\n            [4,10,0]\n            [4,10,1]\n            [4,10,2]\n            [4,10,3]\n            [4,10,9]\n            [4,10,10]\n            [4,10,11]\n            [4,10,12]\n            [4,10,13]\n            [4,10,14]\n            [4,10,15]\n            [4,11,0]\n            [4,11,1]\n            [4,11,2]\n            [4,11,3]\n            [4,11,8]\n            [4,11,9]\n            [4,11,10]\n            [4,11,11]\n            [4,11,12]\n            [4,11,13]\n            [4,11,14]\n            [4,11,15]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":499,"to":548}}}}],["249",{"pageContent":"[4,11,3]\n            [4,11,8]\n            [4,11,9]\n            [4,11,10]\n            [4,11,11]\n            [4,11,12]\n            [4,11,13]\n            [4,11,14]\n            [4,11,15]\n            [4,12,0]\n            [4,12,1]\n            [4,12,2]\n            [4,12,3]\n            [4,12,9]\n            [4,12,10]\n            [4,12,11]\n            [4,12,12]\n            [4,12,13]\n            [4,12,14]\n            [4,12,15]\n            [4,13,0]\n            [4,13,1]\n            [4,13,2]\n            [4,13,3]\n            [4,13,10]\n            [4,13,11]\n            [4,13,12]\n            [4,13,13]\n            [4,13,14]\n            [4,13,15]\n            [4,14,0]\n            [4,14,1]\n            [4,14,2]\n            [4,14,3]\n            [4,14,7]\n            [4,14,11]\n            [4,14,12]\n            [4,14,13]\n            [4,14,14]\n            [4,14,15]\n            [4,15,0]\n            [4,15,1]\n            [4,15,2]\n            [4,15,3]\n            [4,15,4]\n            [4,15,5]\n            [4,15,6]\n            [4,15,7]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":548,"to":595}}}}],["250",{"pageContent":"[4,14,15]\n            [4,15,0]\n            [4,15,1]\n            [4,15,2]\n            [4,15,3]\n            [4,15,4]\n            [4,15,5]\n            [4,15,6]\n            [4,15,7]\n            [4,15,8]\n            [4,15,11]\n            [4,15,12]\n            [4,15,13]\n            [4,15,14]\n            [4,15,15]\n            [5,16,13]\n            [5,16,16]\n            [5,16,17]\n            [5,16,18]\n            [5,16,19]\n            [5,17,13]\n            [5,17,14]\n            [5,17,17]\n            [5,17,18]\n            [5,17,19]\n            [5,18,13]\n            [5,18,14]\n            [5,18,19]\n            [5,19,14]\n            [5,19,18]\n            [5,19,19]\n            [5,20,8]\n            [5,20,14]\n            [5,20,15]\n            [5,20,16]\n            [5,21,8]\n            [5,21,11]\n            [5,21,12]\n            [5,21,13]\n            [5,21,14]\n            [5,21,15]\n            [5,21,16]\n            [5,21,17]\n            [5,22,8]\n            [5,22,9]\n            [5,22,11]\n            [5,23,8]\n            [5,23,9]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":595,"to":642}}}}],["251",{"pageContent":"[5,21,14]\n            [5,21,15]\n            [5,21,16]\n            [5,21,17]\n            [5,22,8]\n            [5,22,9]\n            [5,22,11]\n            [5,23,8]\n            [5,23,9]\n            [5,23,11]\n            [5,23,12]\n            [5,23,15]\n            [5,24,8]\n            [5,24,9]\n            [5,24,10]\n            [5,24,11]\n            [5,24,12]\n            [5,24,16]\n            [5,24,17]\n            [5,25,8]\n            [5,25,9]\n            [5,25,10]\n            [5,25,11]\n            [5,25,17]\n            [5,26,8]\n            [5,26,9]\n            [5,26,10]\n            [5,26,11]\n            [5,26,17]\n            [5,26,18]\n            [5,26,19]\n            [5,27,8]\n            [5,27,9]\n            [5,27,10]\n            [5,27,13]\n            [5,27,14]\n            [5,27,16]\n            [5,27,17]\n            [5,27,18]\n            [5,27,19]\n            [5,28,8]\n            [5,28,9]\n            [5,28,10]\n            [5,28,13]\n            [5,28,16]\n            [5,28,17]\n            [5,28,18]\n            [5,28,20]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":642,"to":689}}}}],["252",{"pageContent":"[5,27,19]\n            [5,28,8]\n            [5,28,9]\n            [5,28,10]\n            [5,28,13]\n            [5,28,16]\n            [5,28,17]\n            [5,28,18]\n            [5,28,20]\n            [5,28,21]\n            [5,29,8]\n            [5,29,9]\n            [5,29,10]\n            [5,29,11]\n            [5,29,12]\n            [5,29,13]\n            [5,29,16]\n            [5,29,17]\n            [5,29,20]\n            [5,29,21]\n            [5,30,18]\n            [5,30,19]\n            [5,30,20]\n            [5,30,21]\n            [5,31,18]\n            [5,31,21]\n            [6,32,28]\n            [6,32,29]\n            [6,32,30]\n            [6,32,31]\n            [6,33,28]\n            [6,33,29]\n            [6,33,30]\n            [6,33,31]\n            [6,34,30]\n            [6,34,31]\n            [6,34,32]\n            [6,34,33]\n            [6,35,30]\n            [6,35,31]\n            [6,35,32]\n            [6,35,33]\n            [6,36,30]\n            [6,36,31]\n            [6,36,32]\n            [6,36,33]\n            [6,36,34]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":689,"to":735}}}}],["253",{"pageContent":"[6,35,30]\n            [6,35,31]\n            [6,35,32]\n            [6,35,33]\n            [6,36,30]\n            [6,36,31]\n            [6,36,32]\n            [6,36,33]\n            [6,36,34]\n            [6,36,35]\n            [6,36,36]\n            [6,36,37]\n            [6,37,30]\n            [6,37,31]\n            [6,37,32]\n            [6,37,33]\n            [6,37,34]\n            [6,37,35]\n            [6,37,36]\n            [6,37,37]\n            [6,38,30]\n            [6,38,31]\n            [6,38,32]\n            [6,38,33]\n            [6,38,34]\n            [6,38,35]\n            [6,39,30]\n            [6,39,31]\n            [6,39,32]\n            [6,39,33]\n            [6,39,34]\n            [6,39,35]\n            [6,40,34]\n            [6,40,35]\n            [6,41,34]\n            [6,41,35]\n            [6,44,24]\n            [6,44,25]\n            [6,44,26]\n            [6,44,27]\n            [6,44,28]\n            [6,44,29]\n            [6,44,30]\n            [6,44,31]\n            [6,45,24]\n            [6,45,25]\n            [6,45,26]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":735,"to":781}}}}],["254",{"pageContent":"[6,44,26]\n            [6,44,27]\n            [6,44,28]\n            [6,44,29]\n            [6,44,30]\n            [6,44,31]\n            [6,45,24]\n            [6,45,25]\n            [6,45,26]\n            [6,45,27]\n            [6,45,28]\n            [6,45,29]\n            [6,45,30]\n            [6,45,31]\n            [6,46,26]\n            [6,46,27]\n            [6,46,28]\n            [6,46,29]\n            [6,47,26]\n            [6,47,27]\n            [6,47,28]\n            [6,47,29]\n            [6,48,26]\n            [6,48,27]\n            [6,48,28]\n            [6,48,29]\n            [6,48,30]\n            [6,48,31]\n            [6,49,26]\n            [6,49,27]\n            [6,49,28]\n            [6,49,29]\n            [6,49,30]\n            [6,49,31]\n            [6,50,24]\n            [6,50,25]\n            [6,50,26]\n            [6,50,27]\n            [6,50,28]\n            [6,50,29]\n            [6,50,30]\n            [6,50,31]\n            [6,50,32]\n            [6,50,33]\n            [6,51,24]\n            [6,51,25]\n            [6,51,26]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":781,"to":827}}}}],["255",{"pageContent":"[6,50,28]\n            [6,50,29]\n            [6,50,30]\n            [6,50,31]\n            [6,50,32]\n            [6,50,33]\n            [6,51,24]\n            [6,51,25]\n            [6,51,26]\n            [6,51,27]\n            [6,51,28]\n            [6,51,29]\n            [6,51,30]\n            [6,51,31]\n            [6,51,32]\n            [6,51,33]\n            [6,52,24]\n            [6,52,25]\n            [6,52,26]\n            [6,52,27]\n            [6,52,28]\n            [6,52,29]\n            [6,52,30]\n            [6,52,31]\n            [6,52,32]\n            [6,52,33]\n            [6,53,24]\n            [6,53,25]\n            [6,53,26]\n            [6,53,27]\n            [6,53,28]\n            [6,53,29]\n            [6,53,30]\n            [6,53,31]\n            [6,53,32]\n            [6,53,33]\n            [6,54,22]\n            [6,54,23]\n            [6,54,24]\n            [6,54,25]\n            [6,54,30]\n            [6,54,31]\n            [6,55,22]\n            [6,55,23]\n            [6,55,24]\n            [6,55,25]\n            [6,55,30]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":827,"to":873}}}}],["256",{"pageContent":"[6,54,24]\n            [6,54,25]\n            [6,54,30]\n            [6,54,31]\n            [6,55,22]\n            [6,55,23]\n            [6,55,24]\n            [6,55,25]\n            [6,55,30]\n            [6,55,31]\n            [6,56,22]\n            [6,56,23]\n            [6,56,24]\n            [6,56,25]\n            [6,56,38]\n            [6,56,39]\n            [6,57,22]\n            [6,57,23]\n            [6,57,24]\n            [6,57,25]\n            [6,57,38]\n            [6,57,39]\n            [6,58,36]\n            [6,58,37]\n            [6,58,38]\n            [6,58,39]\n            [6,59,36]\n            [6,59,37]\n            [6,59,38]\n            [6,59,39]\n            [6,62,38]\n            [6,62,39]\n            [6,62,40]\n            [6,62,41]\n            [6,63,38]\n            [6,63,39]\n            [6,63,40]\n            [6,63,41]\n            [6,32,16]\n            [6,32,17]\n            [6,32,18]\n            [6,32,19]\n            [6,32,20]\n            [6,32,21]\n            [6,32,22]\n            [6,32,23]\n            [6,32,24]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":873,"to":919}}}}],["257",{"pageContent":"[6,32,16]\n            [6,32,17]\n            [6,32,18]\n            [6,32,19]\n            [6,32,20]\n            [6,32,21]\n            [6,32,22]\n            [6,32,23]\n            [6,32,24]\n            [6,32,25]\n            [6,33,16]\n            [6,33,17]\n            [6,33,18]\n            [6,33,19]\n            [6,33,20]\n            [6,33,21]\n            [6,33,22]\n            [6,33,23]\n            [6,33,24]\n            [6,33,25]\n            [6,34,16]\n            [6,34,17]\n            [6,34,18]\n            [6,34,19]\n            [6,34,20]\n            [6,34,21]\n            [6,34,22]\n            [6,34,23]\n            [6,34,24]\n            [6,34,25]\n            [6,35,16]\n            [6,35,17]\n            [6,35,18]\n            [6,35,19]\n            [6,35,20]\n            [6,35,21]\n            [6,35,22]\n            [6,35,23]\n            [6,35,24]\n            [6,35,25]\n            [6,36,16]\n            [6,36,17]\n            [6,36,18]\n            [6,36,19]\n            [6,36,20]\n            [6,36,21]\n            [6,36,22]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":919,"to":965}}}}],["258",{"pageContent":"[6,35,24]\n            [6,35,25]\n            [6,36,16]\n            [6,36,17]\n            [6,36,18]\n            [6,36,19]\n            [6,36,20]\n            [6,36,21]\n            [6,36,22]\n            [6,36,23]\n            [6,36,24]\n            [6,36,25]\n            [6,37,16]\n            [6,37,17]\n            [6,37,18]\n            [6,37,19]\n            [6,37,20]\n            [6,37,21]\n            [6,37,22]\n            [6,37,23]\n            [6,37,24]\n            [6,37,25]\n            [6,38,16]\n            [6,38,17]\n            [6,38,18]\n            [6,38,19]\n            [6,38,20]\n            [6,38,21]\n            [6,38,22]\n            [6,38,23]\n            [6,38,24]\n            [6,38,25]\n            [6,38,26]\n            [6,38,27]\n            [6,39,16]\n            [6,39,17]\n            [6,39,18]\n            [6,39,19]\n            [6,39,20]\n            [6,39,21]\n            [6,39,22]\n            [6,39,23]\n            [6,39,24]\n            [6,39,25]\n            [6,39,26]\n            [6,39,27]\n            [6,40,18]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":965,"to":1011}}}}],["259",{"pageContent":"[6,39,20]\n            [6,39,21]\n            [6,39,22]\n            [6,39,23]\n            [6,39,24]\n            [6,39,25]\n            [6,39,26]\n            [6,39,27]\n            [6,40,18]\n            [6,40,19]\n            [6,40,20]\n            [6,40,21]\n            [6,40,22]\n            [6,40,23]\n            [6,40,24]\n            [6,40,25]\n            [6,40,26]\n            [6,40,27]\n            [6,41,18]\n            [6,41,19]\n            [6,41,20]\n            [6,41,21]\n            [6,41,22]\n            [6,41,23]\n            [6,41,24]\n            [6,41,25]\n            [6,41,26]\n            [6,41,27]\n            [6,42,18]\n            [6,42,19]\n            [6,42,20]\n            [6,42,21]\n            [6,43,18]\n            [6,43,19]\n            [6,43,20]\n            [6,43,21]\n            [6,44,20]\n            [6,44,21]\n            [6,45,20]\n            [6,45,21]\n            [6,46,20]\n            [6,46,21]\n            [6,47,20]\n            [6,47,21]\n            [5,16,6]\n            [5,16,7]\n            [5,17,6]","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":1011,"to":1057}}}}],["260",{"pageContent":"[6,45,20]\n            [6,45,21]\n            [6,46,20]\n            [6,46,21]\n            [6,47,20]\n            [6,47,21]\n            [5,16,6]\n            [5,16,7]\n            [5,17,6]\n            [5,17,7]\n            [5,18,4]\n            [5,18,5]\n            [5,18,6]\n            [5,18,7]\n            [5,19,4]\n            [5,19,5]\n            [5,19,6]\n            [5,19,7]\n        ]\n    }\n    ogr2ogrPath: ogr2ogr\n    tippecanoePath: /usr/local/bin/tippecanoe\n    dstDir: zxy\n    concurrent: 4\n    maxRetries: 3\n    retryDelay: 5000\n    mbtilesDir: mbtiles\n    geojsonsDir: geojsons\n    spinnerString: 15\n}","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":1057,"to":1086}}}}],["261",{"pageContent":"Then, we have a series of mbtiles.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/740df3f3-decf-93ba-a86a-7df5f70b8aec.png)","metadata":{"source":"https://qiita.com/T-ubu/items/2dedbf45df9dcaeead33","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs - Trial 2","tags":"vectortile ArcGIS GDAL","author":"T-ubu","slide":"false","loc":{"lines":{"from":1092,"to":1093}}}}],["262",{"pageContent":"# Introduction\n## Background\nMy colleagues have a good contour line data in ArcGIS geodatabase (.gdb) format. I wanted to make vector tiles from contour lines stored in ArcGIS Geodatabase. The structure of the geodatabase is as shown in the following figure.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f0d7328d-326e-892e-705b-a2eb155b406e.png)","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":4}}}}],["263",{"pageContent":"Considering an approach \nAt first, I was thinking to export it to shape files to be converted into GeoJSONs which is the input format of the Tippecanoe (mapbox's vector tile conversion tool). However, the source data is more than 1GB, and I wanted to avoid exporting any intermediate file.\n\nI explored a way to export data as GeoJSON from geodatabase, and found that **the gdal (ogr2ogr) provide such function to export the data into GeoJSON/GeoJSONs from geodatabase**. And, fortunately, **I know that there is a way to efficiently export data from the source to be converted into vector tile as an asynchronous process by using nodejs \"spawn\" and \"pipe.\"** (Ref: [this article (in Japanese)](https://qiita.com/hfu/items/35e6dc67d55f3bcec181) by @hfu).\n\nTherefore, my goal is to efficiently create vector tile from Esri geodatabase using gdal, nodejs (in particular, spawn and pipe), and tippecanoe.","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":6,"to":11}}}}],["264",{"pageContent":"My Working Environment\n\n* nodejs: v16.15.0\n* npm: 8.5.5\n* tippecanoe: v1.36.0\n* GDAL: 3.4.1, released 2021/12/27\n* Platform: Ubuntu 22.04 LTS (built on Docker for windows)\n\n## Working Repository\n\nhttps://github.com/ubukawa/geodb1\n\n\n# Procedure\n\n## Step 1: Confirm gdal (ogr2ogr) command\nThe data is stored in a directory. At first, I have checked if gdal (ogr2ogr) command work well.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/c2fa80e2-3ba2-57cd-ab18-8073eb1d384a.png)\n\nI can see the exported data as stdout with the following command. Fortunately, the data structure is simple and I did not have to specify any layer under the geodatabase.\n\n```\nogr2ogr -f GeoJSONSeq -lco RS=YES /vsistdout/ test_area/test_area.gdb\n```\nThen, I was able to see the result.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/31051909-af81-4fa4-be03-45e99e3e7a5b.png)","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":14,"to":39}}}}],["265",{"pageContent":"Step 2: Making scripts for nodejs (downstream is shown as stdout)\n\nFollwoing @hfu's script, I prepared the following scripts (index0.js and default/config.hjson).\nFor testing purpose, at first, gdal output is spawn and piped into stdout.\n\n```js: index0.js\nconst config = require('config')\nconst Parser = require('json-text-sequence').parser\nconst { spawn } = require('child_process')\n\nconst srcs = config.get('srcs')\nconst ogr2ogrPath = config.get('ogr2ogrPath')\n\nconst downstream = process.stdout","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":42,"to":55}}}}],["266",{"pageContent":"const srcs = config.get('srcs')\nconst ogr2ogrPath = config.get('ogr2ogrPath')\n\nconst downstream = process.stdout\n\nfor (const src of srcs) {\n    const parser = new Parser()\n      .on('data', f => {\n        f.tippecanoe = {\n            layer: src.layer,\n            minzoom: src.minzoom,\n            maxizoom: src.maxzoom\n        }\n        delete f.properties.SHAPE_Length //SHAPE_Length is not necessary\n        downstream.write(`\\x1e${JSON.stringify(f)}\\n`)\n      })\n    const ogr2ogr = spawn(ogr2ogrPath, [\n      '-f', 'GeoJSONSeq',\n      '-lco', 'RS=YES',\n      '/vsistdout/',\n      src.url\n    ])\n    ogr2ogr.stdout.pipe(parser)\n  }","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":55,"to":78}}}}],["267",{"pageContent":"```json:config/default.hjson\n{\n    minzoom: 10\n    maxzoom: 12\n    srcs: [\n        {\n        url: test_area.gdb\n        layer: elev\n        minzoom: 10\n        maxzoom: 12\n        }\n    ]\n    ogr2ogrPath: ogr2ogr\n    tippecanoePath: tippecanoe\n    dstDir: zxy\n}\n```\nOnce I ran \"index0.js\", I saw GeoJSON sequence was exported.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/91b178dc-3bc3-bf10-1928-7583d48b7151.png)","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":82,"to":100}}}}],["268",{"pageContent":"Step 3: preparing the scipt: Downstream into Tippecanoe\nNow, gdal result should be piped into tippecanoe. index0.js was extended as below. A const \"Tippecanoe\" was added, and donwstream is now into tippecanoe.\n\nIn addition, it is needed to add \"nOpenFiles\" to end downstream for each.\n\n```js:index.js\nconst config = require('config')\nconst Parser = require('json-text-sequence').parser\nconst { spawn } = require('child_process')\n\nconst minzoom = config.get('minzoom')\nconst maxzoom = config.get('maxzoom')\nconst srcs = config.get('srcs')\nconst ogr2ogrPath = config.get('ogr2ogrPath')\nconst tippecanoePath = config.get('tippecanoePath')\nconst dstDir = config.get('dstDir')\n\nconst tippecanoe = spawn(tippecanoePath, [\n    `--output-to-directory=${dstDir}`,\n    `--no-tile-compression`,\n    `--minimum-zoom=${minzoom}`,\n    `--maximum-zoom=${maxzoom}`\n  ], { stdio: ['pipe', 'inherit', 'inherit'] })\n\n//const downstream = process.stdout\nconst downstream = tippecanoe.stdin\n\nlet nOpenFiles = 0","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":102,"to":129}}}}],["269",{"pageContent":"//const downstream = process.stdout\nconst downstream = tippecanoe.stdin\n\nlet nOpenFiles = 0\n\nfor (const src of srcs) {\n    nOpenFiles++\n    const parser = new Parser()\n      .on('data', f => {\n        f.tippecanoe = {\n            layer: src.layer,\n            minzoom: src.minzoom,\n            maxizoom: src.maxzoom\n        }\n        delete f.properties.SHAPE_Length //SHAPE_Length is not necessary\n        //console.log(JSON.stringify(f, null, 2))\n        downstream.write(`\\x1e${JSON.stringify(f)}\\n`)\n        //downstream.write(`\\x1e${JSON.stringify(f.properties)}\\n`)\n      })\n      .on('finish', () =>{\n        nOpenFiles--\n        if (nOpenFiles === 0){\n            downstream.end()\n        }\n      })\n    const ogr2ogr = spawn(ogr2ogrPath, [\n      '-f', 'GeoJSONSeq',\n      '-lco', 'RS=YES',\n      '/vsistdout/',\n      src.url\n    ])\n    ogr2ogr.stdout.pipe(parser)\n  }","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":129,"to":161}}}}],["270",{"pageContent":"Then, I was able to run the script.\n```\nnode index.js\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/91f7bf0a-9d41-f870-fc13-18b5b8b968c1.png)\n\nIt will take some time for the conversion. ~~I am now waiting for the result.~~","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":164,"to":170}}}}],["271",{"pageContent":"Result\nI got zxy vector tile in pbf format. I hosted them with my web server and it can be displayed in our web map.\n(You can see contour lines which are from our contour data in Esri gdb file.)\n\n![qiita.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/4addab8e-215d-1ce9-991f-1de06712d242.png)\n\n\n# Conclusion\nI tried vector tile conversion from Esri geodatabase with open source software.\n \nThis time, my test was done with a gdb file that contains extracted features in some part from the original database.\nFor future, because our original database contains contour lines for whole globe, it would be important to think about exporting by regions.","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":172,"to":183}}}}],["272",{"pageContent":"Features will downstream into GeoJSON sequence from a GDB format, then they are piped into Tippecanoe. But, it would be wise to separate the region during exporting into GeoJSON sequence.\nPostgres/PostGIS can do that with its query, but I do not know if Esri Geodatabase has such function (with enough efficiency). I will think more about these issues for the future.. \n\nMy effort is a part of UN Vector Tile Toolkit activities under the UN Open GIS.\n\n# Acknowledgement\nThis work follows the existing method by @hfu. Although it was developed a few years ago, I think it is still relevant. I appreciate his great work.\n(After all, I found that the difference of the source file did not affect his original script.)\n\n\n# Reference\nhttps://qiita.com/hfu/items/35e6dc67d55f3bcec181\n\nhttps://gdal.org/drivers/vector/openfilegdb.html\n\nhttps://github.com/hfu/autonomy \n\nhttp://unopengis.org/unopengis/main/main.php","metadata":{"source":"https://qiita.com/T-ubu/items/da43f434a6c80b5ac83f","title":"Vector tile conversion from Esri geodatabase with gdal, tippecanoe, and nodejs","tags":"Node.js GDAL vectortile geodatabase","author":"T-ubu","slide":"false","loc":{"lines":{"from":185,"to":202}}}}],["273",{"pageContent":"# Introduction\nWith this article, I want to share how we can use unvt/charites for vector tile style editing.\nIt can be used for ArcGIS Online and its vector tile style, MapLibre GL JS and Mapbox GL JS.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":3}}}}],["274",{"pageContent":"Targeted reader\nVector Tile style engineers who are interested in editing styles for ArcGIS Online, MapLibre GL JS and/or Mapbox GL JS. I am specifically writing this for one of my data visualization colleagues. \n\n\n# Materials used for this test\nBecause I cannot explain the process with our internal data, I am using public/open content.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":5,"to":10}}}}],["275",{"pageContent":"ArcGIS Living Atlas\nNow, ESRI releases a lot of vector tile for ArcGIS Online and others. I chose one of them.\n* World Topographic Map: https://www.arcgis.com/home/item.html?id=7dc6cea0b1764a1f9af2e679f642f0f5\n* Its style: https://www.arcgis.com/sharing/rest/content/items/7dc6cea0b1764a1f9af2e679f642f0f5/resources/styles/root.json?f=pjson\n> This map is designed to be used as a basemap layer or reference layer in a web map.  You can add this layer to a web map and save as your own map.\n\n> Because this map is delivered as a vector tile layer, users can customize the map to change its content and symbology, including fonts.  Users are able to turn on and off layers, change symbols for layers, switch to alternate local language (in some areas), and refine the treatment of disputed boundaries.\n\n### My sample map\nI also prepared a simple style for my own data from NaturalEarth.\nStyle URL: https://ubukawa.github.io/vt-test/maps/test-simple.json\n\n\n# Practice","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":12,"to":25}}}}],["276",{"pageContent":"Starting Docker container (unvt/nanban) to use our tool unvt/charites\nOur tool, unvt/charites, may work well on OSX, Ubuntu, but it might not work well in some envrionment such as arm64 (eg., M1 Mac) because some of NPM packages like sprite-zero uses mapnik. For windows users, using Docker would be easier.\n```\ndocker run -it --rm -v ${PWD}:/data -p 8080:8080 unvt/nanban\ncd /data\ncharites --version\n```\nConnect the port for Live Preview in localhost.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/015d1b93-dee7-6b23-c609-a11cb22894e6.png)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":26,"to":34}}}}],["277",{"pageContent":"Importing existing style (json)\nWhile many vector tile maps use style file in JSON format, out tool use easy to read/edit YAML file to work with style. You can import the existing style json (compatible for Mapbox/MapLibre Style Specification) for vector tile map.\n### import from local file\nRun the following command.\n```\ncharites convert input.json output.yml\n```\n\n### from online (Easy example)\nBy using curl, a style.json can be converted into a series of yaml files.\n```\ncurl https://ubukawa.github.io/vt-test/maps/test-simple.json | charites convert - simple/style.yml\n```\nThere are style layers under **layers** directory (see below figure).\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/387f314f-a2a0-fb7f-a83b-9cdc75c4ac89.png)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":37,"to":51}}}}],["278",{"pageContent":"from online (ESRI example)\nIf you do the same thing for ESRI's style....\n```\ncurl https://www.arcgis.com/sharing/rest/content/items/7dc6cea0b1764a1f9af2e679f62f0f5/resources/styles/root.json?f=pjson | charites convert - esri/style.yml\n```\nIt will fail because unvt/charites cannot treat \"/\" in the layer id, which will be the file name under \"layers\".\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5bb7b81c-68d6-04d8-d303-be189e21b1c9.png)\nPlease replace \"/\" in layer id.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":53,"to":60}}}}],["279",{"pageContent":"Live preview\nOnce a style is imported, we can see the LivePreview with the following command.\n```\ncharites serve simple/style.yml\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0a0843a6-e4fe-2568-da70-0b634241523d.png)\n\nYou can keep Live Preview while you are editing the style.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":62,"to":69}}}}],["280",{"pageContent":"Create style file from the scratch\nWe can also start from the scratch. Let's try with ESRI's basemap.\n\n### Making a new directory for style, and initiate a style.\nIt is not necessary, but it would be a good idea to make a directory for your new style. Then, you can initiate a style.yml/\n```\nmkdir new\ncharites init new/style.yml\n```\nAt first, style.yml is empty. (See below)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0cf5fc8e-f541-c22a-8d0a-018d7bb7018e.png)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":73,"to":83}}}}],["281",{"pageContent":"Adding style information\nReferring to this ESRI basemap style ([here](https://www.arcgis.com/sharing/rest/content/items/7dc6cea0b1764a1f9af2e679f642f0f5/resources/styles/root.json)), fill each element of style.yml as below. \nMake sure that you specified the vector tile source as the **tiles**. You can figure out it by adding \"tile/{z}/{y}/{x}.pbf\" to the vector tile server URL. (You can learn these by checkin ArcGIS REST API.)\nUnder the layers, let's tentatively add background.yml and land.yml","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":85,"to":88}}}}],["282",{"pageContent":"```yaml:style.yml\nversion: 8\nname: My Style\nsprite: https://cdn.arcgis.com/sharing/rest/content/items/7dc6cea0b1764a1f9af2e679f642f0f5/resources/styles/../sprites/sprite\nglyphs: https://basemaps.arcgis.com/arcgis/rest/services/World_Basemap_v2/VectorTileServer/resources/fonts/{fontstack}/{range}\nsources: \n  esri:\n    type: vector\n    tiles:  # for our tool, make sure that you use tiles\n      - https://basemaps.arcgis.com/arcgis/rest/services/World_Basemap_v2/VectorTileServer/tile/{z}/{y}/{x}.pbf\nlayers: ## you can adde more layers here\n  - !!inc/file layers/background.yml\n  - !!inc/file layers/land.yml\n```","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":90,"to":103}}}}],["283",{"pageContent":"Develop layer information \nmake a new directory \"layers\" in the same directory with style.yml, and make \"background.yml\" and \"land.yaml\" as below. (Please make sure that the location of layer files should be concordant with the list of layers in style.yml.)\n\n```yaml:background.yml\nid: background\ntype: background\nmaxzoom: 15\npaint:\n  background-color: rgb(135, 188, 196) #you can use rgba color, index color (like '#990000'), etc..\n\n```\n\n```yaml:land.yml\nid: land\ntype: fill\nsource: esri\nsource-layer: Land\nmaxzoom: 15\npaint:\n  fill-color: rgb(174, 255, 147)\n\n```\nNow, the live preview (run *charites serve new/style.yml*) would be like this:\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b6c629a8-79ad-fdde-046c-6b2fac0499d2.png)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":105,"to":128}}}}],["284",{"pageContent":"Filtering\nIf you know the data has some attribution for filtering, you can do filtering as below:\n```yaml:land.yml\nid: land\ntype: fill\nsource: esri\nsource-layer: Land\nfilter:\n  - '=='\n  - _symbol\n  - 0 #1 is ice 0 is non ice (See Green Land)\nmaxzoom: 15\npaint:\n  fill-color: green #rgb(174, 255, 147)\n\n```\nGreenland disappeared.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5c6d49c7-ae79-8eee-df93-f1e951a2b254.png)\n\nThen, let's add ice for Greenland as **a different layer**. Make a new yaml file under layers, and add one more layer in the style.yml. (Our tool can understand the name of color (\"white\"), but I am not sure if other libraries and/or ArcGIS Online understand it. Using index color or RGB color would be wise way.)\n\n```yaml:land(ice).yml\nid: land(ice)\ntype: fill\nsource: esri\nsource-layer: Land\nfilter:\n  - '=='\n  - _symbol\n  - 1 #1 is ice 0 is non ice (See Green Land)\nmaxzoom: 15\npaint:\n  fill-color: white #rgb(174, 255, 147)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":130,"to":162}}}}],["285",{"pageContent":"```\nNow, your map looks like:\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/dc0b0c65-1325-220c-c00f-72cbb14b71e4.png)","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":164,"to":166}}}}],["286",{"pageContent":"Advanced expression.\nFor ArcGIS online, I think \"match\" expression may not work, but for Mapbox GL JS and MapLibre, using \"match\" function would be easier to change the paint based on the attribution. Instead of using \"land.yml\" and \"land(ice).yml\" as we did in the previous chapter, we can make it with single file as below.\n\n```yaml:land-ice.yml\nid: land-ice\ntype: fill\nsource: esri\nsource-layer: Land\nfilter: # filter is not needed..\n  - 'in'\n  - _symbol\n  - 1 #1 is ice 0 is non ice (See Green Land)\n  - 0\nmaxzoom: 15\npaint:\n  fill-color:\n    - match\n    - - get\n      - _symbol\n    - 1\n    - '#FFFFFF' # index color\n    - 0\n    - green # color name\n    - '#999999' #1 nor 0\n\n```\nThus, by using this kind of technique, we can obtain the same map expression with less number of map layers.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/514ffff4-15f8-3820-eef4-0b883434035a.png)\nMatch can be used for icon, fill-color, line-color, line-width, etc.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":168,"to":196}}}}],["287",{"pageContent":"Export JSON file\n### Exporting JSON file\nOnce you edit the style, you can export it back to a JSON file. Quit the Live Preview and make JSON file with the following command:\n```\ncharites build new/style.yml new.json\n```\n\n\n### Adjusting the sources for ArcGIS Online (if necessary). \nIn order to use your developed style in ArcGIS Online, it would be necessary to adjust layer information. Please change from \"tiles\" to \"url\". You just need to change the property name, and delete the \"/tile/{z}/{y}/{x}.pbf\" to specify the server url.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/83d359f6-e5ae-360e-f9dc-c874cf73b829.png)\n\n\n# Summary\nThrough these test, I hope you can understand how you can edit style information efficiently.","metadata":{"source":"https://qiita.com/T-ubu/items/33cb4617a4db468eb208","title":"Vector tile styling with unvt/charites (editing with YAML files)","tags":"unvt-charites vectortile ArcGIS","author":"T-ubu","slide":"false","loc":{"lines":{"from":198,"to":212}}}}],["288",{"pageContent":"The original article was written in Japanese ([here](https://qiita.com/T-ubu/items/3f1a431fdd1e39d07ade)) in April 2022. This article was translated and released in English in May 2022.\n\n# Introduction\nThe United Nations Vector Tile Toolkit (UNVT) was launched by @hfu in 2018 and is promoted under the UN Open GIS Initative. So far, various tools have been developed, which we can use them in each step of vector tile processing such as production, styling, hosting, optimization, and consumption (utilization).\n\nIn this article, I would like to introduce some of the UNVT tools that I use most often. **I hope that it will help newbies of UNVT to have some idea on what tools are available**. In addition, for those who work for vector tiles, I hope this article **will serve as a kind of a catalog to show what UNVT can do.**","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":6}}}}],["289",{"pageContent":"# Disclaimer\nThis article is based on my own experience as of April 2022. This article was first drafted in Japanese ([here](https://qiita.com/T-ubu/items/3f1a431fdd1e39d07ade)), then translated into English.\n\nI am going to introduce each tool with its expected work area (production, styling, hosting, optimization, consumption, etc.), but it depends on my personal experiences and they may be used in different fields.\n\nUNVT uses a lot of open source tools, so the tools introduced here should be called as a group of tools, and there are some overlaps among them. But I simply use \"tool\" in this article to simplify my explanation.\n\n# Tool list","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":8,"to":15}}}}],["290",{"pageContent":"Tools I use most often (They can be used for various purposes) \n| Tool name | Release date (month) | Main Developer(s) | Areas of use | Overview |\n|:-|:-: |:-: |:-: |:-|\n| unvt/tell | 2021.9 | hfu | Use | You can create a storytelling map using a vector tile map in the background (MapLibre library). As you scroll through the home page, the map scene moves and explanation box appears. Stories can be written in YAML files. |\n| unvt/charites | 2021.10 | Geolonia Inc. | Styles | Vector map styles based on MapBox (and MapLibre) style specifications can be created/edited using easy-to-edit YAML files. We can also import style from a json style style file to YAML file, and vice versa. A live map preview function enable us to check our edits on the fly. A tool donated by Geolonia to UNVT. |","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":16,"to":20}}}}],["291",{"pageContent":"| unvt/kata | 2022.3 | GSI, Japan, Geolonia Inc. | Production, Optimization | It has the \"filter\" function to add layer name, maximum zoom level, minimum zoom level to each source file and output them to JSON sequence to be converted into vector tile. There is a \"document\" function that shows the layer name, attribute name, and zoom level range from the vector tile metadata. By passing the filtered data to Tippecanoe, you can easily create a vector tile with adjusted layer structure. |\n| unvt/itoma | 2022.3 | GSI, Japan, Geolonia Inc. | Styles, Hosting | It displays vector tile map styles (YAML format imported by charites) in multiple vector tile libraries (Mapbox GL JS, MapLibre GL JS, ArcGIS API for Javascript) ) as preview by localhost. In addition, since it returns a response based on the VectorTileServer service of the ArcGIS REST API, you can check the use of vector tile maps in ArcGIS Online. (Note: Localhost needs to be https) |","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":21,"to":22}}}}],["292",{"pageContent":"| unvt / nanban | 2020.4 | hfu | General | Ubuntu / Intel based UNVT docker files. Give Windows users a Linux environment through a Docker container. |\n| unvt / equinox | 2020.3 | hfu | General | UNVT related tool installer for Raspberry Pi. |","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":23,"to":24}}}}],["293",{"pageContent":"There are more tools undre UNVT although they are not written here. For example, UNVT Portal is one of the tools and it was reported to UN Open GIS monthly meeting. I hope I can introduce them somewhere.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":26,"to":26}}}}],["294",{"pageContent":"Tools for advanced users (The usage will become a little more specialized)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":28,"to":28}}}}],["295",{"pageContent":"| Tool name | Release date | Developer (main) | Areas of use | Overview |\n|:-|:-: |:-: |:-: |:-|\n| unvt/onyx | 2019 | hfu | Host | A simple and scalable vector tile server. It is a nodejs/express server to host vector tiles and it delivers vector tiles in pbf format from mbtiles files. It can be executed in PM2. |\n| unvt/marble | 2021.12 | ubukawa | Hosting | A server that extends the above mentioned onyx to deploy a function to return a response that conforms to the ArcGIS REST API VectorTileServer. It works with nodejs/express. |\n| unvt/naru | 2020 | hfu | General (Capacity Building) | It works with Raspberry Pi and Docker. After downloading OSM, you can convert it to vector tiles, create styles using hocon, prepare sprites, and so on. It is a material for capacity building. |\n| unvt/nsft | 2022.2 | ubukawa | Hosting | This is a workplace where I converted Noto Sans series fonts to PBF text fonts. It can be applicable to other fonts. |","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":30,"to":35}}}}],["296",{"pageContent":"| unvt/nsft | 2022.2 | ubukawa | Hosting | This is a workplace where I converted Noto Sans series fonts to PBF text fonts. It can be applicable to other fonts. |\n| unvt/oz | 2021.9 | hfu | Hosting | A tool for server-side overzooming. Create large zoom level tiles from existing files. |\n| unvt/zfxy-spec | 2022.3 | hfu | General | This is a draft specification for expanding zxy vector tile schema. It introduces the height index \"f\" to define a 3D tile space. We are paying attention to future development.","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":35,"to":37}}}}],["297",{"pageContent":"# Tool introduction / Details (Selected tools from the above list)\nI won't cover all of the tools above, but I will introduce some detailes of the selected tools. If you have any question or request about our tools, please let me know in the comments. I will reply as much as possible.","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":40,"to":41}}}}],["298",{"pageContent":"unvt/tell\n### overview:\nYou can create a storytelling map with a vector tile map in the background (MapLibre). As you scroll through the home page, the map scene moves and explanations appear. Stories can be written in YAML files.\n\n* You can create a map story by preparing an html file and a YAML file that specifies the location of the story and map. You can also use YAML tags in the html file.\n* This is a script developed as a workshop material and developed based on the scripts at https://github.com/optgeo/s (developed by hfu, taisukef, halsk).\n* This storytelling related work was inspired by mapbox, and developers explicitly express their appreciations to mapbox. thanks.\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/aab7f295-9a3a-8e49-6779-069a3856fb61.png)\n \n### Repository URL:\nhttps://github.com/unvt/tell","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":43,"to":54}}}}],["299",{"pageContent":"Repository URL:\nhttps://github.com/unvt/tell\n\n### Past efforts and references:\n* UNVT Storytelling workshop (2022-10-22):\n    * Recording: https://www.youtube.com/watch?v=CVajhAUDLMs\n    * Slide: https://speakerdeck.com/hfu/unvt-storytelling\n* My past blog: https://qiita.com/T-ubu/items/b970339a49d8f584acf6","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":54,"to":61}}}}],["300",{"pageContent":"unvt/charites","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":61,"to":61}}}}],["301",{"pageContent":"overview:\nVector map styles based on MapBox (and MapLibre) style specifications can be created/edited using easy-to-edit YAML files. We can also import style from a json style style file to YAML file, and vice versa. A live map preview function enable us to check our edits on the fly. A tool donated by Geolonia to UNVT. **(I'm a Windows user, so I often use this tool with unvt/nanban (a docker container).)**\n\n* Create a YAML-formatted style from scratch, or import an existing style (JSON) into YAML format.\n* You can edit the style in YAML format.\n* Manage style in YAML files and classifies layers into groups to improve maintenance convenience and style readability.\n* Edited YAML files can be output in JSON format.\n* Real-time preview is also available, so you can see the result of your edit on the fly.","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":104,"to":111}}}}],["302",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f593642f-4607-f382-4642-de057186bb36.png)\n(As shown in this figure, one style information is managed by multiple YAML files.)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/94c377f5-881e-2a70-df44-b2d5cf41db7c.png)\n(Edit the YAML file while doing a live preview.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":113,"to":117}}}}],["303",{"pageContent":"Repository URL:\nhttps://github.com/unvt/charites\n \n### Past efforts and references:\n* Geolonia's blog: https://blog.geolonia.com/2021/10/21/unvt-charites.html\n* My past articles\n    * How to edit / modify a style.json of your vector tile map using UNVT / charites: https://qiita.com/T-ubu/items/e6794b81e45dea34548c\n    * Process the style of GSI Map Vector (tentative name) with unvt / charites and see it in ArcGIS Online (first step): https://qiita.com/T-ubu/items/87b17bb8752cb15c9d28\n    * How to use UNVT styling tool, charites, to edit a style json from ArcGIS server https://qiita.com/T-ubu/items/6e31a6bc5a458b91d4cd","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":120,"to":128}}}}],["304",{"pageContent":"unvt/kata","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":128,"to":128}}}}],["305",{"pageContent":"overview:\nIt has the \"filter\" function to add layer name, maximum zoom level, minimum zoom level to each source file and output them to JSON sequence to be converted into vector tile. There is a \"document\" function that shows the layer name, attribute name, and zoom level range from the vector tile metadata. By passing the filtered data to Tippecanoe, you can easily create a vector tile with adjusted layer structure. **(I'm a Windows user, so I often use this tool with unvt / nanban for some purposes.)**\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/5894e19f-920d-1ed8-8d43-05ad0ab21e79.png)\n(The figure is from the GitHub repository. Although it is an initial concept, you can understand that ① is the document function and ② is the filter function.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":197,"to":201}}}}],["306",{"pageContent":"* unvt/kata can easily give the layer name and maximum / minimum zoom level for each source by using the filter function when creating vector tiles. You can easily create a vector tile by passing the filtered one to tippecanoe with the following command.\n```\nkata filter kata.yml | tippecanoe -e zxy2 --no-tile-compression --no-feature-limit --no-tile-size-limit\n```\n* I think it is a very useful tool because you can check the layer list and property list of vector tiles.\n* If the data exceeds several GB, there is no setting to divide the output file according to the region, so I think that something other than this tool is needed, but it perfectly fits for small data conversion.","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":203,"to":208}}}}],["307",{"pageContent":"Repository URL:\nhttps://github.com/unvt/kata\n\n### Past efforts and references:\n* My past articles\n    * Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban) https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd\n    * Try using unvt/kata (0th) https://qiita.com/T-ubu/items/22b6c4c07fca9c754df6 (* This article has not completed all the work due to a bug in the old version. Now This issue has been fixed in v1.0.4 of.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":210,"to":216}}}}],["308",{"pageContent":"unvt/itoma","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":216,"to":216}}}}],["309",{"pageContent":"overview:\nIt displays vector tile map styles (YAML format imported by charites) in multiple vector tile libraries (Mapbox GL JS, MapLibre GL JS, ArcGIS API for Javascript) ) as preview by localhost. In addition, since it returns a response based on the VectorTileServer service of the ArcGIS REST API, you can check the use of vector tile maps in ArcGIS Online. (Note: Localhost needs to be https) **(I'm a Windows user, so I often use this tool with unvt / nanban for some purposes.)**","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":306,"to":307}}}}],["310",{"pageContent":"* You can see a preview of the style from your local host.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/0581ed9f-ab4e-fe29-9876-02bd6f063a66.png)\n(↑ You can preview in 3 libraries.)\n* Since it is also previewed in ArcGIS Online, it returns a response according to the ArcGIS REST API. By executing \"itoma serve\", you can check the response of ArcGIS REST API from http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer.\n    * index.json: http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/index.json\n    * root.json (style): http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/resources/styles/root.json\n    * sprites: http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/resources/sprites/\n    * glyphs (fonts): http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/resources/fonts/","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":309,"to":316}}}}],["311",{"pageContent":"* glyphs (fonts): http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/resources/fonts/　\n    * tilemap: http://localhost:8080/arcgis/rest/services/{any_name}/VectorTileServer/tilemap (However, tilemap in this tool  uses a fixed values ​​for pre-determined zoom levels. When you use your own tiles, you may need to edit the source codes.)\n* Actually, in order to see the vector tile map in ArcGIS Oline, you need to see the localhost with https protocol, and you need to set CORS. (We can so so. You can see my past experience in the other blog.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":316,"to":318}}}}],["312",{"pageContent":"![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e23d3c55-b53a-962d-9a3e-0ca50a6706c0.png)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":320,"to":320}}}}],["313",{"pageContent":"Repository URL:\nhttps://github.com/unvt/itoma\n\n### Past efforts and references:\n* My past articles\n    * itoma (1): Try the ArcGIS Rest API implementation tool unvt/itoma for vector tiles https://qiita.com/T-ubu/items/f40f6dd23724cae92db4\n    * itoma (2): Make unvt/itoma (ArcGIS REST API implementation tool for vector tiles) https-enabled https://qiita.com/T-ubu/items/97495f40c8477515239f","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":322,"to":328}}}}],["314",{"pageContent":"unvt/nanban\n### overview:\nUbuntu/Intel based UNVT docker file. Even Windows users can get a Linux-like working environment through the Docker container, so vector tile conversion using tippecanoe can be done easily. Since gdal (ogr2ogr), nodejs, ruby, etc. are also included, it can be used not only for vector tile creation but also for hosting test and style test.\n\nThe main components of this tool are:\n\n* nodejs\n* gdal-bin\n* ruby\n* sqlite3\n* tmux\n* vim\n* tarn\n* mapbox/tippecanoe\n* budo\n* hjson\n* pm2\n* phshcorn/hocon-parser\n* vt-optimizer (It doesn't work with recent nodejs, so I haven't put it in the current nanban.)\n* unvt/charites\n* unvt/kata\n* unvt/itoma\n\nPlease read carefully as the policy regarding the use of Docker changed in the summer of 2021 ([Docker FAQ] (https://www.docker.com/pricing/faq/)).\n\n> Docker Desktop may be used for free as part of a Docker Personal subscription for:\n..\nNon-commercial open source projects","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":330,"to":357}}}}],["315",{"pageContent":"Repository URL:\nhttps://github.com/unvt/nanban\n\nhttps://hub.docker.com/r/unvt/nanban\n\n### Past efforts and references:\n* My past articles\n    * Create vector tiles with Docker (unvt/nanban) (for Windows users) https://qiita.com/T-ubu/items/76a60bfd4a27d11521e2","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":360,"to":367}}}}],["316",{"pageContent":"unvt/equinox\n### overview:\nUNVT related tool installer for Raspberry Pi. You can install tools related to vector tile processing by curling and running the installer from Raspberry Pi.\n\nAs for the component of the tool, I will not write it in detail here because it is easy to understand by looking at @hfu's article. In addition to the general tools such as nginx, nodejs and ruby, it also contains geospatial and vector tile related tools like Tippecanoe, gdal, pdal, charites, vt-optimizer.\n\nA few years ago, we often run a Docker container on a Raspberry Pi, but I think that by using this equinox, it is possible to build a stable environment without using a Docker image.\n\n\n### Repository URL:\nhttps://github.com/unvt/equinox","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":369,"to":379}}}}],["317",{"pageContent":"Repository URL:\nhttps://github.com/unvt/equinox\n\n### Past efforts and references:\n* unvt/equinox component review (hfu, 2021)\n https://qiita.com/hfu/items/8792cf354faebf9b0efb\n* UNVT Guidance for those who want to move their hands early 2020 (hfu, 2020)\n https://qiita.com/hfu/items/4194c3b35b76d0a696ee\n* Create a vector tile server with Raspberry Pi (T-ubu, 2021) https://qiita.com/T-ubu/items/f5cb639b4c337ef1050d","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":379,"to":387}}}}],["318",{"pageContent":"Acknowledgments\nFrom the beginning to the present, @hfu's contributio is wonderful. Thank you for your daily efforts. We have also been happy to have a large number of partners as the UNVT community. In particular, I think the fact that Georgia donated unvt/charites is a big step forward. Thank you.\nWe would like to thank all the university students for participating in the UNVT hackathon in December 2021. I am also looking forward to seeing what progress will be made in the future.\n\n## References\n(For reference of each tool, citations and links are summarized in the text.)","metadata":{"source":"https://qiita.com/T-ubu/items/16c638c8708bb98225e6","title":"Vector tile: Introduction to UNVT tools ( a kind of a tool catalog (not endorsed). As of April 2022)　","tags":"vectortile unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":389,"to":394}}}}],["319",{"pageContent":"# Introduction\nAre you interested in creating vector tile easily with an open source tool? Here, I would like to introduce how we can quickly convert vector tile from GeoJSON with our tool from [UN Vector Tile Toolkit (UNVT)](https://github.com/unvt).\n\n\n\n\nAt this demonstration, I will use GeoJSON served from Esri ArcGIS server as an [item data](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm), and the conversion is done in the Windows PC, with the support of Docker container (unvt/nanban).\n\n:::note\nWhat is UNVT?\nUNVT, or United Nations Vector Tile Toolkit, is a collection of Open Source Software for various vector tile processing for better web mapping. UNVT project started in 2018 and it has been developed as a part of the [UN Open GIS Initiative](http://unopengis.org/unopengis/main/main.php) which aims to develop an Open Source GIS bundle that meets the requirements of UN operations.","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":11}}}}],["320",{"pageContent":"For those who want to know more about UNVT, please refer to my talk at FOSS4G 2021 from [here](https://www.youtube.com/watch?v=OGdzdVhV0cA).\n:::\n\n# Workflow\nThis time, we will produce vector tile from existing GeoJSON file. \n\n1. First, we start a Docker container, named unvt/nanban, where some of UNVT and other tools is installed. \n1. Secondly, we will prepare a list of the sources in YAML files.\n1. Then, we run unvt/kata on the Docker container to filter the source and forward the data into the data conversion tool Tippecanoe (note: tippecanoe is from mapbox).\n\n# Prerequisites","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":13,"to":23}}}}],["321",{"pageContent":"Source data\nThis time, we will use a GeoJSON served from ESRI ArcGIS server. There is an item (BNDA_SEN_2008-07-10_lastupdate) from here for testing purpose:\nhttps://geoportal.un.org/arcgis/sharing/rest/content/items/3b628266c28345ecbcac152255eba4be\n\nThen, its GeoJSON data is accessible from the following URL, and you will see a GeoJSON file:\nhttps://geoportal.un.org/arcgis/sharing/rest/content/items/3b628266c28345ecbcac152255eba4be/data\nThis is the source URL we use.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/6740eda5-d968-624a-3c14-5d0959f81c91.png)","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":24,"to":31}}}}],["322",{"pageContent":":::note\nAt first, I tried to see if I can access GeoJSON file through FeatureService (see [ArcGIS Rest API](https://developers.arcgis.com/rest/services-reference/enterprise/feature-service.htm) for detail) by an ArcGIS server, but I found it difficult to get the GeoJSON file from the FeatureService. Because 1) I could not get all features in a layer while I could get a JSON object of a certain feature, and 2) Esri's json format is not the same with the GeoJSON (Example: [A feature from USA Census Tract Areas by Esri](https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_Census_Tract_Areas_analysis_trim/FeatureServer/0/1?f=pjson) ).\n\nTherefore, I concluded I should directly access to a GeoJSON file that is served as an item data from ArcGIS server (https://developers.arcgis.com/rest/users-groups-and-items/item.htm)\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":34,"to":38}}}}],["323",{"pageContent":"My working environment\n* Windows 10 (Enterprise)\n* Docker version 20.10.8\n* PowerShell version 5.1.19041.1237\n\n## Repository of this trial\nFor this work, I have created a repository as below.\nhttps://github.com/ubukawa/kata-test2\n\n\n# Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":40,"to":50}}}}],["324",{"pageContent":"Step 1: Run a Docker container (unvt/nanban) \nBecause it is a little difficult to use the tool for vector tile conversion called tippecanoe (by mapbox), we used a Docker container. (I do not explain how we can use Docker here.)\n\nIn Powershell, go to the working directly and run unvt/nanban as below. (If necessary, please clone my github repository before you starting.)\n \n```\nDocker run -it --rm -v ${PWD}:/data unvt/nanban\ncd /data","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":52,"to":59}}}}],["325",{"pageContent":"Please make sure that the working directly was connected as \"/data\" in the container. This container already includes various tools, we can type \"kata --version\" to see if we have the latest unvt/kata tool.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/066e0dd7-5421-46a5-d995-35a066af8645.png)\n\nIf you see something like above figure, we can go to the next step. (version 1.0.3 is coming soon. But, the npm package unvt/kata has still ver. 1.0.2. You may need to wait for a while if you see version 1.0.2, because we need version 1.0.3.)\n\n:::note\nPreviously, unvt/nanban was developed based on nodejs version 12. If your Docker image is older, please pull it again to upgrade it. (As the nodejs version 12 will come to end of its life at the end of April, unvt/nanban is prepared with nodejs version 16.)\n:::","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":62,"to":69}}}}],["326",{"pageContent":"Step 2: Preparing the list of source layers\nAt the working directly, we create \"kata.yml.\" I have prepared the following file. If you want to use another file, please feel free to do so. You can add more than one layer.\n\n```yaml\nBNDA_SEN_2008:\n  source: https://geoportal.un.org/arcgis/sharing/rest/content/items/3b628266c28345ecbcac152255eba4be/data\n  minzoom: 1\n  maxzoom: 5\n## If you want\n#layer 2: # this will be a layer name in the vector tile\n#  source: directory/data.geojson #both location and URL are fine.\n#  minzoom: 0\n#  maxzoom: 6\n```","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":72,"to":85}}}}],["327",{"pageContent":"If you want\n#layer 2: # this will be a layer name in the vector tile\n#  source: directory/data.geojson #both location and URL are fine.\n#  minzoom: 0\n#  maxzoom: 6\n```\n\n## Step 3: Running kata filter to obtain geojson file\nThen, let's confirm if we can make a filtered GeoJSON, precisely it is GeoJSONSeq, from the source using kata filter. Try the following command. \n\n```\nkata filter kata.yml\n```\n\nBecause you do not specified the output location nor next command, you will see output as a standard output.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/1f44570f-3144-422a-9270-8de1973f3daa.png)\n\nAfter confirming the output, try following command to get it in txt format.\n\n```\nkata filter kata.yml > output.geojson\n```","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":85,"to":106}}}}],["328",{"pageContent":"Step 4: Converting geojson into vector tile.\nUse the following command to convert the output file into vector tile. \n\n```\ntippecanoe -e zxy --no-tile-compression --no-feature-limit --no-tile-size-limit output.geojson\n```\n* \"-e\" option is for getting tile in folder structure (z/x/y.pbf instead of a single mbtiles file)\n* \"--no-tile-complression\", \"--no-feature-limit\" and other options may not be necessary, but I added it just in case.\n\n\nThe following figure shows the result of step 3 and step 4. (It is in \"kata\" development env, so I used \"dist/cli.js\" instead of \"kata\". But, do not worry about it. Kata v.1.0.3 will be available from npm soon (I hope).)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/f6a5a55d-1e50-f230-ba40-495430914da7.png)\n\nNow, you have vector tile in the zxy folder.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e9a18e4c-f001-9a2e-5ede-6e1bd3cb9f39.png)","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":108,"to":122}}}}],["329",{"pageContent":"Now, you have vector tile in the zxy folder.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/e9a18e4c-f001-9a2e-5ede-6e1bd3cb9f39.png)\n\nIt is okay that you directly convert the tile from the source without using the intermediate geojson file. (Step 3 and Step 4 are done all at once)\n\n```\nkata filter kata.yml | tippecanoe -e zxy2 --no-tile-compression --no-feature-limit --no-tile-size-limit","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":122,"to":128}}}}],["330",{"pageContent":"Then, you have vector tiles. Congratulations!!","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":131,"to":131}}}}],["331",{"pageContent":"Step 5: Check the metadata (list of layers, their properties, and zoom level ranges)\nRemember, we have \"metadata.json\" in the zxy folder. We can check the vector tile by kata command.\n\n```\nkata document zxy/metadata.json","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":134,"to":138}}}}],["332",{"pageContent":"Then, you will see the list of layer(s) and its(their) properties and zoom levels. From the following figure, I could see that there is a single layer with several properties, which is correct. However, I saw the different zoom level range from 0 to 14 while actual range is from 1 to 5. The \"kata\" may need to fix it.\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/3d3bd363-0512-e1bd-3d7a-ead440c32df4.png)\n\n# Conclusion\nI have confirmed that we can create vector tile from GeoJSON file from ESRI server (served as item), and demonstrated how to to it. \n\nWe can say that it is EASY to make vector tile with unvt/kata and unvt/uanban. We can also say that we can easily confirm the structure of the vector tile, but unvt/kata may need to fix a small bug on zoom level ranges as of 11 April 2022.","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":141,"to":147}}}}],["333",{"pageContent":"We used a JSON file from ESRI server, but we can use any geojson files from a webserver or your local directory. Or, if you have shapefile, you just need to convert it to geojson using gdal (ogr2ogr) installed in unvt/nanban.","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":149,"to":149}}}}],["334",{"pageContent":"Small tips\nIf your data is big, more than several GB in output mbtiles format, the converstion with this tool would be tough because unvt/kata doest not have any measure to separate output by spatial extent. \n\n\n# Acknowledgement\nunvt/kata is developed by the Geospatial Information of Authority of Japan (GSI) and released as FOSS4G tool. Thank you GSI for its precious contribution. I also heard that colleagues from the Geolonia, Inc. developed the tool. Thank you also for their efforts.","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":151,"to":156}}}}],["335",{"pageContent":"# Reference\n* UN Open GIS Initiative http://unopengis.org/unopengis/main/main.php\n* FOSS4G 2021 - Deployment of open source vector tile technology with UN Vector Tile Toolkit https://www.youtube.com/watch?v=OGdzdVhV0cA\n* ArcGIS REST API FeatureService  https://developers.arcgis.com/rest/services-reference/enterprise/feature-service.htm\n* ArcGIS Blog \"How to Access Item Data Stored in ArcGIS Online or Portal with ArcGIS REST API\" https://community.esri.com/t5/arcgis-online-blog/how-to-access-item-data-stored-in-arcgis-online-or/ba-p/891392\n* unvt/kata https://github.com/unvt/kata","metadata":{"source":"https://qiita.com/T-ubu/items/4fa0ab633c6746574bdd","title":"Making Vector Tile from GeoJSON using unvt (unvt/kata and unvt/nanban)","tags":"unvt vectortile unvt-kata foss4g","author":"T-ubu","slide":"false","loc":{"lines":{"from":158,"to":163}}}}],["336",{"pageContent":"## Introduction\nIn this article, I will explain how we can edit style.json of your vector tile map using **[unvt/charites](https://github.com/unvt/charites)** one of the tools from **[UNVT](https://github.com/unvt)**. With this tool, we can create a style file from the scratch, but this article focuses on the procedure to edit/modify an existing style file. \n\nHere, we can use a style file from ArcGIS environment or a style file from any software that is concordant with mapbox style specification (or MapLibre style specification). \n\n## Environment\n* Windows 10 Enterprise\n* PowerShell version 5.1.19041.1237\n* Docker version 20.10.8\n* unvt/nanban\n* unvt/charites 0.1.2","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":1,"to":11}}}}],["337",{"pageContent":"Procedure","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":14,"to":14}}}}],["338",{"pageContent":"Step 1: Get the style file you want to edit\nIf you already have your own style.json for your vector tile map, you can skip step 1.","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":15,"to":16}}}}],["339",{"pageContent":"Case in ArcGIS Online\nWe can get the default style file of a vector tile layer from the item details of vector tile layer/service in ArcGIS Online. There is a button \"View style\" and/or \"Download style.\" I downloaded it (or copied it) and save it at my working directory with the file name \"root.json\". (You can save it as style.json or any other name you want.) \n\nIf you know the URL of the VectorTileServer (you can find its URL at the right bottom of the item detail page), you can get the style file also from https://(VectorTileServer URL)/resources/styles/root.json.\n\n![2021-11-24-style-01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/bbe1c87f-a886-211c-0c4b-46a611a32f32.png)\n\nIf you get a style file generated from Esri ArcGIS online, I would advise the following two points. This is important if you want to see/monitor your edit at the locally hosted web map in our tool.","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":18,"to":25}}}}],["340",{"pageContent":"If you get a style file generated from Esri ArcGIS online, I would advise the following two points. This is important if you want to see/monitor your edit at the locally hosted web map in our tool.\n\n* The locations of sprite and glyphs may be described as relative paths. It would be a good idea to replace them with their absolute paths.\n    * example: \"../sprites/sprite_S\" --> \"https://(your server)/resources/sprites/sprite_S\"\n* In a style file from ArcGIS online (root.json), the source of the vector tile is specified \"../../\" as \"url\", but it would be a good idea to specify the absolute path of pbf tile as \"tile.\"\n\n\n```json:source description from ArcGIS online\n\"sources\":{\"esri\":{\"type\":\"vector\",\"url\":\"../../\"}}\n```\n```json:recommended source description for our tool\n\"sources\":{\"esri\":\"type\":\"vector\",\"tiles\":\"https://(server_location)/tile/{z}/{y}/{x}.pbf\"}}\n```","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":25,"to":37}}}}],["341",{"pageContent":"Case in webmap powered by Mapbox GL JS or MapLibre GL JS\nIf you check the source of map, you will find the location of style.json.\n\n#### Case in Maputnik\nYou can also get a style file from Maputnik editor.","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":39,"to":43}}}}],["342",{"pageContent":"Step 2: Running the Docker (unvt/nanban) to use our styling tool \"unvt/charities\" \nFor your easy use in docker, unvt/charites is already included in unvt/nanban.\nI saved the downloaded style file \"root.json\" at a directory named \"src\" in my working directory. Then, I started the Windows PowerShell and moved to the directory. I ran a Docker container (from unvt/nanban) with the following command:\n\n```\ndocker pull unvt/nanban:latest\ndocker run -it --rm -v ${PWD}:/data -p 8080:8080 unvt/nanban","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":46,"to":52}}}}],["343",{"pageContent":"By using the \"-v\" option, I connected my working directory as \"/data\" in the docker container. Then, we can edit the file in the local working directly. Connect the port 8080 to 8080 so that we can see the locally hosted map through the port.\n\nThen, I moved to the working directly and confirmed that there was the style file in src directory. And, by running \"charites help\", I confirmed that the tool \"charites\" is available. The actual screen was like this. \n![2021-12-01_charites03_docker01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/2e1333d2-1dd3-495b-587b-fbc175912cbe.png)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":55,"to":58}}}}],["344",{"pageContent":"Note: Use of the Docker\nBecause our styling tool \"unvt/charites\" works oon OSX, Ubuntu, etc, it would be a good way to use it on Docker for the windows users. On the other hand, however, the licensing policy of Docker Desktop was updated on August 2021, so it may not be used for free for some of the use cases. According to [its FAQ](https://www.docker.com/pricing/faq), Non-commercial open source projects is included in list of the areas for a Docker Personal subscription with free of charge. In addition, podman may be used instead of docker as some RHEL does not support Docker.","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":60,"to":61}}}}],["345",{"pageContent":"Step 3: Importing the style.json into a series of YAML files.\nThen, first, I imported (or converted) the style file into a series of yml (YAML) files so that we can easily edit them with a text editor. I ran the following command (Given that the style json was saved as src/root.json and that the exported yml should be in \"style4esri\" folder). I recommend that you export style.yml in a ceratin directly because your layer information is exported in the layer directory in your specified directory.\n\n```\ncharites convert src/root.json style4esri/style.yml\n```\n![2021-12-01_charites03_docker02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/b89d879d-6d4b-aab7-efb2-c2c0c7426a57.png)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":66,"to":72}}}}],["346",{"pageContent":"I saw style.yml and number of yml files for style layers in the \"layer\" directory. They are ready to be edited (with any text editor). Yml files are relatively easy to understand and edit. (YAML is a human-friendly data serialization language for all programming languages.)\n![2021-12-02-charites04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/00895c7a-6ac6-09df-fe83-36318c3a5ed6.png)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":74,"to":75}}}}],["347",{"pageContent":"Note: Import of a style file from ArcGIS online\nWhen we import a style json into a series of yml files, we are using layers' \"id\" as the names of the yml files. So, if its \"id\" contains \"/ (slash)\", you will fail to import the style. This is often observed in a style file from ArcGIS online. I suggest that you replace \"/\" to sometext like \"(slash)\" in id to avoid an error.\n![2021-12-02-charites05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/6a145e2d-59ec-3823-d6f9-fd0968dc235c.png)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":79,"to":81}}}}],["348",{"pageContent":"Step 4: Starting local server to host the web map\nOne of the advantage/beauty of this tool, I think, is that we can immediately confirm the revision of the style by monitoring a locally hosted web map served by the tool. I ran the following command, and opened a web browser (Google Chrome) to access the localhost.\n\n```\ncharites serve style4esri/style.yml\n```\n![2021-12-01_charites03_docker04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/ca1b5018-a4bc-8254-0743-f63416672211.png)\n\nBy default, the port is 8080, so I accessed to the http://localhost:8080 to see the map. The style of the map is automatically updated as we revise any of yml file. In other words, once we save the edit, it is automatically detected. You can stop the hosting by ctrl + c.\n![2021-12-01_charites03_docker05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/679143/8e9da86b-171a-9311-a2c0-1d89a4e363f2.png)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":85,"to":94}}}}],["349",{"pageContent":"Step 5: Editing the YAML file\nThen, I was ready to edit the style information. \nWhen I want to edit an existing style layer, I can edit its yml file in the layer directory. When I want to add or delete a layer, I can edit its root yml file.\n\nIn the future, in another articule, I want to write something about the style expression we often use.\n\n### Step 6: Export edits to json\nWhen the revision of yml files is done, then we will convert yml file(s) back into json file.\n\n```\ncharites build style4esri/style.yml revised-root.json\n```\n\nThen, all done!!","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":96,"to":109}}}}],["350",{"pageContent":"Acknowledgement\nunvt/charites is open source tool and was donated by [Geolonia](https://geolonia.com/) to the UN Open GIS Initiative (specifically unvt). Thank you!!\n\n## References\n* [Docker's pricins FAQ](https://www.docker.com/pricing/faq)\n* [unvt/charites GitHub repository](https://github.com/unvt/charites)","metadata":{"source":"https://qiita.com/T-ubu/items/e6794b81e45dea34548c","title":"How to edit/modify a style.json of your vector tile map using UNVT/charites","tags":"vectortile unvt-charites unvt","author":"T-ubu","slide":"false","loc":{"lines":{"from":112,"to":117}}}}]]